# Kodak Wratten camera filters
# These were obtained from the graphs at https://www.kodak.com/en/motion/page/wratten-2-filters/
# using Plot Digitizer (https://plotdigitizer.sourceforge.net/). The wavelength intervals are
# roughly 5 nm (getting exact integer X values usually isn't possible).

import central as c
import numpy as np
import math
import matplotlib.pyplot as plt
import statistics
args = c.args
l1 = c.l1
m1 = c.m1
s1 = c.s1

# yellow 15
yellow15_5nm = np.array([[
	300,
	301.510,
	305.402,
	310.343,
	314.208,
	317.014,
	320.513,
	325.750,
	329.928,
	335.146,
	336.536,
	337,
	501,
	502.211,
	505.413,
	510.383,
	515.688,
	519.566,
	525.542,
	530.806,
	535.015,
	540.273,
	545.178,
	550.433,
	555.688,
	560.241,
	565.146,
	570.399,
	575.303,
	579.857,
	585.111,
	590.365,
	595.619,
	599.822,
	605.426,
	609.279,
	615.233,
	619.437,
	625.040,
	629.944,
	635.549,
	639.752,
	644.656,
	650.259,
	655.513,
	659.367,
	665.671,
	669.875,
	675.128,
	680.032,
	685.286,
	690.190,
	695.793,
	700.347,
	705.251,
	710.504,
	715.409,
	720.312,
	725.216,
	729.768,
	734.673,
	739.927,
	744.830,
	750.785,
	756.039,
	760.592,
	765.495,
	770.750,
	774.603,
	779.857,
	786.512,
	791.416,
	795.619,
	799.822,
	805.776,
	810.680,
	815.934,
	820.137,
	825.041,
	830.295,
	835.199,
	840.102,
	844.305,
	849.559,
	854.463,
	859.717,
	864.971,
	870.224,
	874.428,
	880.032,
	884.936,
	890.189,
	895.443,
	900.347,
],[
	0,
	0.00100584,
	0.00311012,
	0.00896471,
	0.0128078,
	0.0141464,
	0.0127323,
	0.00792732,
	0.00386065,
	0.00137094,
	0.00101140,
	0,
	0,
	0.00101569,
	0.00425698,
	0.0279919,
	0.122221,
	0.245141,
	0.463741,
	0.621248,
	0.727500,
	0.803516,
	0.856872,
	0.877112,
	0.897829,
	0.897789,
	0.908310,
	0.908263,
	0.908220,
	0.913507,
	0.918819,
	0.913413,
	0.913366,
	0.918687,
	0.918637,
	0.923991,
	0.913192,
	0.923899,
	0.907779,
	0.918417,
	0.918367,
	0.918329,
	0.923672,
	0.907556,
	0.912833,
	0.923540,
	0.907420,
	0.923445,
	0.918013,
	0.907293,
	0.923307,
	0.917878,
	0.907153,
	0.923171,
	0.923127,
	0.907023,
	0.923035,
	0.917608,
	0.912213,
	0.896306,
	0.922862,
	0.922815,
	0.912039,
	0.922717,
	0.922670,
	0.917248,
	0.901250,
	0.917157,
	0.922503,
	0.911728,
	0.917016,
	0.927763,
	0.922314,
	0.916897,
	0.916844,
	0.922179,
	0.922131,
	0.911370,
	0.911326,
	0.916625,
	0.921958,
	0.921914,
	0.905841,
	0.905795,
	0.916409,
	0.916362,
	0.916315,
	0.905612,
	0.916231,
	0.921555,
	0.916137,
	0.910747,
	0.905390,
	0.915999,
]])

# red 25
red25_5nm = np.array([[
	299.592,
	304.516,
	310.143,
	314.722,
	320.361,
	325.306,
	330.239,
	334.810,
	339.713,
	344.954,
	349.841,
	354.723,
	359.945,
	365.152,
	370.356,
	374.853,
	376.932,
	377,
	573,
	573.600,
	575.761,
	580.171,
	584.921,
	589.604,
	594.587,
	600.227,
	605.150,
	610.415,
	615.324,
	620.234,
	625.493,
	630.751,
	635.310,
	640.219,
	645.476,
	650.385,
	654.592,
	660.201,
	664.758,
	669.667,
	674.576,
	680.534,
	684.741,
	689.650,
	694.908,
	700.517,
	705.424,
	710.685,
	715.241,
	720.851,
	725.407,
	729.615,
	735.224,
	740.132,
	745.740,
	750.298,
	755.207,
	760.465,
	765.022,
	769.929,
	774.837,
	780.448,
	785.005,
	789.913,
	795.521,
	800.430,
	805.338,
	810.598,
	815.154,
	820.412,
	825.320,
	830.229,
	835.137,
	840.396,
	845.302,
	850.210,
	855.118,
	860.027,
	864.584,
	869.843,
	875.802,
	880.360,
	885.267,
	890.526,
	895.435,
	900.342,
],[
	0.00372910,
	0.00437114,
	0.00518432,
	0.00637012,
	0.00844965,
	0.0121000,
	0.0154022,
	0.0175304,
	0.0166230,
	0.0140939,
	0.0115349,
	0.00895313,
	0.00632429,
	0.00387854,
	0.00229604,
	0.00128908,
	0.00101250,
	0,
	0,
	0.00100074,
	0.00174062,
	0.0121518,
	0.0767534,
	0.256647,
	0.526375,
	0.710655,
	0.818422,
	0.867931,
	0.878087,
	0.893609,
	0.904056,
	0.898609,
	0.909133,
	0.914371,
	0.903525,
	0.914097,
	0.919382,
	0.913833,
	0.908345,
	0.918974,
	0.924268,
	0.913286,
	0.913173,
	0.923858,
	0.923715,
	0.918140,
	0.912617,
	0.928739,
	0.923162,
	0.923010,
	0.912080,
	0.922772,
	0.928069,
	0.922486,
	0.911534,
	0.922210,
	0.933001,
	0.927379,
	0.916398,
	0.910885,
	0.910753,
	0.926834,
	0.926709,
	0.921135,
	0.915575,
	0.926288,
	0.926155,
	0.936982,
	0.925887,
	0.920308,
	0.920175,
	0.925476,
	0.925342,
	0.930664,
	0.919634,
	0.919501,
	0.919368,
	0.924664,
	0.924540,
	0.924397,
	0.924235,
	0.929569,
	0.918552,
	0.918410,
	0.929157,
	0.918145,
]])

# blue 47
blue47_5nm = np.array([[
	299.664,
	304.912,
	310.505,
	315.063,
	319.985,
	324.907,
	329.819,
	335.070,
	340.319,
	345.925,
	350.488,
	355.408,
	359.630,
	365.257,
	370.180,
	375.103,
	380.376,
	384.946,
	389.515,
	395.140,
	400.416,
	405.340,
	410.261,
	415.181,
	420.445,
	425.003,
	430.261,
	435.165,
	440.419,
	444.971,
	449.872,
	455.473,
	460.373,
	465.272,
	470.519,
	475.766,
	480.312,
	485.555,
	489.746,
	494.636,
	499.870,
	505.101,
	509.979,
	514.850,
	520.415,
	525.274,
	529.783,
	531.164,
	532,
	689,
	689.833,
	694.770,
	700.408,
	704.986,
	709.915,
	715.190,
	720.468,
	725.392,
	730.319,
	734.540,
	740.520,
	745.440,
	750.362,
	754.929,
	760.197,
	764.759,
	770.022,
	774.582,
	780.192,
	785.449,
	790.354,
	794.910,
	800.165,
	805.071,
	810.676,
	815.579,
	820.483,
	825.387,
	830.292,
	835.197,
	840.100,
	845.003,
	850.257,
	855.512,
	860.065,
	864.969,
	869.873,
	875.477,
	880.380,
	885.284,
	890.188,
	895.443,
	900.347,
],[
	0.00155619,
	0.00140765,
	0.00113164,
	0.00123621,
	0.00175044,
	0.00250799,
	0.00290613,
	0.00273951,
	0.00249268,
	0.00259751,
	0.00311826,
	0.00423686,
	0.00614255,
	0.00944611,
	0.0138572,
	0.0199717,
	0.0287840,
	0.0393410,
	0.0534539,
	0.0793447,
	0.122018,
	0.181121,
	0.253456,
	0.344377,
	0.415860,
	0.459676,
	0.490441,
	0.499158,
	0.493268,
	0.484586,
	0.459507,
	0.435722,
	0.403541,
	0.369355,
	0.322486,
	0.279910,
	0.245839,
	0.198805,
	0.157025,
	0.119712,
	0.0815928,
	0.0524272,
	0.0321349,
	0.0173005,
	0.00813278,
	0.00341796,
	0.00147076,
	0.000990734,
	0,
	0,
	0.000994265,
	0.00190178,
	0.00363760,
	0.00576142,
	0.00939824,
	0.0141159,
	0.0224895,
	0.0331866,
	0.0522534,
	0.0726932,
	0.119985,
	0.164960,
	0.233580,
	0.304539,
	0.399399,
	0.471065,
	0.552318,
	0.625082,
	0.707422,
	0.745920,
	0.768184,
	0.805235,
	0.829264,
	0.859066,
	0.869185,
	0.869122,
	0.869059,
	0.879305,
	0.894933,
	0.910839,
	0.910773,
	0.900031,
	0.899961,
	0.910567,
	0.915890,
	0.910440,
	0.915758,
	0.910299,
	0.910233,
	0.910167,
	0.915483,
	0.926272,
	0.931682,
]])

# green 58
green58_5nm = np.array([[
	300,
	462,
	462.347,
	465.499,
	469.702,
	480.210,
	485.464,
	489.667,
	495.447,
	499.650,
	505.429,
	510.158,
	515.412,
	520.140,
	524.869,
	530.123,
	535.026,
	540.280,
	544.834,
	550.438,
	555.692,
	560.245,
	565.149,
	570.403,
	575.306,
	580.210,
	585.814,
	590.018,
	594.571,
	600.525,
	605.429,
	609.982,
	614.536,
	617.338,
	618,
	702,
	702.102,
	705.254,
	710.158,
	715.061,
	719.965,
	725.219,
	730.823,
	735.026,
	739.930,
	745.884,
	750.088,
	754.991,
	760.245,
	765.149,
	770.403,
	774.956,
	780.210,
	785.814,
	790.368,
	795.271,
	800.175,
	805.779,
	810.683,
	815.236,
	820.490,
	825.744,
	829.947,
	835.201,
	840.105,
	845.359,
	850.963,
	855.166,
	860.070,
	864.623,
	870.928,
	875.832,
	880.385,
	884.939,
	890.543,
	895.447,
	900,
],[
	0,
	0,
	0.00100884,
	0.00236877,
	0.00634670,
	0.0331909,
	0.0614519,
	0.110812,
	0.199819,
	0.294300,
	0.407560,
	0.485987,
	0.540112,
	0.549702,
	0.544886,
	0.521432,
	0.494615,
	0.455616,
	0.409958,
	0.360320,
	0.309347,
	0.256400,
	0.207586,
	0.155724,
	0.112120,
	0.0774769,
	0.0436004,
	0.0280807,
	0.0167573,
	0.00843557,
	0.00469178,
	0.00278347,
	0.00145993,
	0.00101477,
	0,
	0,
	0.00101477,
	0.00187882,
	0.00494615,
	0.0125708,
	0.0287474,
	0.0591527,
	0.108879,
	0.166105,
	0.248988,
	0.339790,
	0.414796,
	0.494615,
	0.576115,
	0.636534,
	0.678965,
	0.719987,
	0.754583,
	0.781616,
	0.800175,
	0.814382,
	0.828841,
	0.838623,
	0.843557,
	0.853513,
	0.853513,
	0.858535,
	0.863586,
	0.863586,
	0.863586,
	0.868667,
	0.868667,
	0.868667,
	0.878919,
	0.878919,
	0.878919,
	0.878919,
	0.878919,
	0.878919,
	0.884091,
	0.873778,
	0.878919,
]])

# neutral density 0.1
nd01_5nm = np.array([[
	299.973,
	304.881,
	310.490,
	315.398,
	319.956,
	324.864,
	330.122,
	335.029,
	339.586,
	344.494,
	350.102,
	355.009,
	359.916,
	365.174,
	370.081,
	375.338,
	380.245,
	385.502,
	390.760,
	395.316,
	400.223,
	404.779,
	410.036,
	415.644,
	420.200,
	424.757,
	430.715,
	434.920,
	440.178,
	445.435,
	450.692,
	455.949,
	459.804,
	465.061,
	469.968,
	475.225,
	480.482,
	485.389,
	490.295,
	495.202,
	499.758,
	505.365,
	509.922,
	514.828,
	520.436,
	525.342,
	530.599,
	535.155,
	540.412,
	545.319,
	550.226,
	555.483,
	560.039,
	565.296,
	570.553,
	575.459,
	580.016,
	585.623,
	590.529,
	595.436,
	599.992,
	605.600,
	609.455,
	614.712,
	619.618,
	625.226,
	630.483,
	635.389,
	639.945,
	645.202,
	650.459,
	655.716,
	660.272,
	665.880,
	670.436,
	675.342,
	680.249,
	685.506,
	690.763,
	695.319,
	699.525,
	705.132,
	710.740,
	715.297,
	720.554,
	725.811,
	730.367,
	735.624,
	740.181,
	745.788,
	750.344,
	755.251,
	760.157,
	765.414,
	770.321,
	774.877,
	780.485,
	785.742,
	790.298,
	794.854,
	800.462,
	805.368,
	810.625,
	815.181,
	820.438,
	825.695,
	830.251,
	834.807,
	840.064,
	844.971,
	850.228,
	855.485,
	860.392,
	864.948,
	870.205,
	875.111,
	880.368,
	885.625,
	890.532,
	895.088,
	900.345,
],[
	0.462957,
	0.479427,
	0.505246,
	0.532459,
	0.561140,
	0.577722,
	0.594793,
	0.608808,
	0.623155,
	0.641571,
	0.652863,
	0.668246,
	0.680013,
	0.687959,
	0.700073,
	0.704133,
	0.712363,
	0.716495,
	0.724867,
	0.733343,
	0.737598,
	0.737566,
	0.741844,
	0.750510,
	0.750476,
	0.754834,
	0.759207,
	0.759176,
	0.768047,
	0.772501,
	0.767968,
	0.776942,
	0.776913,
	0.776873,
	0.781382,
	0.781342,
	0.781302,
	0.781265,
	0.781227,
	0.785761,
	0.785726,
	0.781113,
	0.790246,
	0.790208,
	0.790165,
	0.790127,
	0.790087,
	0.790052,
	0.794634,
	0.794596,
	0.794558,
	0.794518,
	0.799131,
	0.794442,
	0.794401,
	0.799011,
	0.798976,
	0.798932,
	0.794247,
	0.794209,
	0.798821,
	0.798777,
	0.798747,
	0.798706,
	0.794022,
	0.793979,
	0.793938,
	0.793900,
	0.793865,
	0.793825,
	0.793784,
	0.793744,
	0.793708,
	0.793665,
	0.793630,
	0.793592,
	0.793554,
	0.793514,
	0.793473,
	0.793438,
	0.798048,
	0.802674,
	0.807326,
	0.816766,
	0.816724,
	0.821461,
	0.821425,
	0.826189,
	0.835849,
	0.835803,
	0.835766,
	0.835726,
	0.840576,
	0.835643,
	0.835604,
	0.845374,
	0.845327,
	0.845284,
	0.845247,
	0.845209,
	0.850109,
	0.850068,
	0.850025,
	0.849987,
	0.849943,
	0.849900,
	0.849862,
	0.844881,
	0.844838,
	0.844798,
	0.849697,
	0.849654,
	0.854585,
	0.849576,
	0.859503,
	0.854462,
	0.854419,
	0.849405,
	0.854334,
	0.849327,
	0.849283,
]])

# 0.2
nd02_5nm = np.array([[
	299.825,
	305.439,
	310.351,
	314.561,
	319.474,
	325.439,
	330,
	335.263,
	339.825,
	345.088,
	350,
	355.263,
	359.825,
	365.088,
	370.351,
	374.561,
	380.175,
	385.439,
	390,
	395.263,
	399.825,
	404.386,
	410.351,
	415.263,
	419.825,
	425.439,
	430.351,
	435.263,
	439.825,
	445.439,
	450,
	455.263,
	460.175,
	465.088,
	470,
	474.912,
	479.825,
	485.088,
	490,
	494.912,
	499.825,
	505.088,
	510,
	515.263,
	519.825,
	525.088,
	530,
	535.263,
	539.825,
	545.088,
	550,
	554.912,
	560.175,
	565.088,
	570,
	574.912,
	580.175,
	585.088,
	590,
	594.912,
	600.175,
	605.088,
	610,
	615.263,
	619.825,
	625.088,
	630,
	634.912,
	640.175,
	645.088,
	649.649,
	654.912,
	660.175,
	664.737,
	670,
	674.912,
	680.175,
	685.088,
	690,
	694.912,
	700.175,
	705.088,
	710,
	714.912,
	720.175,
	725.088,
	730,
	734.912,
	740.175,
	745.088,
	750,
	755.263,
	759.825,
	765.088,
	770,
	774.912,
	780.175,
	785.088,
	790.351,
	794.912,
	800.175,
	805.088,
	810,
	814.912,
	820.175,
	825.088,
	830,
	835.263,
	839.825,
	845.088,
	850,
	855.614,
	860.175,
	864.737,
	870.351,
	875.263,
	880.175,
	885.088,
	890.351,
	894.912,
	900.175,
],[
	0.304441,
	0.319012,
	0.344193,
	0.373538,
	0.407761,
	0.432302,
	0.447729,
	0.458319,
	0.469159,
	0.483070,
	0.500309,
	0.515144,
	0.527328,
	0.536655,
	0.546147,
	0.552568,
	0.555807,
	0.562341,
	0.568953,
	0.575642,
	0.579016,
	0.582409,
	0.592711,
	0.596185,
	0.603194,
	0.606729,
	0.610285,
	0.613862,
	0.621080,
	0.617460,
	0.624720,
	0.628381,
	0.628381,
	0.635769,
	0.635769,
	0.639496,
	0.643244,
	0.643244,
	0.643244,
	0.643244,
	0.643244,
	0.643244,
	0.643244,
	0.647014,
	0.643244,
	0.647014,
	0.643244,
	0.647014,
	0.647014,
	0.647014,
	0.650806,
	0.647014,
	0.647014,
	0.647014,
	0.643244,
	0.647014,
	0.647014,
	0.650806,
	0.654621,
	0.654621,
	0.654621,
	0.658458,
	0.650806,
	0.647014,
	0.647014,
	0.643244,
	0.643244,
	0.643244,
	0.639496,
	0.639496,
	0.639496,
	0.639496,
	0.639496,
	0.635769,
	0.635769,
	0.643244,
	0.635769,
	0.635769,
	0.639496,
	0.647014,
	0.650806,
	0.650806,
	0.662317,
	0.674031,
	0.685953,
	0.694018,
	0.702177,
	0.710433,
	0.722998,
	0.727236,
	0.735786,
	0.740098,
	0.744436,
	0.748799,
	0.748799,
	0.748799,
	0.753188,
	0.766510,
	0.757603,
	0.762043,
	0.753188,
	0.762043,
	0.762043,
	0.771003,
	0.766510,
	0.762043,
	0.762043,
	0.762043,
	0.771003,
	0.771003,
	0.775522,
	0.771003,
	0.766510,
	0.771003,
	0.775522,
	0.775522,
	0.780067,
	0.775522,
	0.775522,
	0.775522,
	0.775522,
]])

# 0.3
nd03_5nm = np.array([[
	299.719,
	304.620,
	309.870,
	314.768,
	320.017,
	325.267,
	329.468,
	335.071,
	339.974,
	344.526,
	349.778,
	355.029,
	359.931,
	364.834,
	370.437,
	375.691,
	380.243,
	385.147,
	390.750,
	394.953,
	400.206,
	404.759,
	409.662,
	414.565,
	420.169,
	425.072,
	429.625,
	434.528,
	440.132,
	445.036,
	449.939,
	455.193,
	460.447,
	464.650,
	470.604,
	475.508,
	480.411,
	485.665,
	490.919,
	494.772,
	499.675,
	505.279,
	510.183,
	515.087,
	520.341,
	525.244,
	529.798,
	534.701,
	539.605,
	545.209,
	550.463,
	555.717,
	559.920,
	564.824,
	570.078,
	574.631,
	579.535,
	584.438,
	590.042,
	594.945,
	599.849,
	605.103,
	610.358,
	614.911,
	619.465,
	625.069,
	630.323,
	635.578,
	639.781,
	645.735,
	650.639,
	655.192,
	659.395,
	664.299,
	670.254,
	675.508,
	680.061,
	684.615,
	690.219,
	695.122,
	700.025,
	704.928,
	710.181,
	715.084,
	719.987,
	724.540,
	730.143,
	735.396,
	740.299,
	745.202,
	750.455,
	755.008,
	759.561,
	764.115,
	769.368,
	774.972,
	780.226,
	784.779,
	790.383,
	795.987,
	800.190,
	805.794,
	809.997,
	815.251,
	820.155,
	825.409,
	830.663,
	834.866,
	839.769,
	844.673,
	850.277,
	855.881,
	860.084,
	865.338,
	870.242,
	875.846,
	880.399,
	885.303,
	890.557,
	895.461,
	900.014,
],[
	0.140340,
	0.148742,
	0.170015,
	0.197747,
	0.228670,
	0.255371,
	0.267531,
	0.278650,
	0.288548,
	0.300538,
	0.318532,
	0.341549,
	0.355742,
	0.368379,
	0.374876,
	0.381486,
	0.388211,
	0.395055,
	0.399694,
	0.406738,
	0.411512,
	0.418766,
	0.423680,
	0.433662,
	0.436212,
	0.443903,
	0.449111,
	0.457029,
	0.459716,
	0.459738,
	0.465133,
	0.467867,
	0.470617,
	0.473379,
	0.476164,
	0.478962,
	0.481775,
	0.484607,
	0.484632,
	0.484650,
	0.484673,
	0.484699,
	0.484722,
	0.484745,
	0.484770,
	0.484793,
	0.484814,
	0.484837,
	0.487685,
	0.490553,
	0.490578,
	0.484936,
	0.484956,
	0.484979,
	0.482194,
	0.485025,
	0.490717,
	0.493599,
	0.499395,
	0.505256,
	0.499443,
	0.499468,
	0.493723,
	0.493745,
	0.488063,
	0.485262,
	0.482475,
	0.476926,
	0.476945,
	0.479752,
	0.476995,
	0.477016,
	0.479815,
	0.477058,
	0.477086,
	0.477110,
	0.477131,
	0.477152,
	0.477178,
	0.479981,
	0.488443,
	0.497055,
	0.508767,
	0.517737,
	0.533022,
	0.545578,
	0.564962,
	0.578274,
	0.591898,
	0.598844,
	0.612955,
	0.620146,
	0.623787,
	0.627449,
	0.631137,
	0.638548,
	0.642301,
	0.642329,
	0.642364,
	0.649907,
	0.649933,
	0.653756,
	0.653782,
	0.653816,
	0.653847,
	0.657690,
	0.661556,
	0.661582,
	0.665469,
	0.665500,
	0.665537,
	0.669451,
	0.665600,
	0.665634,
	0.669544,
	0.669580,
	0.669610,
	0.673543,
	0.673577,
	0.673609,
	0.673639,
]])

# 0.4
nd04_5nm = np.array([[
	300,
	305.254,
	310.158,
	315.412,
	319.615,
	324.518,
	329.422,
	334.676,
	339.930,
	344.834,
	349.387,
	354.291,
	359.895,
	364.799,
	369.002,
	375.306,
	380.210,
	385.814,
	390.718,
	395.271,
	400.525,
	405.079,
	409.632,
	415.587,
	419.790,
	424.694,
	430.648,
	435.552,
	440.455,
	445.709,
	450.263,
	455.517,
	460.070,
	464.623,
	469.877,
	475.482,
	479.685,
	484.588,
	490.543,
	494.746,
	500,
	505.254,
	510.508,
	515.762,
	519.965,
	525.569,
	530.473,
	535.377,
	540.280,
	545.534,
	550.788,
	555.692,
	559.545,
	565.149,
	570.053,
	574.606,
	580.210,
	585.464,
	589.667,
	594.921,
	599.825,
	604.729,
	610.333,
	615.937,
	620.140,
	625.394,
	630.298,
	635.201,
	640.455,
	645.359,
	650.613,
	655.517,
	659.720,
	664.623,
	669.527,
	674.431,
	680.035,
	685.289,
	690.893,
	695.447,
	700.350,
	705.954,
	710.508,
	714.711,
	719.965,
	724.869,
	729.422,
	735.026,
	740.280,
	745.184,
	749.387,
	754.291,
	759.895,
	765.149,
	770.403,
	775.657,
	780.210,
	785.114,
	790.718,
	795.271,
	799.825,
	805.079,
	810.333,
	815.587,
	820.140,
	825.044,
	829.597,
	834.501,
	840.105,
	844.659,
	849.562,
	854.816,
	860.070,
	864.623,
	869.877,
	875.131,
	875.131,
	880.035,
	884.588,
	889.142,
	894.746,
	900,
],[
	0.0936174,
	0.100389,
	0.114766,
	0.135077,
	0.154423,
	0.175515,
	0.186032,
	0.193767,
	0.203001,
	0.213917,
	0.230728,
	0.245981,
	0.262242,
	0.271561,
	0.279579,
	0.287833,
	0.292902,
	0.298061,
	0.305081,
	0.310454,
	0.317765,
	0.325249,
	0.332909,
	0.340749,
	0.346750,
	0.350810,
	0.359072,
	0.361167,
	0.367528,
	0.371831,
	0.374001,
	0.378379,
	0.380588,
	0.382809,
	0.387291,
	0.387291,
	0.387291,
	0.391825,
	0.391825,
	0.394112,
	0.394112,
	0.394112,
	0.394112,
	0.394112,
	0.394112,
	0.391825,
	0.394112,
	0.394112,
	0.394112,
	0.396412,
	0.398725,
	0.396412,
	0.394112,
	0.394112,
	0.394112,
	0.394112,
	0.398725,
	0.405748,
	0.408116,
	0.408116,
	0.410498,
	0.408116,
	0.405748,
	0.401053,
	0.398725,
	0.394112,
	0.391825,
	0.387291,
	0.387291,
	0.387291,
	0.387291,
	0.387291,
	0.389551,
	0.389551,
	0.389551,
	0.387291,
	0.389551,
	0.389551,
	0.387291,
	0.391825,
	0.394112,
	0.405748,
	0.417727,
	0.430061,
	0.442758,
	0.455831,
	0.472028,
	0.491654,
	0.503233,
	0.518091,
	0.524156,
	0.536501,
	0.545950,
	0.549136,
	0.555565,
	0.562069,
	0.565349,
	0.571968,
	0.571968,
	0.575306,
	0.575306,
	0.582041,
	0.585438,
	0.585438,
	0.585438,
	0.585438,
	0.592292,
	0.588855,
	0.592292,
	0.595749,
	0.595749,
	0.595749,
	0.599226,
	0.602723,
	0.599226,
	0.599226,
	0.599226,
	0.599226,
	0.602723,
	0.606241,
	0.606241,
	0.609779,
]])

# 0.5
nd05_5nm = np.array([[
	299.688,
	305.302,
	310.565,
	314.778,
	319.691,
	324.953,
	329.163,
	334.073,
	339.336,
	345.299,
	350.212,
	354.422,
	359.685,
	364.244,
	370.557,
	374.765,
	380.376,
	385.636,
	389.143,
	394.052,
	400.364,
	404.572,
	409.131,
	414.040,
	420.001,
	424.910,
	430.169,
	435.078,
	439.637,
	444.195,
	449.454,
	455.064,
	460.323,
	465.932,
	470.841,
	475.398,
	480.307,
	484.514,
	489.773,
	495.382,
	499.589,
	505.199,
	510.457,
	515.716,
	520.274,
	525.532,
	530.440,
	535.699,
	539.555,
	544.814,
	550.073,
	555.332,
	559.889,
	565.148,
	570.406,
	575.314,
	580.222,
	585.131,
	589.689,
	595.298,
	600.206,
	605.815,
	610.723,
	615.980,
	619.836,
	625.095,
	630.353,
	635.611,
	639.818,
	645.076,
	650.686,
	655.944,
	660.151,
	664.358,
	669.616,
	675.225,
	680.484,
	685.041,
	690.651,
	695.559,
	700.468,
	704.675,
	710.637,
	715.898,
	720.106,
	724.665,
	730.276,
	734.835,
	740.096,
	745.005,
	750.966,
	755.525,
	760.433,
	765.342,
	770.601,
	775.860,
	780.418,
	785.326,
	790.936,
	795.844,
	800.752,
	805.660,
	810.919,
	815.126,
	820.385,
	825.994,
	830.902,
	835.810,
	840.018,
	844.926,
	850.886,
	855.093,
	860.001,
	865.260,
	870.167,
	874.725,
	880.335,
	885.944,
	890.852,
	895.760,
	900.668,
],[
	0.0735785,
	0.0812574,
	0.0892152,
	0.0991054,
	0.109449,
	0.117392,
	0.123724,
	0.130396,
	0.139858,
	0.150885,
	0.163737,
	0.175621,
	0.189469,
	0.197368,
	0.206795,
	0.211673,
	0.219209,
	0.225692,
	0.229672,
	0.235087,
	0.243455,
	0.249197,
	0.255074,
	0.261089,
	0.268807,
	0.273542,
	0.278358,
	0.283262,
	0.288252,
	0.291622,
	0.295028,
	0.300221,
	0.301958,
	0.305483,
	0.309052,
	0.309032,
	0.310821,
	0.312623,
	0.316274,
	0.316248,
	0.318082,
	0.319921,
	0.321771,
	0.321746,
	0.323611,
	0.323586,
	0.323563,
	0.325434,
	0.325416,
	0.325391,
	0.327273,
	0.329166,
	0.327226,
	0.329118,
	0.329093,
	0.329070,
	0.330975,
	0.334842,
	0.336782,
	0.338728,
	0.340689,
	0.340661,
	0.336678,
	0.330802,
	0.328856,
	0.328830,
	0.324984,
	0.324959,
	0.321163,
	0.321139,
	0.322995,
	0.322970,
	0.322950,
	0.324823,
	0.322905,
	0.322879,
	0.320973,
	0.322832,
	0.324698,
	0.328492,
	0.330394,
	0.336217,
	0.350226,
	0.362696,
	0.375617,
	0.386728,
	0.400497,
	0.414762,
	0.429530,
	0.442235,
	0.452655,
	0.460630,
	0.466013,
	0.474221,
	0.479759,
	0.479723,
	0.488175,
	0.488140,
	0.493838,
	0.496697,
	0.496662,
	0.499537,
	0.502426,
	0.505340,
	0.505301,
	0.508221,
	0.511163,
	0.511127,
	0.514091,
	0.514054,
	0.517022,
	0.520020,
	0.526097,
	0.522991,
	0.522953,
	0.525983,
	0.529023,
	0.528980,
	0.532042,
	0.532004,
	0.528866,
]])

# 0.6
nd06_5nm = np.array([[
	300,
	305.954,
	310.858,
	314.711,
	320.315,
	324.168,
	329.422,
	335.026,
	340.280,
	344.483,
	349.387,
	354.291,
	360.245,
	365.499,
	370.753,
	374.956,
	380.560,
	384.764,
	389.317,
	394.221,
	400.525,
	405.079,
	410.683,
	415.937,
	420.490,
	424.343,
	429.247,
	434.851,
	440.806,
	445.359,
	450.613,
	455.517,
	460.420,
	465.324,
	470.928,
	475.832,
	480.736,
	485.990,
	490.543,
	495.096,
	500,
	504.553,
	510.858,
	515.412,
	520.666,
	525.919,
	530.823,
	535.377,
	540.630,
	545.884,
	550.788,
	555.692,
	560.595,
	565.849,
	570.053,
	575.306,
	579.860,
	585.114,
	590.718,
	595.271,
	600.175,
	604.378,
	609.632,
	615.587,
	619.790,
	624.343,
	629.597,
	635.201,
	640.455,
	645.359,
	650.963,
	655.867,
	660.070,
	664.273,
	670.228,
	674.431,
	680.385,
	685.639,
	690.893,
	695.797,
	700.701,
	705.954,
	710.858,
	715.412,
	720.315,
	724.869,
	730.823,
	735.026,
	740.630,
	745.884,
	750.788,
	755.341,
	760.595,
	765.149,
	769.702,
	775.306,
	780.560,
	785.464,
	790.018,
	794.571,
	800.525,
	804.028,
	809.282,
	815.587,
	820.490,
	825.744,
	830.998,
	835.552,
	840.105,
	845.709,
	850.263,
	854.816,
	860.420,
	865.674,
	870.578,
	875.832,
	880.385,
	885.289,
	890.193,
	895.096,
	900,
],[
	0.0469609,
	0.0509594,
	0.0572692,
	0.0643604,
	0.0744715,
	0.0817612,
	0.0882065,
	0.0924229,
	0.0974077,
	0.103867,
	0.116048,
	0.128904,
	0.142350,
	0.150906,
	0.157200,
	0.160913,
	0.166648,
	0.171583,
	0.175636,
	0.180837,
	0.187282,
	0.192828,
	0.199701,
	0.205615,
	0.211704,
	0.215443,
	0.220533,
	0.224428,
	0.229729,
	0.233788,
	0.237917,
	0.240711,
	0.244963,
	0.247839,
	0.249290,
	0.252217,
	0.252217,
	0.253693,
	0.255179,
	0.258175,
	0.258175,
	0.258175,
	0.258175,
	0.256672,
	0.256672,
	0.256672,
	0.256672,
	0.258175,
	0.259686,
	0.259686,
	0.259686,
	0.258175,
	0.256672,
	0.255179,
	0.255179,
	0.256672,
	0.261206,
	0.264273,
	0.268941,
	0.270516,
	0.273692,
	0.272099,
	0.268941,
	0.267376,
	0.262735,
	0.256672,
	0.252217,
	0.250749,
	0.247839,
	0.249290,
	0.247839,
	0.249290,
	0.247839,
	0.249290,
	0.250749,
	0.249290,
	0.247839,
	0.249290,
	0.250749,
	0.250749,
	0.255179,
	0.262735,
	0.273692,
	0.288454,
	0.302242,
	0.313014,
	0.333770,
	0.351772,
	0.366442,
	0.379502,
	0.393028,
	0.407036,
	0.416650,
	0.424010,
	0.428989,
	0.431500,
	0.441693,
	0.449495,
	0.449495,
	0.446879,
	0.452126,
	0.454773,
	0.460113,
	0.462806,
	0.462806,
	0.462806,
	0.465515,
	0.468240,
	0.473738,
	0.476512,
	0.476512,
	0.476512,
	0.479301,
	0.479301,
	0.482107,
	0.484929,
	0.484929,
	0.487768,
	0.487768,
	0.487768,
	0.484929,
]])

# 0.7
nd07_5nm = np.array([[
	300,
	304.904,
	309.807,
	315.762,
	319.965,
	324.168,
	330.123,
	334.676,
	339.930,
	344.483,
	349.387,
	354.641,
	360.245,
	365.849,
	370.753,
	374.956,
	380.560,
	384.413,
	390.368,
	395.622,
	400.525,
	404.378,
	409.282,
	414.886,
	420.490,
	425.744,
	429.947,
	435.201,
	440.105,
	445.009,
	450.613,
	455.867,
	460.420,
	464.974,
	470.928,
	475.482,
	480.035,
	485.639,
	490.543,
	495.797,
	500.350,
	505.954,
	510.508,
	515.762,
	519.965,
	524.518,
	530.123,
	535.727,
	540.630,
	545.534,
	550.088,
	554.991,
	560.245,
	565.149,
	570.403,
	574.256,
	580.560,
	585.114,
	589.317,
	594.921,
	600.175,
	605.429,
	610.683,
	615.937,
	620.490,
	625.744,
	630.998,
	635.902,
	640.806,
	645.709,
	649.562,
	654.816,
	660.070,
	665.324,
	670.228,
	675.832,
	680.736,
	684.939,
	690.193,
	694.746,
	700,
	705.254,
	710.158,
	715.061,
	720.666,
	724.869,
	729.422,
	735.377,
	740.630,
	745.884,
	750.788,
	755.341,
	760.245,
	765.849,
	770.753,
	775.657,
	780.560,
	785.114,
	790.368,
	795.622,
	800.175,
	804.729,
	809.632,
	814.536,
	820.140,
	825.394,
	830.998,
	835.552,
	840.455,
	844.659,
	849.212,
	854.466,
	859.720,
	865.324,
	870.578,
	875.832,
	880.736,
	885.289,
	890.543,
	895.797,
	900,
],[
	0.0285559,
	0.0308040,
	0.0348155,
	0.0414688,
	0.0476959,
	0.0520542,
	0.0568107,
	0.0602208,
	0.0638357,
	0.0692638,
	0.0778286,
	0.0889953,
	0.0988409,
	0.106003,
	0.111063,
	0.115016,
	0.119110,
	0.122633,
	0.128487,
	0.132288,
	0.136996,
	0.141048,
	0.146923,
	0.153042,
	0.158489,
	0.162228,
	0.167026,
	0.171966,
	0.176023,
	0.179128,
	0.182289,
	0.185504,
	0.187680,
	0.189881,
	0.193231,
	0.195497,
	0.196640,
	0.198946,
	0.200109,
	0.201279,
	0.203639,
	0.203639,
	0.203639,
	0.204829,
	0.204829,
	0.204829,
	0.204829,
	0.206027,
	0.208443,
	0.209662,
	0.209662,
	0.208443,
	0.207231,
	0.206027,
	0.206027,
	0.208443,
	0.210887,
	0.214608,
	0.218394,
	0.220955,
	0.223546,
	0.220955,
	0.218394,
	0.215863,
	0.212120,
	0.207231,
	0.206027,
	0.204829,
	0.202455,
	0.202455,
	0.202455,
	0.202455,
	0.202455,
	0.203639,
	0.204829,
	0.202455,
	0.201279,
	0.202455,
	0.203639,
	0.203639,
	0.208443,
	0.215863,
	0.224853,
	0.235587,
	0.248277,
	0.261650,
	0.278978,
	0.295724,
	0.309841,
	0.326531,
	0.340131,
	0.350190,
	0.358451,
	0.362655,
	0.371211,
	0.379968,
	0.382189,
	0.386671,
	0.388932,
	0.391206,
	0.395793,
	0.400435,
	0.402776,
	0.402776,
	0.405131,
	0.409881,
	0.412278,
	0.414688,
	0.414688,
	0.409881,
	0.414688,
	0.422004,
	0.424471,
	0.424471,
	0.426953,
	0.426953,
	0.429449,
	0.431960,
	0.434485,
	0.437025,
	0.437025,
]])

# 0.8
nd08_5nm = np.array([[
	300,
	305.954,
	310.508,
	315.412,
	320.315,
	324.869,
	330.123,
	334.326,
	340.280,
	344.834,
	350.788,
	354.641,
	359.895,
	365.499,
	370.753,
	374.606,
	380.210,
	384.063,
	389.667,
	395.622,
	400.525,
	405.429,
	410.333,
	415.236,
	420.841,
	425.394,
	430.298,
	435.902,
	440.806,
	445.709,
	450.613,
	455.166,
	460.420,
	464.974,
	470.578,
	475.482,
	480.736,
	485.639,
	489.842,
	495.447,
	500.350,
	504.904,
	510.158,
	515.061,
	520.315,
	525.219,
	530.473,
	535.377,
	540.280,
	545.184,
	549.387,
	554.641,
	559.895,
	565.149,
	570.053,
	575.657,
	580.560,
	585.464,
	590.718,
	595.622,
	600.525,
	605.779,
	610.333,
	615.937,
	620.490,
	625.044,
	629.247,
	635.201,
	640.105,
	645.359,
	649.912,
	655.166,
	659.720,
	665.324,
	669.877,
	675.482,
	680.385,
	684.939,
	689.842,
	695.447,
	700.350,
	705.254,
	710.508,
	714.711,
	720.315,
	724.518,
	729.422,
	735.026,
	740.280,
	745.184,
	749.737,
	754.641,
	760.245,
	765.149,
	770.053,
	774.956,
	780.210,
	785.464,
	790.368,
	794.921,
	800.175,
	805.079,
	810.333,
	815.236,
	820.490,
	825.044,
	830.298,
	835.201,
	840.455,
	845.359,
	850.263,
	854.816,
	859.720,
	864.623,
	870.228,
	875.131,
	880.035,
	884.939,
	890.193,
	894.746,
	900,
],[
	0.0182567,
	0.0201636,
	0.0227965,
	0.0270067,
	0.0314385,
	0.0353365,
	0.0388001,
	0.0408955,
	0.0436108,
	0.0476064,
	0.0570618,
	0.0633914,
	0.0712511,
	0.0773259,
	0.0819796,
	0.0844104,
	0.0884505,
	0.0916071,
	0.0954323,
	0.100000,
	0.103569,
	0.107893,
	0.113058,
	0.117778,
	0.122697,
	0.126335,
	0.130081,
	0.133938,
	0.137909,
	0.141171,
	0.143668,
	0.146209,
	0.148795,
	0.151427,
	0.153207,
	0.155917,
	0.157750,
	0.159605,
	0.160540,
	0.161481,
	0.162428,
	0.163380,
	0.164337,
	0.164337,
	0.164337,
	0.164337,
	0.164337,
	0.166269,
	0.168224,
	0.169210,
	0.170202,
	0.169210,
	0.167244,
	0.166269,
	0.167244,
	0.168224,
	0.170202,
	0.175249,
	0.178348,
	0.179394,
	0.181503,
	0.179394,
	0.177309,
	0.175249,
	0.173212,
	0.169210,
	0.167244,
	0.165300,
	0.163380,
	0.162428,
	0.163380,
	0.163380,
	0.164337,
	0.164337,
	0.165300,
	0.164337,
	0.164337,
	0.163380,
	0.165300,
	0.167244,
	0.169210,
	0.174228,
	0.183637,
	0.192426,
	0.206405,
	0.216284,
	0.231997,
	0.251777,
	0.266929,
	0.278075,
	0.289687,
	0.300025,
	0.310732,
	0.318081,
	0.323707,
	0.329433,
	0.337224,
	0.341189,
	0.345200,
	0.345200,
	0.347224,
	0.351306,
	0.355436,
	0.355436,
	0.357519,
	0.359615,
	0.361723,
	0.365975,
	0.370278,
	0.368120,
	0.370278,
	0.372448,
	0.374631,
	0.376827,
	0.379036,
	0.381257,
	0.383492,
	0.381257,
	0.383492,
	0.385740,
	0.388001,
]])

# 0.9
nd09_5nm = np.array([[
	300,
	304.904,
	310.158,
	315.412,
	319.965,
	325.219,
	330.473,
	335.026,
	339.930,
	344.483,
	349.387,
	354.641,
	360.245,
	365.499,
	370.753,
	375.306,
	380.560,
	385.814,
	390.018,
	394.921,
	399.825,
	405.429,
	409.982,
	415.236,
	420.490,
	425.394,
	429.597,
	434.501,
	440.105,
	444.659,
	450.613,
	455.867,
	460.420,
	464.623,
	469.877,
	475.832,
	480.035,
	485.289,
	489.842,
	495.096,
	500.350,
	505.254,
	510.158,
	515.412,
	519.965,
	524.869,
	530.123,
	535.026,
	540.280,
	545.534,
	550.438,
	554.991,
	559.895,
	565.149,
	570.403,
	574.606,
	579.860,
	585.114,
	589.667,
	594.571,
	600.175,
	605.079,
	610.333,
	615.236,
	620.140,
	625.044,
	630.298,
	635.201,
	639.755,
	645.009,
	650.263,
	655.166,
	660.070,
	664.974,
	669.877,
	675.482,
	680.035,
	684.939,
	690.193,
	695.096,
	700,
	705.254,
	710.158,
	715.061,
	719.965,
	724.869,
	730.123,
	735.026,
	740.280,
	745.184,
	749.387,
	754.991,
	760.245,
	765.149,
	770.403,
	774.956,
	780.210,
	785.114,
	790.018,
	795.271,
	799.825,
	804.729,
	810.333,
	815.236,
	819.790,
	825.044,
	829.947,
	835.201,
	840.455,
	844.659,
	849.912,
	855.166,
	860.420,
	865.324,
	870.228,
	874.781,
	879.685,
	884.939,
	890.193,
	895.096,
	900,
],[
	0.0128904,
	0.0145713,
	0.0171583,
	0.0205615,
	0.0239310,
	0.0265820,
	0.0295267,
	0.0313014,
	0.0349725,
	0.0386206,
	0.0436567,
	0.0508109,
	0.0584512,
	0.0634281,
	0.0680299,
	0.0708669,
	0.0742544,
	0.0778039,
	0.0810485,
	0.0839372,
	0.0874376,
	0.0921535,
	0.0959966,
	0.100000,
	0.104170,
	0.108515,
	0.110431,
	0.114367,
	0.117069,
	0.119834,
	0.123383,
	0.125562,
	0.127780,
	0.130037,
	0.131564,
	0.133109,
	0.135460,
	0.137051,
	0.138660,
	0.138660,
	0.140288,
	0.141110,
	0.141936,
	0.141936,
	0.141936,
	0.142766,
	0.142766,
	0.143602,
	0.145288,
	0.146139,
	0.146994,
	0.146139,
	0.146139,
	0.146139,
	0.146139,
	0.146994,
	0.148720,
	0.151347,
	0.153124,
	0.154922,
	0.154922,
	0.154922,
	0.153124,
	0.152233,
	0.149591,
	0.146994,
	0.145288,
	0.142766,
	0.141936,
	0.141110,
	0.141110,
	0.141936,
	0.141936,
	0.142766,
	0.142766,
	0.142766,
	0.141936,
	0.141936,
	0.141936,
	0.143602,
	0.147855,
	0.152233,
	0.158582,
	0.168113,
	0.180310,
	0.192267,
	0.206216,
	0.219890,
	0.231750,
	0.245679,
	0.254435,
	0.266597,
	0.276099,
	0.282621,
	0.287613,
	0.292694,
	0.297864,
	0.301361,
	0.304900,
	0.306685,
	0.310286,
	0.313929,
	0.315767,
	0.319474,
	0.319474,
	0.323226,
	0.327021,
	0.327021,
	0.328935,
	0.330861,
	0.330861,
	0.334746,
	0.336705,
	0.340659,
	0.340659,
	0.340659,
	0.342653,
	0.346676,
	0.348706,
	0.348706,
	0.350747,
]])

# 1.0
nd10_5nm = np.array([[
	299.914,
	304.829,
	309.395,
	314.664,
	319.580,
	324.846,
	330.111,
	335.023,
	339.585,
	344.501,
	350.119,
	355.387,
	359.950,
	364.862,
	370.827,
	375.036,
	379.947,
	385.208,
	390.820,
	395.380,
	399.939,
	405.551,
	410.462,
	414.671,
	419.932,
	425.192,
	430.453,
	435.362,
	439.921,
	445.181,
	450.091,
	455.701,
	459.909,
	465.168,
	470.778,
	475.336,
	479.894,
	484.802,
	490.412,
	495.321,
	499.878,
	504.787,
	510.396,
	515.304,
	520.212,
	525.120,
	530.028,
	535.637,
	540.195,
	545.104,
	550.012,
	555.972,
	559.828,
	565.436,
	569.994,
	575.253,
	579.811,
	584.720,
	590.331,
	595.239,
	599.796,
	605.405,
	610.313,
	615.220,
	620.127,
	625.034,
	629.941,
	634.848,
	640.106,
	644.663,
	649.571,
	654.829,
	659.738,
	664.295,
	670.255,
	675.514,
	680.421,
	685.329,
	690.237,
	695.497,
	700.056,
	704.966,
	710.228,
	715.139,
	720.401,
	724.963,
	730.225,
	735.488,
	740.049,
	745.310,
	750.221,
	754.780,
	760.041,
	765.301,
	769.859,
	774.768,
	779.677,
	785.287,
	790.196,
	795.455,
	800.363,
	805.272,
	810.180,
	814.738,
	820.348,
	825.256,
	830.164,
	835.073,
	839.981,
	844.539,
	850.148,
	855.407,
	859.965,
	865.224,
	870.132,
	874.690,
	880.300,
	884.857,
	890.116,
	895.024,
	900.283,
],[
	0.00685623,
	0.00788942,
	0.00923913,
	0.0113382,
	0.0132778,
	0.0152786,
	0.0171742,
	0.0186391,
	0.0204671,
	0.0236896,
	0.0282332,
	0.0336485,
	0.0369486,
	0.0405721,
	0.0445502,
	0.0466825,
	0.0489162,
	0.0518600,
	0.0546599,
	0.0569415,
	0.0589722,
	0.0625208,
	0.0658969,
	0.0686480,
	0.0715127,
	0.0744970,
	0.0771531,
	0.0794381,
	0.0817911,
	0.0842130,
	0.0867071,
	0.0882354,
	0.0903194,
	0.0919119,
	0.0935319,
	0.0946267,
	0.0957342,
	0.0957274,
	0.0974147,
	0.0979793,
	0.0985478,
	0.0991190,
	0.0996925,
	0.100270,
	0.0996782,
	0.0996710,
	0.0996639,
	0.100241,
	0.101414,
	0.102002,
	0.102593,
	0.102584,
	0.101980,
	0.100785,
	0.101370,
	0.101957,
	0.103755,
	0.106205,
	0.109349,
	0.110628,
	0.109976,
	0.109325,
	0.108045,
	0.106781,
	0.104915,
	0.102480,
	0.100690,
	0.0989306,
	0.0977720,
	0.0971951,
	0.0977585,
	0.0971806,
	0.0977439,
	0.0983110,
	0.0983024,
	0.0982949,
	0.0977144,
	0.0977074,
	0.0982737,
	0.100006,
	0.102969,
	0.106640,
	0.113722,
	0.121273,
	0.130085,
	0.141181,
	0.152328,
	0.165320,
	0.175271,
	0.184734,
	0.193574,
	0.201654,
	0.211302,
	0.216290,
	0.220105,
	0.225302,
	0.229275,
	0.233317,
	0.236046,
	0.237413,
	0.240191,
	0.244427,
	0.245844,
	0.247270,
	0.248701,
	0.251610,
	0.251592,
	0.254536,
	0.257514,
	0.257496,
	0.260506,
	0.262015,
	0.263535,
	0.266617,
	0.266598,
	0.269718,
	0.271279,
	0.271261,
	0.272832,
	0.276024,
	0.276002,
]])

# 2.0
nd20_5nm = np.array([[
	300,
	312,
	312.248,
	315.748,
	320.297,
	325.197,
	330.446,
	334.996,
	340.245,
	345.144,
	349.694,
	355.293,
	360.192,
	364.742,
	370.341,
	375.241,
	380.140,
	385.039,
	389.939,
	395.188,
	400.087,
	404.987,
	409.536,
	415.136,
	420.385,
	425.284,
	430.184,
	435.433,
	440.332,
	444.182,
	449.781,
	455.031,
	460.630,
	465.179,
	470.429,
	475.328,
	480.227,
	485.477,
	490.376,
	495.276,
	500.175,
	505.074,
	510.324,
	515.223,
	520.122,
	525.372,
	530.271,
	534.821,
	540.070,
	545.319,
	550.219,
	555.468,
	560.018,
	564.917,
	569.816,
	575.066,
	579.615,
	584.864,
	590.114,
	595.363,
	599.913,
	604.812,
	610.061,
	614.961,
	620.210,
	625.459,
	629.659,
	635.258,
	640.157,
	645.407,
	649.956,
	654.856,
	659.755,
	665.354,
	670.254,
	675.153,
	680.402,
	684.602,
	689.851,
	694.751,
	700.350,
	705.249,
	710.149,
	715.048,
	719.948,
	724.847,
	730.096,
	734.996,
	739.895,
	745.144,
	750.394,
	754.943,
	759.843,
	765.092,
	769.991,
	774.891,
	779.790,
	785.389,
	790.289,
	794.838,
	799.738,
	804.987,
	809.886,
	815.136,
	820.035,
	824.584,
	830.184,
	835.433,
	839.633,
	845.232,
	850.131,
	855.381,
	859.580,
	865.179,
	870.079,
	874.628,
	879.528,
	885.477,
	889.676,
	895.276,
	900.175,
],[
	0,
	0,
	9.92267e-05,
	0.000101565,
	0.000152072,
	0.000154451,
	0.000184642,
	0.000222454,
	0.000278616,
	0.000413943,
	0.000498713,
	0.000788415,
	0.00101861,
	0.00121772,
	0.00134701,
	0.00158551,
	0.00178130,
	0.00197044,
	0.00214609,
	0.00237396,
	0.00262603,
	0.00295032,
	0.00331465,
	0.00369518,
	0.00415150,
	0.00448660,
	0.00488654,
	0.00532213,
	0.00570724,
	0.00597935,
	0.00641203,
	0.00677009,
	0.00709287,
	0.00737357,
	0.00772513,
	0.00803086,
	0.00822007,
	0.00841375,
	0.00854539,
	0.00881489,
	0.00902258,
	0.00916375,
	0.00930713,
	0.00923516,
	0.00930713,
	0.00930713,
	0.00937966,
	0.00960066,
	0.00998061,
	0.0101368,
	0.0102158,
	0.0101368,
	0.0100584,
	0.00990344,
	0.00998061,
	0.0101368,
	0.0106201,
	0.0113886,
	0.0120245,
	0.0124037,
	0.0126960,
	0.0126960,
	0.0125004,
	0.0121182,
	0.0116569,
	0.0112131,
	0.0107862,
	0.0104565,
	0.0101368,
	0.0100584,
	0.0100584,
	0.0102158,
	0.0103756,
	0.0105379,
	0.0106201,
	0.0106201,
	0.0107028,
	0.0106201,
	0.0105379,
	0.0107862,
	0.0112131,
	0.0119315,
	0.0131984,
	0.0150603,
	0.0173188,
	0.0203851,
	0.0241814,
	0.0282427,
	0.0327311,
	0.0376394,
	0.0419605,
	0.0460570,
	0.0501625,
	0.0537924,
	0.0567962,
	0.0590440,
	0.0613807,
	0.0638099,
	0.0658223,
	0.0673732,
	0.0689606,
	0.0694980,
	0.0711354,
	0.0728115,
	0.0739507,
	0.0751078,
	0.0762829,
	0.0774765,
	0.0780802,
	0.0799199,
	0.0818029,
	0.0824404,
	0.0837303,
	0.0837303,
	0.0857030,
	0.0870440,
	0.0877223,
	0.0890948,
	0.0897891,
	0.0919047,
	0.0919047,
]])

# 3.0
nd30_5nm = np.array([[
	300,
	385,
	385.727,
	389.931,
	394.835,
	400.088,
	404.988,
	410.239,
	414.791,
	420.394,
	425.298,
	430.201,
	435.455,
	440.359,
	445.263,
	450.869,
	455.774,
	460.329,
	464.884,
	470.140,
	475.046,
	480.303,
	484.858,
	490.115,
	495.022,
	499.929,
	505.186,
	509.743,
	515.351,
	520.259,
	524.816,
	530.424,
	534.981,
	540.238,
	545.145,
	550.052,
	555.310,
	560.218,
	565.126,
	569.684,
	574.942,
	579.848,
	584.754,
	590.010,
	595.267,
	600.174,
	605.082,
	610.341,
	614.549,
	620.160,
	625.070,
	629.981,
	635.241,
	640.151,
	645.411,
	649.617,
	655.226,
	659.782,
	665.391,
	670.298,
	675.206,
	680.465,
	685.373,
	690.282,
	695.189,
	700.445,
	704.649,
	709.902,
	715.152,
	720.401,
	725.299,
	730.197,
	735.446,
	740.345,
	745.245,
	750.147,
	755.048,
	760.302,
	764.856,
	769.761,
	775.016,
	780.272,
	785.178,
	790.084,
	795.341,
	799.897,
	805.154,
	810.412,
	815.318,
	820.225,
	825.133,
	830.390,
	834.596,
	840.204,
	845.111,
	849.667,
	854.924,
	860.180,
	865.437,
	870.344,
	875.251,
	879.808,
	885.417,
	890.325,
	895.232,
	900.140,
],[
	0,
	0,
	0.000101343,
	0.000108705,
	0.000119357,
	0.000137319,
	0.000166827,
	0.000204261,
	0.000233174,
	0.000270361,
	0.000303866,
	0.000341524,
	0.000386849,
	0.000428076,
	0.000466380,
	0.000508119,
	0.000549294,
	0.000589198,
	0.000627103,
	0.000667454,
	0.000694004,
	0.000727252,
	0.000762083,
	0.000798593,
	0.000823922,
	0.000843465,
	0.000863478,
	0.000877100,
	0.000897916,
	0.000912089,
	0.000919296,
	0.000933818,
	0.000963430,
	0.000986288,
	0.00100968,
	0.00104171,
	0.00104995,
	0.00105005,
	0.00104201,
	0.00105025,
	0.00106683,
	0.00110927,
	0.00117148,
	0.00123720,
	0.00130660,
	0.00132722,
	0.00133772,
	0.00131719,
	0.00127692,
	0.00119998,
	0.00113647,
	0.00107632,
	0.00101936,
	0.000980547,
	0.000950591,
	0.000958096,
	0.000973231,
	0.000996308,
	0.00101205,
	0.00102802,
	0.00103615,
	0.00102025,
	0.00100459,
	0.000996900,
	0.00102055,
	0.00107779,
	0.00115608,
	0.00133006,
	0.00164123,
	0.00210556,
	0.00270123,
	0.00349251,
	0.00448059,
	0.00557200,
	0.00682225,
	0.00803424,
	0.00938820,
	0.0106342,
	0.0116762,
	0.0126223,
	0.0137519,
	0.0145233,
	0.0153379,
	0.0160726,
	0.0167120,
	0.0173766,
	0.0179279,
	0.0184967,
	0.0190833,
	0.0195360,
	0.0199993,
	0.0206338,
	0.0209592,
	0.0214566,
	0.0219656,
	0.0226621,
	0.0241203,
	0.0254733,
	0.0262815,
	0.0269048,
	0.0275430,
	0.0279775,
	0.0279806,
	0.0282019,
	0.0286470,
	0.0288736,
]]) 

# 4.0 
nd40_5nm = np.array([[
	300,
	406,
	406.398,
	409.904,
	414.461,
	420.070,
	424.628,
	430.587,
	434.794,
	440.053,
	444.961,
	449.518,
	455.478,
	459.684,
	464.943,
	469.851,
	474.759,
	480.368,
	484.926,
	490.184,
	495.092,
	499.649,
	504.908,
	510.167,
	515.425,
	519.982,
	525.241,
	530.149,
	535.057,
	539.614,
	544.873,
	550.482,
	555.390,
	560.298,
	564.505,
	569.763,
	575.022,
	579.930,
	584.838,
	590.096,
	595.355,
	599.912,
	604.820,
	609.728,
	614.987,
	620.245,
	624.803,
	629.711,
	634.969,
	639.877,
	645.486,
	650.394,
	655.302,
	659.860,
	665.118,
	669.676,
	675.285,
	680.193,
	685.101,
	689.658,
	695.267,
	699.825,
	704.733,
	709.991,
	714.899,
	720.158,
	724.715,
	729.974,
	734.882,
	740.491,
	745.048,
	750.307,
	754.514,
	760.473,
	765.381,
	770.289,
	774.847,
	780.105,
	785.364,
	790.272,
	795.180,
	800.438,
	804.996,
	809.553,
	815.162,
	820.421,
	824.628,
	829.886,
	835.145,
	840.053,
	845.311,
	849.167,
	855.127,
	860.386,
	865.294,
	870.202,
	874.759,
	880.368,
	884.925,
	889.833,
	895.443,
	900,
],[
	0,
	0,
	1.02059e-05,
	1.22959e-05,
	1.44729e-05,
	1.71349e-05,
	1.98195e-05,
	2.42990e-05,
	2.76194e-05,
	3.19466e-05,
	3.63120e-05,
	3.89396e-05,
	4.12740e-05,
	4.47790e-05,
	5.14941e-05,
	5.65213e-05,
	5.95619e-05,
	6.24016e-05,
	6.57585e-05,
	6.88937e-05,
	7.13428e-05,
	7.34501e-05,
	7.51807e-05,
	7.69520e-05,
	7.83079e-05,
	7.92250e-05,
	7.92250e-05,
	8.06209e-05,
	8.34869e-05,
	8.69596e-05,
	9.00509e-05,
	9.27108e-05,
	9.32521e-05,
	9.27108e-05,
	9.11056e-05,
	9.00509e-05,
	9.48951e-05,
	0.000101762,
	0.000112349,
	0.000124037,
	0.000133013,
	0.000136147,
	0.000136942,
	0.000135357,
	0.000127701,
	0.000117705,
	0.000109126,
	0.000101171,
	9.37966e-05,
	9.05767e-05,
	8.69596e-05,
	8.69596e-05,
	8.90084e-05,
	9.11056e-05,
	9.43443e-05,
	9.60066e-05,
	9.54492e-05,
	9.43443e-05,
	9.27108e-05,
	9.21726e-05,
	9.60066e-05,
	0.000103555,
	0.000117022,
	0.000143471,
	0.000186442,
	0.000255317,
	0.000347606,
	0.000498713,
	0.000682947,
	0.000940700,
	0.00116682,
	0.00151630,
	0.00179518,
	0.00215026,
	0.00242990,
	0.00269836,
	0.00299648,
	0.00326993,
	0.00348619,
	0.00365241,
	0.00384889,
	0.00405594,
	0.00420012,
	0.00440037,
	0.00461017,
	0.00477406,
	0.00488654,
	0.00500167,
	0.00520972,
	0.00542642,
	0.00568514,
	0.00581908,
	0.00592161,
	0.00609652,
	0.00635011,
	0.00673079,
	0.00713428,
	0.00730237,
	0.00725998,
	0.00730237,
	0.00806209,
	0.00830022,
]])

# 1-nm interpolation from 300 to 700 nm
x_1nm = np.empty(401)
for i in range(401): x_1nm[i] = i + 300
yellow15_1nm = np.interp(x_1nm, yellow15_5nm[0], yellow15_5nm[1])
red25_1nm = np.interp(x_1nm, red25_5nm[0], red25_5nm[1])
blue47_1nm = np.interp(x_1nm, blue47_5nm[0], blue47_5nm[1])
green58_1nm = np.interp(x_1nm, green58_5nm[0], green58_5nm[1])
nd01_1nm = np.interp(x_1nm, nd01_5nm[0], nd01_5nm[1])
nd02_1nm = np.interp(x_1nm, nd02_5nm[0], nd02_5nm[1])
nd03_1nm = np.interp(x_1nm, nd03_5nm[0], nd03_5nm[1])
nd04_1nm = np.interp(x_1nm, nd04_5nm[0], nd04_5nm[1])
nd05_1nm = np.interp(x_1nm, nd05_5nm[0], nd05_5nm[1])
nd06_1nm = np.interp(x_1nm, nd06_5nm[0], nd06_5nm[1])
nd07_1nm = np.interp(x_1nm, nd07_5nm[0], nd07_5nm[1])
nd08_1nm = np.interp(x_1nm, nd08_5nm[0], nd08_5nm[1])
nd09_1nm = np.interp(x_1nm, nd09_5nm[0], nd09_5nm[1])
nd10_1nm = np.interp(x_1nm, nd10_5nm[0], nd10_5nm[1])
nd20_1nm = np.interp(x_1nm, nd20_5nm[0], nd20_5nm[1])
nd30_1nm = np.interp(x_1nm, nd30_5nm[0], nd30_5nm[1])
nd40_1nm = np.interp(x_1nm, nd40_5nm[0], nd40_5nm[1])

# Alternate data for 400-700 nm from Kodak Photographic Filters Handbook (1990). There are
# also graphs going down to 300 that we could scan, but there's no information for neutral
# density filters other than 1.0. The biggest difference below 400 nm evident in these
# and earlier published graphs is that the Wratten 2 glass version of red 25 transmits a
# small amount of light in this range whereas all other sources show no transmission at all.
# The other four are consistently shown as either transmitting UV (yellow, blue, ND 1.0) or
# not (green).
if (args.wv2):
	# yellow 15 -- page 104
	yellow15_10nm = np.array([
		0, # 400
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0, # 500
		1.0,
		19.4,
		56.2,
		77.6,
		85.6,
		88.2,
		89.3,
		89.8,
		90.1,
		90.4, # 600
		90.5,
		90.6,
		90.7,
		90.9,
		91.0,
		91.1,
		91.1,
		91.1,
		91.1,
		91.1 # 700
	])

	# red 25 -- page 111
	red25_10nm = np.array([
		0, # 400
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0, # 500
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		12.6,
		50.0, # 600
		75.0,
		82.6,
		85.5,
		86.7,
		87.6,
		88.2,
		88.5,
		89.0,
		89.3,
		89.5 # 700
	])

	# blue 47 -- page 121
	blue47_10nm = np.array([
		9.7, # 400
		21.8,
		37.8,
		47.8,
		50.3,
		48.2,
		42.8,
		35.7,
		27.1,
		18.2,
		10.2, # 500
		4.3,
		1.2,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0, # 600
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0 # 700
	])

	# green 58 -- page 124
	green58_10nm = np.array([
		0, # 400
		0,
		0,
		0,
		0,
		0,
		0,
		0.23,
		1.38,
		4.90,
		17.7, # 500
		38.8,
		52.2,
		53.6,
		47.6,
		38.4,
		27.8,
		17.4,
		9.0,
		3.50,
		1.50, # 600
		0.41,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0.53 # 700
	])

	# neutral density 96 -- page 132
	nd10_10nm = np.array([
		4.28, # 400
		4.91,
		5.50,
		6.17,
		6.92,
		7.50,
		7.81,
		8.15,
		8.47,
		8.60,
		8.73, # 500
		8.85,
		8.90,
		9.01,
		9.07,
		9.20,
		9.30,
		9.20,
		9.19,
		9.54,
		9.64, # 600
		9.73,
		9.56,
		9.27,
		9.10,
		9.07,
		9.00,
		9.13,
		9.08,
		9.21,
		9.52 # 700
	])
	
	# interpolate
	x_400700_10nm = np.empty(31)
	for i in range(31): x_400700_10nm[i] = i*10 + 400
	x_400700_1nm = np.empty(301)
	for i in range(301): x_400700_1nm[i] = i + 400
	yellow15_400700 = np.interp(x_400700_1nm, x_400700_10nm, yellow15_10nm)
	red25_400700 = np.interp(x_400700_1nm, x_400700_10nm, red25_10nm)
	blue47_400700 = np.interp(x_400700_1nm, x_400700_10nm, blue47_10nm)
	green58_400700 = np.interp(x_400700_1nm, x_400700_10nm, green58_10nm)
	nd10_400700 = np.interp(x_400700_1nm, x_400700_10nm, nd10_10nm)
	
	# replace
	for i in range(100, 401):
		yellow15_1nm[i] = yellow15_400700[i-100]/100
		red25_1nm[i] = red25_400700[i-100]/100
		blue47_1nm[i] = blue47_400700[i-100]/100
		green58_1nm[i] = green58_400700[i-100]/100
		nd10_1nm[i] = nd10_400700[i-100]/100

"""
Find brightness matches for human vision. Since we begin with colors that are much
brighter than blue 47, I intended to choose the "brightest" ND filter or pair of filters that produces
an achromatic contrast less than 1, but in practice there is be only one match for each
color. This depends on the specified vision system and illuminant like everything else, so
we have to set --media human2 --white i (L, M and S don't matter). The current matches are:
* red: 1.0 + 0.5
* yellow: 2.0
* green: 1.0 + 0.3
* gray: 2.0 + 0.1
When using the 1990 data, the matches are one or two steps brighter:
* red: 1.0 + 0.3
* yellow: 1.0 + 0.9
* green: 1.0 + 0.2
* gray: 2.0
"""
if (args.wcheck):	
	# "dummy" array for gray as we assume no color filter
	placeholder = np.empty(401)
	for i in range(401):
		placeholder[i] = 1
	
	# brightness tests -- wrap this up in a function so we don't have to copy it a million
	# times
	def brightness_tests(f):
		f_01 = np.empty(401)
		for i in range(401):
			f_01[i] = f[i] * nd01_1nm[i]
		f_02 = np.empty(401)
		for i in range(401):
			f_02[i] = f[i] * nd02_1nm[i]
		f_03 = np.empty(401)
		for i in range(401):
			f_03[i] = f[i] * nd03_1nm[i]
		f_04 = np.empty(401)
		for i in range(401):
			f_04[i] = f[i] * nd04_1nm[i]
		f_05 = np.empty(401)
		for i in range(401):
			f_05[i] = f[i] * nd05_1nm[i]
		f_06 = np.empty(401)
		for i in range(401):
			f_06[i] = f[i] * nd06_1nm[i]
		f_07 = np.empty(401)
		for i in range(401):
			f_07[i] = f[i] * nd07_1nm[i]
		f_08 = np.empty(401)
		for i in range(401):
			f_08[i] = f[i] * nd08_1nm[i]
		f_09 = np.empty(401)
		for i in range(401):
			f_09[i] = f[i] * nd09_1nm[i]
		# 1.0 + others
		f_10 = np.empty(401)
		for i in range(401):
			f_10[i] = f[i] * nd10_1nm[i]
		f_1001 = np.empty(401)
		for i in range(401):
			f_1001[i] = f[i] * nd10_1nm[i] * nd01_1nm[i]
		f_1002 = np.empty(401)
		for i in range(401):
			f_1002[i] = f[i] * nd10_1nm[i] * nd02_1nm[i]
		f_1003 = np.empty(401)
		for i in range(401):
			f_1003[i] = f[i] * nd10_1nm[i] * nd03_1nm[i]
		f_1004 = np.empty(401)
		for i in range(401):
			f_1004[i] = f[i] * nd10_1nm[i] * nd04_1nm[i]
		f_1005 = np.empty(401)
		for i in range(401):
			f_1005[i] = f[i] * nd10_1nm[i] * nd05_1nm[i]
		f_1006 = np.empty(401)
		for i in range(401):
			f_1006[i] = f[i] * nd10_1nm[i] * nd06_1nm[i]
		f_1007 = np.empty(401)
		for i in range(401):
			f_1007[i] = f[i] * nd10_1nm[i] * nd07_1nm[i]
		f_1008 = np.empty(401)
		for i in range(401):
			f_1008[i] = f[i] * nd10_1nm[i] * nd08_1nm[i]
		f_1009 = np.empty(401)
		for i in range(401):
			f_1009[i] = f[i] * nd10_1nm[i] * nd09_1nm[i]
		# 2.0
		f_20 = np.empty(401)
		for i in range(401):
			f_20[i] = f[i] * nd20_1nm[i]
		f_2001 = np.empty(401)
		for i in range(401):
			f_2001[i] = f[i] * nd20_1nm[i] * nd01_1nm[i]
		f_2002 = np.empty(401)
		for i in range(401):
			f_2002[i] = f[i] * nd20_1nm[i] * nd02_1nm[i]
		f_2003 = np.empty(401)
		for i in range(401):
			f_2003[i] = f[i] * nd20_1nm[i] * nd03_1nm[i]
		f_2004 = np.empty(401)
		for i in range(401):
			f_2004[i] = f[i] * nd20_1nm[i] * nd04_1nm[i]
		f_2005 = np.empty(401)
		for i in range(401):
			f_2005[i] = f[i] * nd20_1nm[i] * nd05_1nm[i]
		f_2006 = np.empty(401)
		for i in range(401):
			f_2006[i] = f[i] * nd20_1nm[i] * nd06_1nm[i]
		f_2007 = np.empty(401)
		for i in range(401):
			f_2007[i] = f[i] * nd20_1nm[i] * nd07_1nm[i]
		f_2008 = np.empty(401)
		for i in range(401):
			f_2008[i] = f[i] * nd20_1nm[i] * nd08_1nm[i]
		f_2009 = np.empty(401)
		for i in range(401):
			f_2009[i] = f[i] * nd20_1nm[i] * nd09_1nm[i]
		# 3.0
		f_30 = np.empty(401)
		for i in range(401):
			f_30[i] = f[i] * nd30_1nm[i]
		f_3001 = np.empty(401)
		for i in range(401):
			f_3001[i] = f[i] * nd30_1nm[i] * nd01_1nm[i]
		f_3002 = np.empty(401)
		for i in range(401):
			f_3002[i] = f[i] * nd30_1nm[i] * nd02_1nm[i]
		f_3003 = np.empty(401)
		for i in range(401):
			f_3003[i] = f[i] * nd30_1nm[i] * nd03_1nm[i]
		f_3004 = np.empty(401)
		for i in range(401):
			f_3004[i] = f[i] * nd30_1nm[i] * nd04_1nm[i]
		f_3005 = np.empty(401)
		for i in range(401):
			f_3005[i] = f[i] * nd30_1nm[i] * nd05_1nm[i]
		f_3006 = np.empty(401)
		for i in range(401):
			f_3006[i] = f[i] * nd30_1nm[i] * nd06_1nm[i]
		f_3007 = np.empty(401)
		for i in range(401):
			f_3007[i] = f[i] * nd30_1nm[i] * nd07_1nm[i]
		f_3008 = np.empty(401)
		for i in range(401):
			f_3008[i] = f[i] * nd30_1nm[i] * nd08_1nm[i]
		f_3009 = np.empty(401)
		for i in range(401):
			f_3009[i] = f[i] * nd30_1nm[i] * nd09_1nm[i]
		# 4.0
		f_40 = np.empty(401)
		for i in range(401):
			f_40[i] = f[i] * nd40_1nm[i]
		f_4001 = np.empty(401)
		for i in range(401):
			f_4001[i] = f[i] * nd40_1nm[i] * nd01_1nm[i]
		f_4002 = np.empty(401)
		for i in range(401):
			f_4002[i] = f[i] * nd40_1nm[i] * nd02_1nm[i]
		f_4003 = np.empty(401)
		for i in range(401):
			f_4003[i] = f[i] * nd40_1nm[i] * nd03_1nm[i]
		f_4004 = np.empty(401)
		for i in range(401):
			f_4004[i] = f[i] * nd40_1nm[i] * nd04_1nm[i]
		f_4005 = np.empty(401)
		for i in range(401):
			f_4005[i] = f[i] * nd40_1nm[i] * nd05_1nm[i]
		f_4006 = np.empty(401)
		for i in range(401):
			f_4006[i] = f[i] * nd40_1nm[i] * nd06_1nm[i]
		f_4007 = np.empty(401)
		for i in range(401):
			f_4007[i] = f[i] * nd40_1nm[i] * nd07_1nm[i]
		f_4008 = np.empty(401)
		for i in range(401):
			f_4008[i] = f[i] * nd40_1nm[i] * nd08_1nm[i]
		f_4009 = np.empty(401)
		for i in range(401):
			f_4009[i] = f[i] * nd40_1nm[i] * nd09_1nm[i]
		
		print("Brightness contrast with blue:")
		print("0.1: " + str(c.brightness_contrast(f_01, blue47_1nm)))
		print("0.2: " + str(c.brightness_contrast(f_02, blue47_1nm)))
		print("0.3: " + str(c.brightness_contrast(f_03, blue47_1nm)))
		print("0.4: " + str(c.brightness_contrast(f_04, blue47_1nm)))
		print("0.5: " + str(c.brightness_contrast(f_05, blue47_1nm)))
		print("0.6: " + str(c.brightness_contrast(f_06, blue47_1nm)))
		print("0.7: " + str(c.brightness_contrast(f_07, blue47_1nm)))
		print("0.8: " + str(c.brightness_contrast(f_08, blue47_1nm)))
		print("0.9: " + str(c.brightness_contrast(f_09, blue47_1nm)))
		print("1.0: " + str(c.brightness_contrast(f_10, blue47_1nm)))
		print("1.0 + 0.1: " + str(c.brightness_contrast(f_1001, blue47_1nm)))
		print("1.0 + 0.2: " + str(c.brightness_contrast(f_1002, blue47_1nm)))
		print("1.0 + 0.3: " + str(c.brightness_contrast(f_1003, blue47_1nm)))
		print("1.0 + 0.4: " + str(c.brightness_contrast(f_1004, blue47_1nm)))
		print("1.0 + 0.5: " + str(c.brightness_contrast(f_1005, blue47_1nm)))
		print("1.0 + 0.6: " + str(c.brightness_contrast(f_1006, blue47_1nm)))
		print("1.0 + 0.7: " + str(c.brightness_contrast(f_1007, blue47_1nm)))
		print("1.0 + 0.8: " + str(c.brightness_contrast(f_1008, blue47_1nm)))
		print("1.0 + 0.9: " + str(c.brightness_contrast(f_1009, blue47_1nm)))
		print("2.0: " + str(c.brightness_contrast(f_20, blue47_1nm)))
		print("2.0 + 0.1: " + str(c.brightness_contrast(f_2001, blue47_1nm)))
		print("2.0 + 0.2: " + str(c.brightness_contrast(f_2002, blue47_1nm)))
		print("2.0 + 0.3: " + str(c.brightness_contrast(f_2003, blue47_1nm)))
		print("2.0 + 0.4: " + str(c.brightness_contrast(f_2004, blue47_1nm)))
		print("2.0 + 0.5: " + str(c.brightness_contrast(f_2005, blue47_1nm)))
		print("2.0 + 0.6: " + str(c.brightness_contrast(f_2006, blue47_1nm)))
		print("2.0 + 0.7: " + str(c.brightness_contrast(f_2007, blue47_1nm)))
		print("2.0 + 0.8: " + str(c.brightness_contrast(f_2008, blue47_1nm)))
		print("2.0 + 0.9: " + str(c.brightness_contrast(f_2009, blue47_1nm)))
		print("3.0: " + str(c.brightness_contrast(f_30, blue47_1nm)))
		print("3.0 + 0.1: " + str(c.brightness_contrast(f_3001, blue47_1nm)))
		print("3.0 + 0.2: " + str(c.brightness_contrast(f_3002, blue47_1nm)))
		print("3.0 + 0.3: " + str(c.brightness_contrast(f_3003, blue47_1nm)))
		print("3.0 + 0.4: " + str(c.brightness_contrast(f_3004, blue47_1nm)))
		print("3.0 + 0.5: " + str(c.brightness_contrast(f_3005, blue47_1nm)))
		print("3.0 + 0.6: " + str(c.brightness_contrast(f_3006, blue47_1nm)))
		print("3.0 + 0.7: " + str(c.brightness_contrast(f_3007, blue47_1nm)))
		print("3.0 + 0.8: " + str(c.brightness_contrast(f_3008, blue47_1nm)))
		print("3.0 + 0.9: " + str(c.brightness_contrast(f_3009, blue47_1nm)))
		print("4.0: " + str(c.brightness_contrast(f_40, blue47_1nm)))
		print("4.0 + 0.1: " + str(c.brightness_contrast(f_4001, blue47_1nm)))
		print("4.0 + 0.2: " + str(c.brightness_contrast(f_4002, blue47_1nm)))
		print("4.0 + 0.3: " + str(c.brightness_contrast(f_4003, blue47_1nm)))
		print("4.0 + 0.4: " + str(c.brightness_contrast(f_4004, blue47_1nm)))
		print("4.0 + 0.5: " + str(c.brightness_contrast(f_4005, blue47_1nm)))
		print("4.0 + 0.6: " + str(c.brightness_contrast(f_4006, blue47_1nm)))
		print("4.0 + 0.7: " + str(c.brightness_contrast(f_4007, blue47_1nm)))
		print("4.0 + 0.8: " + str(c.brightness_contrast(f_4008, blue47_1nm)))
		print("4.0 + 0.9: " + str(c.brightness_contrast(f_4009, blue47_1nm)))
	
	# red
	print("Red 25")
	brightness_tests(red25_1nm)
	
	# yellow
	print("")
	print("Yellow 15")
	brightness_tests(yellow15_1nm)
	
	# green
	print("")
	print("Green 58")
	brightness_tests(green58_1nm)
	
	# gray
	print("")
	print("Gray")
	brightness_tests(placeholder)

# These are used by both --blackbody and --kodak, so we keep them out here.
# red 25
red25_0 = np.empty(401)
for i in range(401):
	if (args.wv2): red25_0[i] = red25_1nm[i] * nd10_1nm[i] * nd03_1nm[i]
	else: red25_0[i] = red25_1nm[i] * nd10_1nm[i] * nd05_1nm[i]
red25_03 = np.empty(401)
for i in range(401):
	red25_03[i] = red25_0[i] * nd03_1nm[i]
red25_07 = np.empty(401)
for i in range(401):
	red25_07[i] = red25_0[i] * nd07_1nm[i]
red25_10 = np.empty(401)
for i in range(401):
	red25_10[i] = red25_0[i] * nd10_1nm[i]

# yellow 15
yellow15_0 = np.empty(401)
for i in range(401):
	if (args.wv2): yellow15_0[i] = yellow15_1nm[i] * nd10_1nm[i] * nd09_1nm[i]
	else: yellow15_0[i] = yellow15_1nm[i] * nd20_1nm[i]
yellow15_03 = np.empty(401)
for i in range(401):
	yellow15_03[i] = yellow15_0[i] * nd03_1nm[i]
yellow15_07 = np.empty(401)
for i in range(401):
	yellow15_07[i] = yellow15_0[i] * nd07_1nm[i]
yellow15_10 = np.empty(401)
for i in range(401):
	yellow15_10[i] = yellow15_0[i] * nd10_1nm[i]

# green 58
green58_0 = np.empty(401)
for i in range(401):
	if (args.wv2): green58_0[i] = green58_1nm[i] * nd10_1nm[i] * nd02_1nm[i]
	else: green58_0[i] = green58_1nm[i] * nd10_1nm[i] * nd03_1nm[i]
green58_03 = np.empty(401)
for i in range(401):
	green58_03[i] = green58_0[i] * nd03_1nm[i]
green58_07 = np.empty(401)
for i in range(401):
	green58_07[i] = green58_0[i] * nd07_1nm[i]
green58_10 = np.empty(401)
for i in range(401):
	green58_10[i] = green58_0[i] * nd10_1nm[i]

# blue 47
blue47_0 = blue47_1nm # keep this name for convenience
blue47_03 = np.empty(401)
for i in range(401):
	blue47_03[i] = blue47_0[i] * nd03_1nm[i]
blue47_07 = np.empty(401)
for i in range(401):
	blue47_07[i] = blue47_0[i] * nd07_1nm[i]
blue47_10 = np.empty(401)
for i in range(401):
	blue47_10[i] = blue47_0[i] * nd10_1nm[i]

# gray
gray_0 = np.empty(401)
for i in range(401):
	if (args.wv2): gray_0[i] = nd20_1nm[i]
	else: gray_0[i] = nd20_1nm[i] * nd01_1nm[i]
gray_03 = np.empty(401)
for i in range(401):
	gray_03[i] = gray_0[i] * nd03_1nm[i]
gray_07 = np.empty(401)
for i in range(401):
	gray_07[i] = gray_0[i] * nd07_1nm[i]
gray_10 = np.empty(401)
for i in range(401):
	gray_10[i] = gray_0[i] * nd10_1nm[i]

# plot
xvalues = np.empty(401)
for i in range(401):
        xvalues[i] = i + 300
plt.subplot(3, 2, 1)
plt.plot(xvalues, red25_0*100, 'r')
plt.plot(xvalues, red25_03*100, 'r')
plt.plot(xvalues, red25_07*100, 'r')
plt.plot(xvalues, red25_10*100, 'r')
plt.title("Red 25")
plt.subplot(3, 2, 2)
plt.plot(xvalues, yellow15_0*100, 'y')
plt.plot(xvalues, yellow15_03*100, 'y')
plt.plot(xvalues, yellow15_07*100, 'y')
plt.plot(xvalues, yellow15_10*100, 'y')
plt.title("Yellow 15")
plt.subplot(3, 2, 3)
plt.plot(xvalues, green58_0*100, 'g')
plt.plot(xvalues, green58_03*100, 'g')
plt.plot(xvalues, green58_07*100, 'g')
plt.plot(xvalues, green58_10*100, 'g')
plt.title("Green 58")
plt.subplot(3, 2, 4)
plt.plot(xvalues, blue47_0*100, 'b')
plt.plot(xvalues, blue47_03*100, 'b')
plt.plot(xvalues, blue47_07*100, 'b')
plt.plot(xvalues, blue47_10*100, 'b')
plt.title("Blue 47")
plt.subplot(3, 2, 5)
plt.plot(xvalues, gray_0*100, color='gray')
plt.plot(xvalues, gray_03*100, color='gray')
plt.plot(xvalues, gray_07*100, color='gray')
plt.plot(xvalues, gray_10*100, color='gray')
plt.title("Gray")
plt.show()

# brightness levels and color space coordinates
red25l = np.empty(4)
red25cs = np.empty(4)
red25cs1 = np.empty(4)
print("Red 25 (+ 1.0 + 0.1)")
red25data = c.spectral_rendering(red25_0)
red25l[0] = red25data[0]
red25cs[0] = red25data[1]
red25cs1[0] = red25data[2]
print("+ 0.3")
red25data = c.spectral_rendering(red25_03)
red25l[1] = red25data[0]
red25cs[1] = red25data[1]
red25cs1[1] = red25data[2]
print("+ 0.7")
red25data = c.spectral_rendering(red25_07)
red25l[2] = red25data[0]
red25cs[2] = red25data[1]
red25cs1[2] = red25data[2]
print("+ 1.0")
red25data = c.spectral_rendering(red25_10)
red25l[3] = red25data[0]
red25cs[3] = red25data[1]
red25cs1[3] = red25data[2]

yellow15l = np.empty(4)
yellow15cs = np.empty(4)
yellow15cs1 = np.empty(4)
print("Yellow 15 (+ 2.0 + 0.5)")
yellow15data = c.spectral_rendering(yellow15_0)
yellow15l[0] = yellow15data[0]
yellow15cs[0] = yellow15data[1]
yellow15cs1[0] = yellow15data[2]
print("+ 0.3")
yellow15data = c.spectral_rendering(yellow15_03)
yellow15l[1] = yellow15data[0]
yellow15cs[1] = yellow15data[1]
yellow15cs1[1] = yellow15data[2]
print("+ 0.7")
yellow15data = c.spectral_rendering(yellow15_07)
yellow15l[2] = yellow15data[0]
yellow15cs[2] = yellow15data[1]
yellow15cs1[2] = yellow15data[2]
print("+ 1.0")
yellow15data = c.spectral_rendering(yellow15_10)
yellow15l[3] = yellow15data[0]
yellow15cs[3] = yellow15data[1]
yellow15cs1[3] = yellow15data[2]

green58l = np.empty(4)
green58cs = np.empty(4)
green58cs1 = np.empty(4)
print("Green 58 (+ 1.0 + 0.3)")
green58data = c.spectral_rendering(green58_0)
green58l[0] = green58data[0]
green58cs[0] = green58data[1]
green58cs1[0] = green58data[2]
print("+ 0.3")
green58data = c.spectral_rendering(green58_03)
green58l[1] = green58data[0]
green58cs[1] = green58data[1]
green58cs1[1] = green58data[2]
print("+ 0.7")
green58data = c.spectral_rendering(green58_07)
green58l[2] = green58data[0]
green58cs[2] = green58data[1]
green58cs1[2] = green58data[2]
print("+ 1.0")
green58data = c.spectral_rendering(green58_10)
green58l[3] = green58data[0]
green58cs[3] = green58data[1]
green58cs1[3] = green58data[2]

blue47l = np.empty(4)
blue47cs = np.empty(4)
blue47cs1 = np.empty(4)
print("Blue 47")
blue47data = c.spectral_rendering(blue47_0)
blue47l[0] = blue47data[0]
blue47cs[0] = blue47data[1]
blue47cs1[0] = blue47data[2]
print("+ 0.3")
blue47data = c.spectral_rendering(blue47_03)
blue47l[1] = blue47data[0]
blue47cs[1] = blue47data[1]
blue47cs1[1] = blue47data[2]
print("+ 0.7")
blue47data = c.spectral_rendering(blue47_07)
blue47l[2] = blue47data[0]
blue47cs[2] = blue47data[1]
blue47cs1[2] = blue47data[2]
print("+ 1.0")
blue47data = c.spectral_rendering(blue47_10)
blue47l[3] = blue47data[0]
blue47cs[3] = blue47data[1]
blue47cs1[3] = blue47data[2]

grayl = np.empty(4)
graycs = np.empty(4)
graycs1 = np.empty(4)
print("Gray")
graydata = c.spectral_rendering(gray_0)
grayl[0] = graydata[0]
graycs[0] = graydata[1]
graycs1[0] = graydata[2]
print("+ 0.3")
graydata = c.spectral_rendering(gray_03)
grayl[1] = graydata[0]
graycs[1] = graydata[1]
graycs1[1] = graydata[2]
print("+ 0.7")
graydata = c.spectral_rendering(gray_07)
grayl[2] = graydata[0]
graycs[2] = graydata[1]
graycs1[2] = graydata[2]
print("+ 1.0")
graydata = c.spectral_rendering(gray_10)
grayl[3] = graydata[0]
graycs[3] = graydata[1]
graycs1[3] = graydata[2]

if (args.wratten):
	# red-yellow
	print("R-Y")
	c.brightness_disc(red25_0, red25_03, red25_07, red25_10, red25l, yellow15_0, yellow15_03, yellow15_07, yellow15_10, yellow15l)
	
	# red-green
	print("R-G")
	c.brightness_disc(red25_0, red25_03, red25_07, red25_10, red25l, green58_0, green58_03, green58_07, green58_10, green58l)
	
	# red-blue
	print("R-B")
	c.brightness_disc(red25_0, red25_03, red25_07, red25_10, red25l, blue47_0, blue47_03, blue47_07, blue47_10, blue47l)
	
	# yellow-green
	print("Y-G")
	c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, yellow15l, green58_0, green58_03, green58_07, green58_10, green58l)
	
	# yellow-blue
	print("Y-B")
	c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, yellow15l, blue47_0, blue47_03, blue47_07, blue47_10, blue47l)
	
	# green-blue
	print("G-B")
	c.brightness_disc(green58_0, green58_03, green58_07, green58_10, green58l, blue47_0, blue47_03, blue47_07, blue47_10, blue47l)
	
	# colors vs. gray
	
	# red
	print("Red vs. gray")
	c.brightness_disc(red25_0, red25_03, red25_07, red25_10, red25l, gray_0, gray_03, gray_07, gray_10, grayl, correct=68, trials=80)
	
	# yellow
	print("Yellow vs. gray")
	c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, yellow15l, gray_0, gray_03, gray_07, gray_10, grayl, correct=68, trials=80)
	
	# green
	print("Green vs. gray")
	c.brightness_disc(green58_0, green58_03, green58_07, green58_10, green58l, gray_0, gray_03, gray_07, gray_10, grayl, correct=68, trials=80)
	
	# blue
	print("Blue vs. gray")
	c.brightness_disc(blue47_0, blue47_03, blue47_07, blue47_10, blue47l, gray_0, gray_03, gray_07, gray_10, grayl, correct=68, trials=80)
	
	# plot
	x = np.array([0.0, 0.3, 0.7, 1.0])
	plt.plot(x, red25l, 'sr', mec='k', label="red 25")
	plt.plot(x, yellow15l, 'Dy', mec='k', label="yellow 15")
	plt.plot(x, green58l, '^g', mec='k', label="green 58")
	plt.plot(x, blue47l, 'ob', mec='k', label="blue 47")
	plt.plot(x, grayl, marker='v', linestyle='', color='gray', mec='k', label="gray")
	plt.xlabel("Filter optical density")
	plt.ylabel("Relative quantum catch")
	plt.yscale('log')
	plt.legend()
	plt.show()
	
	# color differences -- this is the hard part...
	
	# first we plot them in a two-dimensional color space with (L-S)/(L+S) on
	# the x-axis and brightness on the y-axis. Not sure how much this tells us
	# though.
	if (l1 == m1):
		plt.plot(red25cs, red25l, 'sr', mec='k', label="red 25")
		plt.plot(yellow15cs, yellow15l, 'Dy', mec='k', label="yellow 15")
		plt.plot(green58cs, green58l, '^g', mec='k', label="green 58")
		plt.plot(blue47cs, blue47l, 'ob', mec='k', label="blue 47")
		plt.plot(graycs, grayl, marker='v', linestyle='', color='gray', mec='k', label="gray")
		plt.xlabel("Chromaticity ((L-S)/(L+S))")
		plt.ylabel("Brightness (L)")
		plt.legend()
		plt.show()
	else:
		plt.plot(red25cs, red25cs1, 'sr', mec='k', label="red 25")
		plt.plot(yellow15cs, yellow15cs1, 'Dy', mec='k', label="yellow 15")
		plt.plot(green58cs, green58cs1, '^g', mec='k', label="green 58")
		plt.plot(blue47cs, blue47cs1, 'ob', mec='k', label="blue 47")
		plt.plot(graycs, graycs1, marker='v', linestyle='', color='gray', mec='k', label="gray")
		plt.xlabel("(L-S)/(L+M+S)")
		plt.ylabel("(M-0.5(L+S))/(L+M+S)")
		xborder = np.array([-math.sqrt(1/2), 0, math.sqrt(1/2), -math.sqrt(1/2)])
		yborder = np.array([-math.sqrt(2/3)/2, math.sqrt(2/3), -math.sqrt(2/3)/2, -math.sqrt(2/3)/2])
		plt.plot(xborder, yborder, '-k')
		plt.text(-math.sqrt(1/2) - 0.05, -math.sqrt(2/3)/2 - 0.025, 'S')
		plt.text(0 - 0.025, math.sqrt(2/3) + 0.0125, 'M')
		plt.text(math.sqrt(1/2) + 0.0125, -math.sqrt(2/3)/2 - 0.025, 'L')
		plt.legend()
		plt.show()
	
	# Next we try to assess whether they're distinguishable. As with brightness, we
	# check both the contrast and the direction.

	# R-Y
	print("R-Y")
	ry = c.color_disc(red25_0, red25_03, red25_07, red25_10, yellow15_0, yellow15_03, yellow15_07, yellow15_10)
	
	# R-G
	print("R-G")
	rg = c.color_disc(red25_0, red25_03, red25_07, red25_10, green58_0, green58_03, green58_07, green58_10)
	
	# R-B
	print("R-B")
	rb = c.color_disc(red25_0, red25_03, red25_07, red25_10, blue47_0, blue47_03, blue47_07, blue47_10)
	
	# Y-G
	print("Y-G")
	yg = c.color_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, green58_0, green58_03, green58_07, green58_10)
	
	# Y-B
	print("Y-B")
	yb = c.color_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, blue47_0, blue47_03, blue47_07, blue47_10)
	
	# G-B
	print("G-B")
	gb = c.color_disc(green58_0, green58_03, green58_07, green58_10, blue47_0, blue47_03, blue47_07, blue47_10)

        # collect box plot data	
	labels = ["R-Y", "R-G", "R-B", "Y-G", "Y-B", "G-B"]
	boxes = [ry[3], rg[3], rb[3], yg[3], yb[3], gb[3]]
	
	# medians
	print("R-Y median contrast: " + str(ry[0]))
	print("R-G median contrast: " + str(rg[0]))
	print("R-B median contrast: " + str(rb[0]))
	print("Y-G median contrast: " + str(yg[0]))
	print("Y-B median contrast: " + str(yb[0]))
	print("G-B median contrast: " + str(gb[0]))
	print("Lowest median contrast: " + str(min(ry[0], rg[0], rb[0], yg[0], yb[0], gb[0])))
	print("Highest median contrast: " + str(max(ry[0], rg[0], rb[0], yg[0], yb[0], gb[0])))
	print("")
	
	# plot contrast values
	plt.boxplot(x=boxes, tick_labels=labels)
	plt.ylabel("ΔS (JND)")
	plt.show()
	
	# and again for colors vs gray. Is gray distinguishable from yellow and green? If
	# not, we have a major problem.
	
	# red
	print("Red vs. gray")
	r_gray = c.color_disc(red25_0, red25_03, red25_07, red25_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80)
	
	# yellow
	print("Yellow vs. gray")
	y_gray = c.color_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80)
	
	# green
	print("Green vs. gray")
	g_gray = c.color_disc(green58_0, green58_03, green58_07, green58_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80)
	
	# blue
	print("Blue vs. gray")
	b_gray = c.color_disc(blue47_0, blue47_03, blue47_07, blue47_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80)
	
	
	labels = ["red", "yellow", "green", "blue"]
	boxes = [r_gray[3], y_gray[3], g_gray[3], b_gray[3]]
	
	plt.boxplot(x=boxes, tick_labels=labels)
	plt.ylabel("ΔS (JND)")
	plt.show()
	# Yes, it is! This came as a bit of a surprise considering the rods and cones apparently
	# have very similar responses to these.

if (args.blackbody != 0):
	energy = sigma * args.blackbody**4
	surface_area = 4*math.pi*args.radius**2
	print("Surface area of sphere: " + str(sphere_area))
	print("Energy produced by light bulb (W/cm^2): " + str(watts_cm2))
	print("Energy produced by light bulb (W/m^2): " + str(watts_m2))
	#print("Surface area of light bulb (cm^2): " + str(surface_area))
	print("Energy produced by blackbody model (W/m^2, 4pi sr): " + str(energy))
	print("Energy produced by blackbody model (W): " + str(energy * surface_area / 10000))
	print("W/m^2 scaling factor: " + str(scale))
	
	# how much energy is produced between 300-800 nm when paired with blue 47
	# Fix this -- should use the "full" integral with 1-nm steps. As written, the values
	# produced are about 1/10 what they should be. Also try to convert it to cd/m^2 so
	# we can match the value given in the study of 5.5 foot-lamberts ~= 19 cd/m^2 or
	# 59 lx (foot-lamberts are equivalent to both, and as above, the conversion factor
	# between radiance/luminance and irradiance/illuminance is pi sr). Candelas aren't
	# any less annoying than foot-lamberts just because they think they're an SI unit.
	
	# According to the new numbers, the bulbs would have to have a color temperature of
	# about 1700 K to actually produce the brightness reported in the study. I don't
	# think they make those. Alternatively, if the number corresponds to illuminance,
	# this would be scaled by steradians and the true value in cd/m^2 would be ~131,
	# which corresponds to a color temperature of between 2000 and 2100 K. This is still
	# much lower than a typical incandescent bulb. If I change the scaling factor back to
	# W/m^2 instead of W/m^2/sr, however, the illucd/mminance definition places the color
	# temperature at about 2650 K, which is close to the number 2700 I found
	# when searching for GE 656 bulbs (https://www.bulbs.com/product/656).
	
	# Now that I've fixed the density/transmission issues with the filters, the
	# filtered luminance is around 19 cd/m^2 for a color temperature near 2856 K.
	# I'm not sure I buy this because the Macbeth Illuminometer is supposed to measure
	# illuminance in foot-candles rather than luminance in "foot-lamberts". At least
	# the candela only has one definition. Also my quantum catch model now predicts
	# that neither humans nor opossums can reliably distinguish the R-Y pair unless
	# I assume a high degree of spatial summation. Since lux/foot-candles is measured
	# by light falling on some flat surface, I don't know what distinguishes light
	# falling only on that surface from light radiated in all directions from the
	# source. A "perfect" reflecting surface radiates 1/pi of the illuminance it
	# receives, but what does that say about the radiance/luminance of the light
	# source?
	
	# We want to scale the directional intensity. There is technically less irradiance
	# if spread over a larger area, but the radiance doesn't change. See the
	# Stefan-Boltzmann law -- "power per unit area" is power per the area of the
	# object doing the radiating, not power per how many square meters it's spread
	# over. We need an estimate of the light bulb size. I used to have that in here
	# but discarded it for some reason. The distance from the light source shouldn't
	# be involved for the same reason we don't use it in the lux calculation.
	# Actually I think this is wrong because a light bulb that's farther away from the
	# viewing point is basically the same as a bigger bulb. If we use the value of
	# 5 cm and define the number of cones per receptive field to include at least 1
	# of each type, we can nearly perfectly explain both the reported brightness
	# (assuming cd/m^2) and the opossums' behavior, though R-Y is apparently a very
	# difficult discrimination.
	
	radiance = quad(blackbody, 300, 700, args=args.blackbody)
	visible = radiance[0]
	x10nm = np.empty(41)
	for i in range(41):
		x10nm[i] = i*10 + 300
	x1nm = np.empty(501)
	for i in range(501):
		x1nm[i] = i + 300
	
	visible_r0 = 0
	for i in range(300, 701):
		visible_r0 += c.blackbody(i, args.blackbody) * red25_0[i-300]
	visible_r03 = 0
	for i in range(300, 701):
		visible_r03 += c.blackbody(i, args.blackbody) * red25_03[i-300]
	visible_r07 = 0
	for i in range(300, 701):
		visible_r07 += c.blackbody(i, args.blackbody) * red25_07[i-300]
	visible_r10 = 0
	for i in range(300, 701):
		visible_r10 += c.blackbody(i, args.blackbody) * red25_10[i-300]
	visible_y0 = 0
	for i in range(300, 701):
		visible_y0 += c.blackbody(i, args.blackbody) * yellow15_0[i-300]
	visible_y03 = 0
	for i in range(300, 701):
		visible_y03 += c.blackbody(i, args.blackbody) * yellow15_03[i-300]
	visible_y07 = 0
	for i in range(300, 701):
		visible_y07 += c.blackbody(i, args.blackbody) * yellow15_07[i-300]
	visible_y10 = 0
	for i in range(300, 701):
		visible_y10 += c.blackbody(i, args.blackbody) * yellow15_10[i-300]
	visible_g0 = 0
	for i in range(300, 701):
		visible_g0 += c.blackbody(i, args.blackbody) * green58_0[i-300]
	visible_g03 = 0
	for i in range(300, 701):
		visible_g03 += c.blackbody(i, args.blackbody) * green58_03[i-300]
	visible_g07 = 0
	for i in range(300, 701):
		visible_g07 += c.blackbody(i, args.blackbody) * green58_07[i-300]
	visible_g10 = 0
	for i in range(300, 701):
		visible_g10 += c.blackbody(i, args.blackbody) * green58_10[i-300]
	visible_b0 = 0
	for i in range(300, 701):
		visible_b0 += c.blackbody(i, args.blackbody) * blue47_0[i-300]
	visible_b03 = 0
	for i in range(300, 701):
		visible_b03 += c.blackbody(i, args.blackbody) * blue47_03[i-300]
	visible_b07 = 0
	for i in range(300, 701):
		visible_b07 += c.blackbody(i, args.blackbody) * blue47_07[i-300]
	visible_b10 = 0
	for i in range(300, 701):
		visible_b10 += c.blackbody(i, args.blackbody) * blue47_10[i-300]
	visible_gray0 = 0
	for i in range(300, 701):
		visible_gray0 += c.blackbody(i, args.blackbody) * gray_0[i-300]
	visible_gray03 = 0
	for i in range(300, 701):
		visible_gray03 += c.blackbody(i, args.blackbody) * gray_03[i-300]
	visible_gray07 = 0
	for i in range(300, 701):
		visible_gray07 += c.blackbody(i, args.blackbody) * gray_07[i-300]
	visible_gray10 = 0
	for i in range(300, 701):
		visible_gray10 += c.blackbody(i, args.blackbody) * gray_10[i-300]
	
	# lx/cd
	visible_bcd0 = 0
	for i in range(300, 701):
		visible_bcd0 += c.blackbody(i, args.blackbody) * blue47_0[i-300] *  luminosity[i-300] * 683.002
	visible_bcd03 = 0
	for i in range(300, 701):
		visible_bcd03 += c.blackbody(i, args.blackbody) * blue47_03[i-300] *  luminosity[i-300] * 683.002
	visible_bcd07 = 0
	for i in range(300, 701):
		visible_bcd07 += c.blackbody(i, args.blackbody) * blue47_07[i-300] *  luminosity[i-300] * 683.002
	visible_bcd10 = 0
	for i in range(300, 701):
		visible_bcd10 += c.blackbody(i, args.blackbody) * blue47_10[i-300] *  luminosity[i-300] * 683.002
	#visible_filtered_cd *= luminance_full / luminance_10nm
	visible_lx0 = visible_bcd0 * math.pi
	visible_lx03 = visible_bcd03 * math.pi
	visible_lx07 = visible_bcd07 * math.pi
	visible_lx10 = visible_bcd10 * math.pi
	# other colors
	# red
	visible_rcd0 = 0
	for i in range(300, 701):
		visible_rcd0 += c.blackbody(i, args.blackbody) * red25_0[i-300] *  luminosity[i-300] * 683.002
	visible_rcd03 = 0
	for i in range(300, 701):
		visible_rcd03 += c.blackbody(i, args.blackbody) * red25_03[i-300] *  luminosity[i-300] * 683.002
	visible_rcd07 = 0
	for i in range(300, 701):
		visible_rcd07 += c.blackbody(i, args.blackbody) * red25_07[i-300] *  luminosity[i-300] * 683.002
	visible_rcd10 = 0
	for i in range(300, 701):
		visible_rcd10 += c.blackbody(i, args.blackbody) * red25_10[i-300] *  luminosity[i-300] * 683.002
	# yellow
	visible_ycd0 = 0
	for i in range(300, 701):
		visible_ycd0 += c.blackbody(i, args.blackbody) * yellow15_0[i-300] *  luminosity[i-300] * 683.002
	visible_ycd03 = 0
	for i in range(300, 701):
		visible_ycd03 += c.blackbody(i, args.blackbody) * yellow15_03[i-300] *  luminosity[i-300] * 683.002
	visible_ycd07 = 0
	for i in range(300, 701):
		visible_ycd07 += c.blackbody(i, args.blackbody) * yellow15_07[i-300] *  luminosity[i-300] * 683.002
	visible_ycd10 = 0
	for i in range(300, 701):
		visible_ycd10 += c.blackbody(i, args.blackbody) * yellow15_10[i-300] *  luminosity[i-300] * 683.002
	# green
	visible_gcd0 = 0
	for i in range(300, 701):
		visible_gcd0 += c.blackbody(i, args.blackbody) * green58_0[i-300] *  luminosity[i-300] * 683.002
	visible_gcd03 = 0
	for i in range(300, 701):
		visible_gcd03 += c.blackbody(i, args.blackbody) * green58_03[i-300] *  luminosity[i-300] * 683.002
	visible_gcd07 = 0
	for i in range(300, 701):
		visible_gcd07 += c.blackbody(i, args.blackbody) * green58_07[i-300] *  luminosity[i-300] * 683.002
	visible_gcd10 = 0
	for i in range(300, 701):
		visible_gcd10 += c.blackbody(i, args.blackbody) * green58_10[i-300] *  luminosity[i-300] * 683.002
	# gray
	visible_graycd0 = 0
	for i in range(300, 701):
		visible_graycd0 += c.blackbody(i, args.blackbody) * gray_0[i-300] *  luminosity[i-300] * 683.002
	visible_graycd03 = 0
	for i in range(300, 701):
		visible_graycd03 += c.blackbody(i, args.blackbody) * gray_03[i-300] *  luminosity[i-300] * 683.002
	visible_graycd07 = 0
	for i in range(300, 701):
		visible_graycd07 += c.blackbody(i, args.blackbody) * gray_07[i-300] *  luminosity[i-300] * 683.002
	visible_graycd10 = 0
	for i in range(300, 701):
		visible_graycd10 += c.blackbody(i, args.blackbody) * gray_10[i-300] *  luminosity[i-300] * 683.002
	
	# candela equivalents weighted by a custom luminosity function in place of CIE
	# to compare brightness for another species
	# This is probably not very useful because we're already quantifying species-specific
	# luminosity in more standard ways, but see also https://pmc.ncbi.nlm.nih.gov/articles/PMC11562817/
	
	# blue
	visible_bcde0 = 0
	for i in range(300, 701):
		visible_bcde0 += c.blackbody(i, args.blackbody) * blue47_0[i-300] *  sensitivity(i) * 683.002
	visible_bcde03 = 0
	for i in range(300, 701):
		visible_bcde03 += c.blackbody(i, args.blackbody) * blue47_03[i-300] * sensitivity(i) * 683.002
	visible_bcde07 = 0
	for i in range(300, 701):
		visible_bcde07 += c.blackbody(i, args.blackbody) * blue47_07[i-300] * sensitivity(i) * 683.002
	visible_bcde10 = 0
	for i in range(300, 701):
		visible_bcde10 += c.blackbody(i, args.blackbody) * blue47_10[i-300] * sensitivity(i) * 683.002
	# red
	visible_rcde0 = 0
	for i in range(300, 701):
		visible_rcde0 += c.blackbody(i, args.blackbody) * red25_0[i-300] * sensitivity(i) * 683.002
	visible_rcde03 = 0
	for i in range(300, 701):
		visible_rcde03 += c.blackbody(i, args.blackbody) * red25_03[i-300] * sensitivity(i) * 683.002
	visible_rcde07 = 0
	for i in range(300, 701):
		visible_rcde07 += c.blackbody(i, args.blackbody) * red25_07[i-300] * sensitivity(i) * 683.002
	visible_rcde10 = 0
	for i in range(300, 701):
		visible_rcde10 += c.blackbody(i, args.blackbody) * red25_10[i-300] * sensitivity(i) * 683.002
	# yellow
	visible_ycde0 = 0
	for i in range(300, 701):
		visible_ycde0 += c.blackbody(i, args.blackbody) * yellow15_0[i-300] * sensitivity(i) * 683.002
	visible_ycde03 = 0
	for i in range(300, 701):
		visible_ycde03 += c.blackbody(i, args.blackbody) * yellow15_03[i-300] * sensitivity(i) * 683.002
	visible_ycde07 = 0
	for i in range(300, 701):
		visible_ycde07 += c.blackbody(i, args.blackbody) * yellow15_07[i-300] * sensitivity(i) * 683.002
	visible_ycde10 = 0
	for i in range(300, 701):
		visible_ycde10 += c.blackbody(i, args.blackbody) * yellow15_10[i-300] * sensitivity(i) * 683.002
	# green
	visible_gcde0 = 0
	for i in range(300, 701):
		visible_gcde0 += c.blackbody(i, args.blackbody) * green58_0[i-300] * sensitivity(i) * 683.002
	visible_gcde03 = 0
	for i in range(300, 701):
		visible_gcde03 += c.blackbody(i, args.blackbody) * green58_03[i-300] * sensitivity(i) * 683.002
	visible_gcde07 = 0
	for i in range(300, 701):
		visible_gcde07 += c.blackbody(i, args.blackbody) * green58_07[i-300] * sensitivity(i) * 683.002
	visible_gcde10 = 0
	for i in range(300, 701):
		visible_gcde10 += c.blackbody(i, args.blackbody) * green58_10[i-300] * sensitivity(i) * 683.002
	# gray
	visible_graycde0 = 0
	for i in range(300, 701):
		visible_graycde0 += c.blackbody(i, args.blackbody) * gray_0[i-300] * sensitivity(i) * 683.002
	visible_graycde03 = 0
	for i in range(300, 701):
		visible_graycde03 += c.blackbody(i, args.blackbody) * gray_03[i-300] * sensitivity(i) * 683.002
	visible_graycde07 = 0
	for i in range(300, 701):
		visible_graycde07 += c.blackbody(i, args.blackbody) * gray_07[i-300] * sensitivity(i) * 683.002
	visible_graycde10 = 0
	for i in range(300, 701):
		visible_graycde10 += c.blackbody(i, args.blackbody) * gray_10[i-300] * sensitivity(i) * 683.002
	
	print("Radiance from 300-700 nm (W/m^2/sr): " + str(visible))
	print("Irradiance from 300-700 nm (W/m^2): " + str(visible*sr))
	print("Irradiance from 300-700 nm (uW/cm^2): " + str(visible*sr*1000000/100**2))
	
	# scaled to specified watt number
	print("")
	print("Scaled radiance/irradiance:")
	print("Radiance from 300-700 nm (W/m^2/sr): " + str(scale*visible))
	radiance = 0
	for i in range(501):
		radiance += ia[i]
	print("Radiance from 300-700 nm (photons/sec/sr): " + str(radiance))
	print("Irradiance (W/m^2): " + str(scale*visible*sr))
	print("Irradiance (uW/cm^2): " + str(scale*visible*sr*1000000/100**2))
	# just multiply this by 100 to get uW/cm^2
	print("Irradiance filtered through red 25 (uW/cm^2):")
	print("0: " + str(scale*visible_r0*sr*100))
	print("0.3: " + str(scale*visible_r03*sr*100))
	print("0.7: " + str(scale*visible_r07*sr*100))
	print("1.0: " + str(scale*visible_r10*sr*100))
	print("Irradiance filtered through yellow 15 (uW/cm^2):")
	print("0: " + str(scale*visible_y0*sr*100))
	print("0.3: " + str(scale*visible_y03*sr*100))
	print("0.7: " + str(scale*visible_y07*sr*100))
	print("1.0: " + str(scale*visible_y10*sr*100))
	print("Irradiance filtered through green 58 (uW/cm^2):")
	print("0: " + str(scale*visible_g0*sr*100))
	print("0.3: " + str(scale*visible_g03*sr*100))
	print("0.7: " + str(scale*visible_g07*sr*100))
	print("1.0: " + str(scale*visible_g10*sr*100))
	print("Irradiance filtered through blue 47 (uW/cm^2):")
	print("0: " + str(scale*visible_b0*sr*100))
	print("0.3: " + str(scale*visible_b03*sr*100))
	print("0.7: " + str(scale*visible_b07*sr*100))
	print("1.0: " + str(scale*visible_b10*sr*100))
	print("Irradiance filtered through gray (uW/cm^2):")
	print("0: " + str(scale*visible_gray0*sr*100))
	print("0.3: " + str(scale*visible_gray03*sr*100))
	print("0.7: " + str(scale*visible_gray07*sr*100))
	print("1.0: " + str(scale*visible_gray10*sr*100))
	print("Luminance from 300-700 nm for blue 47 (cd/m^2):")
	print("0: " + str(scale*visible_bcd0))
	print("0.3: " + str(scale*visible_bcd03))
	print("0.7: " + str(scale*visible_bcd07))
	print("1.0: " + str(scale*visible_bcd10))
	print("Luminance from 300-700 nm for red 25 (cd/m^2):")
	print("0: " + str(scale*visible_rcd0))
	print("0.3: " + str(scale*visible_rcd03))
	print("0.7: " + str(scale*visible_rcd07))
	print("1.0: " + str(scale*visible_rcd10))
	print("Luminance from 300-700 nm for yellow 15 (cd/m^2):")
	print("0: " + str(scale*visible_ycd0))
	print("0.3: " + str(scale*visible_ycd03))
	print("0.7: " + str(scale*visible_ycd07))
	print("1.0: " + str(scale*visible_ycd10))
	print("Luminance from 300-700 nm for green 58 (cd/m^2):")
	print("0: " + str(scale*visible_gcd0))
	print("0.3: " + str(scale*visible_gcd03))
	print("0.7: " + str(scale*visible_gcd07))
	print("1.0: " + str(scale*visible_gcd10))
	print("Luminance from 300-700 nm for gray (cd/m^2):")
	print("0: " + str(scale*visible_graycd0))
	print("0.3: " + str(scale*visible_graycd03))
	print("0.7: " + str(scale*visible_graycd07))
	print("1.0: " + str(scale*visible_graycd10))
	print("Illuminance for blue 47 (lx):")
	print("0: " + str(scale*visible_lx0))
	print("0.3: " + str(scale*visible_lx03))
	print("0.7: " + str(scale*visible_lx07))
	print("1.0: " + str(scale*visible_lx10))
	# "candela equivalent" brightness
	print("Luminance in candela equivalents (cde/m^2)")
	print("Blue 47:")
	print("0: " + str(scale*visible_bcde0))
	print("0.3: " + str(scale*visible_bcde03))
	print("0.7: " + str(scale*visible_bcde07))
	print("1.0: " + str(scale*visible_bcde10))
	print("Red 25:")
	print("0: " + str(scale*visible_rcde0))
	print("0.3: " + str(scale*visible_rcde03))
	print("0.7: " + str(scale*visible_rcde07))
	print("1.0: " + str(scale*visible_rcde10))
	print("Yellow 15:")
	print("0: " + str(scale*visible_ycde0))
	print("0.3: " + str(scale*visible_ycde03))
	print("0.7: " + str(scale*visible_ycde07))
	print("1.0: " + str(scale*visible_ycde10))
	print("Green 58:")
	print("0: " + str(scale*visible_gcde0))
	print("0.3: " + str(scale*visible_gcde03))
	print("0.7: " + str(scale*visible_gcde07))
	print("1.0: " + str(scale*visible_gcde10))
	print("Gray:")
	print("0: " + str(scale*visible_graycde0))
	print("0.3: " + str(scale*visible_graycde03))
	print("0.7: " + str(scale*visible_graycde07))
	print("1.0: " + str(scale*visible_graycde10))
	
	# plot curve
	xvalues = np.empty(61)
	yvalues = np.empty(61)
	for i in range(61):
		w = i*10 + 300
		xvalues[i] = w
		yvalues[i] = c.blackbody(w, args.blackbody)
	plt.plot(xvalues, yvalues)
	plt.show()
	print("")
	
	# plot brightness
	plt.subplot(1, 2, 1)
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_rcd0, scale*visible_rcd03, scale*visible_rcd07, scale*visible_rcd10], 'sr', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_ycd0, scale*visible_ycd03, scale*visible_ycd07, scale*visible_ycd10], 'Dy', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_gcd0, scale*visible_gcd03, scale*visible_gcd07, scale*visible_gcd10], '^g', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_bcd0, scale*visible_bcd03, scale*visible_bcd07, scale*visible_bcd10], 'ob', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_graycd0, scale*visible_graycd03, scale*visible_graycd07, scale*visible_graycd10], marker='v', linestyle='', color='gray', mec='k')
	plt.yscale('log')
	plt.subplot(1, 2, 2)
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_rcde0, scale*visible_rcde03, scale*visible_rcde07, scale*visible_rcde10], 'sr', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_ycde0, scale*visible_ycde03, scale*visible_ycde07, scale*visible_ycde10], 'Dy', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_gcde0, scale*visible_gcde03, scale*visible_gcde07, scale*visible_gcde10], '^g', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_bcde0, scale*visible_bcde03, scale*visible_bcde07, scale*visible_bcde10], 'ob', mec='k')
	plt.plot([0, 0.3, 0.7, 1.0], [scale*visible_graycde0, scale*visible_graycde03, scale*visible_graycde07, scale*visible_graycde10], marker='v', linestyle='', color='gray', mec='k')
	plt.yscale('log')
	plt.show()

w_range = args.lw - args.sw
# test different values for rod pigment
if (args.wopt1):
        print("optimizing rod contrast")
        xvalues = np.empty(w_range)
        rod_ry = np.empty(w_range)
        rod_rg = np.empty(w_range)
        rod_rb = np.empty(w_range)
        rod_yg = np.empty(w_range)
        rod_yb = np.empty(w_range)
        rod_gb = np.empty(w_range)
        rod_rgray = np.empty(w_range)
        rod_ygray = np.empty(w_range)
        rod_ggray = np.empty(w_range)
        rod_bgray = np.empty(w_range)
        
        for i in range(w_range):
                w = args.sw + i
                print(w)
                xvalues[i] = w
                rod_ry[i] = c.brightness_disc(red25_0, red25_03, red25_07, red25_10, yellow15_0, yellow15_03, yellow15_07, yellow15_10, lw=w, output=False)[0]
                print("RY: " + str(rod_ry[i]))
                rod_rg[i] = c.brightness_disc(red25_0, red25_03, red25_07, red25_10, green58_0, green58_03, green58_07, green58_10, lw=w, output=False)[0]
                print("RG: " + str(rod_rg[i]))
                rod_rb[i] = c.brightness_disc(red25_0, red25_03, red25_07, red25_10, blue47_0, blue47_03, blue47_07, blue47_10, lw=w, output=False)[0]
                print("RB: " + str(rod_rb[i]))
                rod_yg[i] = c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, green58_0, green58_03, green58_07, green58_10, lw=w, output=False)[0]
                print("YG: " + str(rod_yg[i]))
                rod_yb[i] = c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, blue47_0, blue47_03, blue47_07, blue47_10, lw=w, output=False)[0]
                print("YB: " + str(rod_yb[i]))
                rod_gb[i] = c.brightness_disc(green58_0, green58_03, green58_07, green58_10, blue47_0, blue47_03, blue47_07, blue47_10, lw=w, output=False)[0]
                print("GB: " + str(rod_gb[i]))
                rod_rgray[i] = c.brightness_disc(red25_0, red25_03, red25_07, red25_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80, lw=w, output=False)[0]
                print("R-gray: " + str(rod_rgray[i]))
                rod_ygray[i] = c.brightness_disc(yellow15_0, yellow15_03, yellow15_07, yellow15_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80, lw=w, output=False)[0]
                print("Y-gray: " + str(rod_ygray[i]))
                rod_ggray[i] = c.brightness_disc(green58_0, green58_03, green58_07, green58_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80, lw=w, output=False)[0]
                print("G-gray: " + str(rod_ggray[i]))
                rod_bgray[i] = c.brightness_disc(blue47_0, blue47_03, blue47_07, blue47_10, gray_0, gray_03, gray_07, gray_10, correct=68, trials=80, lw=w, output=False)[0]
                print("B-gray: " + str(rod_bgray[i]))
                
        plt.plot(xvalues, rod_ry, 'r', label="RY")
        plt.plot(xvalues, rod_rg, '--r', label="RG")
        plt.plot(xvalues, rod_rb, ':r', label="RB")
        plt.plot(xvalues, rod_yg, 'k', label="YG")
        plt.plot(xvalues, rod_yb, '--k', label="YB")
        plt.plot(xvalues, rod_gb, ':k', label="GB")
        plt.plot([args.sw, args.lw], [0.05, 0.05], ':k')
        plt.xlabel("λmax (nm)")
        plt.ylabel("Probability of success")
        plt.legend()
        plt.show()
        
        plt.plot(xvalues, rod_rgray, color='gray', label="R-gray")
        plt.plot(xvalues, rod_ygray, '--', color='gray', label="Y-gray")
        plt.plot(xvalues, rod_ggray, '-.', color='gray', label="G-gray")
        plt.plot(xvalues, rod_bgray, ':', color='gray', label="B-gray")
        plt.plot([args.sw, args.lw], [0.05, 0.05], ':k')
        plt.xlabel("λmax (nm)")
        plt.ylabel("Probability of success")
        plt.legend()
        plt.show()
