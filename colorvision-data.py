# extra data related to or derived from colorvision.py

import numpy as np
import math
import matplotlib.pyplot as plt
import argparse
import scipy
from scipy.stats import binomtest

parser = argparse.ArgumentParser()
parser.add_argument("--performance", help="performance graphs", action="store_true")
parser.add_argument("--performance2", help="performance graphs 2", action="store_true")
parser.add_argument("--erg", help="ERG graphs", action="store_true")
parser.add_argument("--erg2", help="revised ERG graphs", action="store_true")
parser.add_argument("--lw", "-l", type=int, default=555, help="estimate for L cones")
parser.add_argument("--mw", "-m", type=int, default=499, help="estimate for M cones")
parser.add_argument("--sw", "-s", type=int, default=362, help="estimate for S cones")
parser.add_argument("--munsell", action="store_true", help="Munsell reflectance spectra")
parser.add_argument("--pvalues", action="store_true", help="example p-values for performance criteria")
args = parser.parse_args()

# copied from colorvision.py
def vpt(w, lmax):
	# coefficients
	A = 69.7
	a = 0.8795 + 0.0459*math.exp(-(lmax - 300)**2 / 11940)
	B = 28
	b = 0.922
	C = -14.9
	c = 1.104
	D = 0.674
	Abeta = 0.26
	lmbeta = 189 + 0.315 * lmax
	b1 = -40.5 + 0.195 * lmax
	try:
		alpha = 1 / (math.exp(A*(a - lmax/w)) + math.exp(B*(b - lmax/w)) + math.exp(C*(c - lmax/w)) + D)
		beta = Abeta * math.exp(-((w - lmbeta) / b1)**2)
	except OverflowError:
		print("Warning (vpt): math overflow, clipping to 2.2250738585072014e-308")
		return 2.2250738585072014e-308
	
	return alpha + beta

# curve fitting

# fit 1 visual pigment template
def vpt_fit1(xdata, scale, shift, t1):
	ydata = np.empty(xdata.shape[0])
	for i in range(xdata.shape[0]):
		ydata[i] = scale*math.log(vpt(xdata[i], t1)) + shift
	return(ydata)

# fit 2 (SciPy doesn't seem to want to figure out what number of templates provides the
# best fit, so I just have to pick one)
# Since I've decided to fix some of the templates at likely values, let's remove the
# parameters for them.
#def vpt_fit2(xdata, scale, shift, t1, t2, scalet1, scalet2):
def vpt_fit2(xdata, scale, shift, t1, scalet1, scalet2):
	# bounds
	#if (t1 < 530):
	#	t1 = 530
	#if (t1 > 570):
	#	t1 = 570
	#if (t2 < 350):
	#	t2 = 350
	#if (t2 > 515):
	#	t2 = 515
	scalet1 = abs(scalet1)
	scalet2 = abs(scalet2)
	if (scalet2 < 0):
		scalet2 = 0
	ydata = np.empty(xdata.shape[0])
	for i in range(xdata.shape[0]):
		value = scalet1*vpt(xdata[i], t1) + scalet2*vpt(xdata[i], args.sw)
		if (value >= 0):
			ydata[i] = scale*math.log(value) + shift
		else:
			ydata[i] = 0
	return(ydata)

def vpt_fit2_fixed(xdata, scale, shift, scalet1, scalet2):
	# bounds
	#if (t1 < 530):
	#	t1 = 530
	#if (t1 > 570):
	#	t1 = 570
	#if (t2 < 350):
	#	t2 = 350
	#if (t2 > 515):
	#	t2 = 515
	scalet1 = abs(scalet1)
	scalet2 = abs(scalet2)
	if (scalet2 < 0):
		scalet2 = 0
	ydata = np.empty(xdata.shape[0])
	for i in range(xdata.shape[0]):
		value = scalet1*vpt(xdata[i], args.lw) + scalet2*vpt(xdata[i], args.mw)
		if (value >= 0):
			ydata[i] = scale*math.log(value) + shift
		else:
			ydata[i] = 0
	return(ydata)

# fit 1-3
#def vpt_fit3(xdata, scale, shift, t1, t2, t3, scalet1, scalet2, scalet3):
def vpt_fit3(xdata, scale, shift, scalet1, scalet2, scalet3):
	# bounds
	#if (t1 < 555):
	#	t1 = 555
	#if (t1 > 560):
	#	t1 = 560
	#if (t2 < 500):
	#	t2 = 500
	#if (t2 > 510):
	#	t2 = 510
	#if (t3 < 350):
	#	t3 = 350
	#if (t3 > 365):
	#	t3 = 365
	scalet1 = abs(scalet1)
	scalet2 = abs(scalet2)
	scalet3 = abs(scalet3)
	ydata = np.empty(xdata.shape[0])
	for i in range(xdata.shape[0]):
		value = scalet1*vpt(xdata[i], args.lw) + scalet2*vpt(xdata[i], args.mw) + scalet3*vpt(xdata[i], args.sw)
		if (value >= 0):
			ydata[i] = scale*math.log(value) + shift
		else:
			ydata[i] = 0
	return(ydata)

def template_filter(w, a, b, c, d, e, f):
	try:
		density = a*math.exp((b - w) / c) + d*math.exp((e - w) / f)
	except OverflowError:
		#print("Warning (template_filter): math overflow, returning 0")
		return 0
	if (density < 0):
		return 0
	return math.exp(-density)

def filter_fit(xdata, a, b, c, d, e, f):
	ydata = np.empty(xdata.shape[0])
	for i in range(xdata.shape[0]):
		ydata[i] = template_filter(xdata[i], a, b, c, d, e, f)
	return(ydata)

# Data for Thylamys elegans from Palacios et al. (2010)
opossum_filter_data = np.array([
	4.198057132, # 300
	4.940696766, # 304
	5.078876161, # 308
	5.501061962, # 312
	6.584859955, # 316
	7.209278612, # 320
	7.901294748, # 324
	8.620954224, # 328
	9.398772899, # 332
	10.347077491, # 336
	10.347077491, # 340
	11.277550076, # 344
	11.7416299, # 348
	12.36134807, # 352
	12.706348891, # 356
	13.514198455, # 360
	13.671217103, # 364
	13.883186681, # 368
	14.331523604, # 372
	14.679061196, # 376
	14.956837592, # 380
	15.445837458, # 384
	15.658142785, # 388
	16.148261815, # 392
	16.148261815, # 396
	16.469760201, # 400
	17.049486926, # 404
	17.049486926, # 408
	17.049486926, # 412
	17.754783802, # 416
	18.383417975, # 420
	18.665186055, # 424
	18.465415359, # 428
	18.800194486, # 432
	18.800194486, # 436
	19.319971349, # 440
	19.747790274, # 444
	19.747790274, # 448
	19.747790274, # 452
	19.554921087, # 456
	19.96248315, # 460
	19.627330969, # 464
	19.76767408, # 468
	19.860751183, # 472
	19.921297931, # 476
	20.081897902, # 480
	21.329242998, # 484
	21.266830976, # 488
	20.999089747, # 492
	21.050795104, # 496
	20.877623195, # 500
	20.972341738, # 504
	21.270598827, # 508
	21.485291704, # 512
	21.705468482, # 516
	21.848684112, # 520
	21.723113961, # 526
	22.91506046, # 530
	22.780275861, # 534
	22.620944276, # 536
	23.162768661, # 540
	23.162768661, # 544
	22.572782937, # 548
	22.581960078, # 552
	22.620571221, # 556
	22.597516452, # 560
	23.17746701, # 564
	23.074242824, # 568
	23.545671821, # 572
	23.609016479, # 576
	23.112518217, # 580
	23.144973961, # 584
	23.489564422, # 588
	23.638674313, # 592
	24.366951349, # 596
	23.92103928, # 600
	24.628835622, # 604
	24.580935422, # 608
	24.381015504, # 612
	23.953420413, # 616
	24.122488721, # 620
	24.43510841, # 624
	24.616338296, # 628
	24.61712171, # 632
	24.756233741, # 636
	24.676549295, # 640
	24.652897639, # 644
	24.798276986, # 648
	25.008567819, # 652
	25.276943241, # 656
	25.865996329, # 660
	25.24340564, # 664
	25.300445676, # 668
	25.404042916, # 672
	25.44354939, # 676
	25.638134628, # 680
	25.358679486, # 684
	25.557368324, # 688
	25.510661898, # 692
	26.081547231, # 696
	26.750956263 # 700
])

# normalize to 1 at 700
opossum_filter_data = opossum_filter_data / opossum_filter_data[100]

xvalues = np.empty(101)
for i in range(0, 101):
	xvalues[i] = i*4 + 300

opossum_fit = scipy.optimize.curve_fit(filter_fit, xvalues, opossum_filter_data, p0=[1.1, 400, 15, 0.11, 500, 80])

# mouse (Jacobs & Williams 2007)
mouse_filter_data = np.array([
	10.3, # 310
	33.0, # 320
	44.9, # 330
	51.9, # 340
	58.1, # 350
	63.8, # 360
	68.0, # 370
	71.9, # 380
	75.2, # 390
	78.1, # 400
	80.3, # 410
	82.0, # 420
	83.5, # 430
	85.1, # 440
	86.4, # 450
	87.6, # 460
	88.7, # 470
	89.6, # 480
	90.2, # 490
	91.3, # 500
	92.1, # 510
	92.8, # 520
	93.4, # 530
	93.9, # 540
	94.5, # 550
	95.0, # 560
	95.5, # 570
	96.1, # 580
	96.6, # 590
	97.1, # 600
	97.6, # 610
	97.9, # 620
	98.1, # 630
	98.5, # 640
	98.8, # 650
	99.2, # 660
	99.4, # 670
	99.6, # 680
	99.8, # 690
	100.0 # 700
])

xvalues = np.empty(40)
for i in range(0, 40):
	xvalues[i] = i*10 + 310

mouse_fit = scipy.optimize.curve_fit(filter_fit, xvalues, mouse_filter_data/100, p0=[1.1, 400, 15, 0.11, 500, 80])

mousesquared_fit = scipy.optimize.curve_fit(filter_fit, xvalues, (mouse_filter_data/100)**2, p0=[1.1, 400, 15, 0.11, 500, 80])

if (args.performance):
	# upper limit of performance with varying levels of dark adaptation
	x = np.array([
		0.0,
		0.05,
		0.1,
		0.15,
		0.2,
		0.25,
		0.3,
		0.35,
		0.4,
		0.45,
		0.5,
		0.55,
		0.6,
		0.65,
		0.7,
		0.75,
		0.8,
		0.85,
		0.9,
		0.95,
		1.0
	])

	y = np.array([
		62.5, # R-Y, Y-G, G-B
		62.5, # R-Y, Y-G, Y-B, G-B
		62.5, # all except R-G
		62.5, # all equal
		62.5, # all equal
		62.5, # all equal
		62.5, # all except G-B
		62.5, # R-Y, R-G, Y-G
		62.5, # R-Y, R-G, Y-G
		62.5, # R-Y, R-G, Y-G
		62.5, # R-Y, R-G, R-B, Y-G
		62.5, # R-Y
		62.5, # R-Y
		62.5, # R-Y
		62.5, # R-Y
		68.75, # R-Y
		75, # R-Y
		81.25, # R-Y, Y-G
		81.25, # R-Y
		87.5, # R-Y
		93.75 # R-Y, Y-G, G-B
	])

	y1 = np.array([
		37.5, # G-B
		37.5, # G-B
		37.5, # Y-G, Y-B, G-B
		37.5, # R-B, Y-G, Y-B, G-B
		37.5, # R-G, Y-G, Y-B, G-B
		37.5, # R-G, Y-G, Y-B
		37.5, # Y-G
		37.5, # Y-G
		37.5, # Y-G
		37.5, # Y-G
		37.5, # Y-G
		43.75, # R-Y
		43.75, # R-Y
		37.5, # R-Y
		56.25, # R-Y
		56.25, # R-Y
		56.25, # R-Y
		62.5, # R-Y
		68.75, # R-Y
		75.0, # R-Y
		87.5 # R-Y
	])

	y2 = np.empty(21)
	for i in range(21):
		y2[i] = 87.5

	# p-values -- lowest
	pvalues = np.array([
		6.91306013322901e-07, # G-B
		6.91306013322901e-07, # G-B
		6.91306013322901e-07, # Y-G, Y-B, G-B
		6.91306013322901e-07, # R-B, Y-G, Y-B, G-B
		6.91306013322901e-07, # R-G, Y-G, Y-B, G-B
		6.91306013322901e-07, # R-G, Y-G, Y-B
		6.91306013322901e-07, # Y-G
		6.91306013322901e-07, # Y-G
		6.91306013322901e-07, # Y-G
		6.91306013322901e-07, # Y-G
		6.91306013322901e-07, # Y-G
		4.263225520892315e-06, # R-Y
		4.263225520892315e-06, # R-Y
		6.91306013322901e-07, # R-Y
		0.00010750156966200634, # R-Y
		0.00044783204074632933, # R-Y
		0.001661061926555766, # R-Y
		0.016325647807321812, # R-Y
		0.04327398257201562, # R-Y
		0.21328292249639952, # R-Y
		0.8321331599980754 # R-Y
	])

	# p-values -- highest
	pvalues1 = np.array([
		0.001661061926555766, # R-G, R-B
		0.00044783204074632933, # R-G, R-B
		0.00044783204074632933, # R-G
		0.00010750156966200634, # R-G
		4.263225520892315e-06, # R-Y, R-B
		0.00010750156966200634, # G-B
		0.00044783204074632933, # G-B
		0.005505225640202571, # R-B
		0.04327398257201562, # R-B
		0.04327398257201562, # R-B
		0.21328292249639952, # R-B
		0.3899284990417625, # R-B, Y-B
		0.8321331599980754, # R-B
		0.9633061393856144, # R-B
		1.0, # R-B
		1.0, # R-B
		1.0, # R-B, Y-B
		1.0, # R-B, Y-B
		1.0, # R-G, R-B, Y-B
		1.0, # R-G, R-B, Y-B
		1.0 # R-G, R-B, Y-B
	])

	y3 = np.empty(21)
	for i in range(21):
		y3[i] = 0.05

	#plt.plot(x*100, y, 'o-k', label="upper limit of expected performance")
	#plt.plot(x*100, y1, 's-k', mfc='w', label="lower limit of expected performance")
	#plt.plot(x*100, y2, ':k', label="lower limit of actual performance")
	#plt.ylabel("% correct")
	#plt.xlabel("Rod contribution to spectral sensitivity (%)")
	#plt.legend()
	#plt.show()

	#plt.plot(x*100, pvalues, 'o-k', label="lowest P-value")
	#plt.plot(x*100, pvalues1, 's-k', mfc='w', label="highest P-value")
	#plt.plot(x*100, y3, ':k', label="0.05 threshold")
	#plt.ylabel("% correct")
	#plt.xlabel("Rod contribution to spectral sensitivity (%)")
	#plt.legend()
	#plt.show()
	
	# second try (555/504 instead of 562/493)
	
	# "best"
	y = np.array([
		62.5, # all
		62.5, # "
		62.5, # "
		62.5, # all except R-B
		62.5, # "
		62.5, # R-Y, Y-G, G-B
		62.5, # "
		62.5, # R-Y, Y-G
		62.5, # "
		68.75, # "
		68.75, # "
		75.0, # R-Y, Y-G, G-B
		75.0, # "
		75.0, # "
		75.0, # "
		75.0, # R-Y, Y-G
		68.75, # R-Y, Y-G
		68.75, # R-Y
		81.25, # R-Y, R-G, Y-G, G-B
		81.25, # R-Y
		81.25 # "
	])
	
	# "average"
	y1 = np.array([
		50.0, # Y-G, Y-B, G-B
		50.0, # "
		50.0, # "
		50.0, # "
		50.0, # Y-G, G-B
		50.0, # Y-G
		50.0, # "
		50.0, # "
		59.375, # "
		62.5, # "
		62.5, # "
		65.625, # G-B
		65.625, # "
		65.625, # "
		65.625, # "
		68.75, # R-Y, Y-G
		65.625, # "
		65.625, # R-Y
		78.125, # R-Y, Y-G
		78.125, # R-Y
		81.25 # "
	])

	# p-values -- lowest
	pvalues = np.array([
		6.91306013322901e-07, # Y-G, Y-B, G-B
		6.91306013322901e-07, # "
		6.91306013322901e-07, # "
		6.91306013322901e-07, # "
		6.91306013322901e-07, # Y-G, G-B
		6.91306013322901e-07, # Y-G
		6.91306013322901e-07, # "
		6.91306013322901e-07, # "
		0.00010750156966200634, # "
		0.00044783204074632933, # "
		0.00044783204074632933, # "
		0.001661061926555766, # G-B
		0.001661061926555766, # "
		0.001661061926555766, # "
		0.001661061926555766, # "
		0.005505225640202571, # R-Y, Y-G
		0.001661061926555766, # "
		0.001661061926555766, # R-Y
		0.10214956697128286, # R-Y, Y-G
		0.10214956697128286, # R-Y
		0.21328292249639952 # "
	])

	y3 = np.empty(21)
	for i in range(21):
		y3[i] = 0.05

	plt.plot(x*100, y, 'o-k', label="upper limit of expected performance")
	plt.plot(x*100, y1, 's-k', mfc='w', label="lower limit of expected performance")
	plt.plot(x*100, y2, ':k', label="lower limit of actual performance")
	plt.ylabel("% correct")
	plt.xlabel("Rod contribution to spectral sensitivity (%)")
	#plt.legend()
	plt.show()

	plt.plot(x*100, pvalues, 'o-k', label="lowest P-value")
	#plt.plot(x*100, pvalues1, 's-k', mfc='w', label="highest P-value")
	plt.plot(x*100, y3, ':k', label="0.05 threshold")
	plt.ylabel("P-value")
	plt.xlabel("Rod contribution to spectral sensitivity (%)")
	#plt.legend()
	plt.yscale("log") # more readable
	plt.show()

	# performance limit with various types of S-cones
	x = np.array([
		360,
		365,
		370,
		375,
		380,
		385,
		390,
		395,
		400,
		405,
		410,
		415,
		420,
		425,
		430,
		435,
		440,
		445,
		450,
		455,
		460,
		465,
		470,
		475,
		480,
		485,
		490,
		495,
		500,
		505,
		510,
		515,
		520,
		525,
		530,
		535,
		540,
		545,
		550,
		555,
		560
		#565
	])

	# lowest % distinguishable
	y = np.array([
		0.375, #360, R-G
		0.3125, #370, R-G
		0.25, #380, R-G
		0.25, #390, R-G
		0.1875, #400, R-G
		0.375, #410, R-G
		0.375, #420, R-G
		0.8125, #430, R-Y, G-B
		0.5, #440, R-Y
		0.4375, #450, R-Y
		0.4375, #460, R-Y
		1, #470, all
		0.8125, #480, R-Y
		0.8125, #490, R-Y
		0.8125, #500, R-G, Y-G, Y-B
		0.8125, #510, R-G, Y-G, Y-B
		0.625, #520, Y-G
		0.375, #530, G-B
		0.375, #540, G-B
		0.0625, #550, G-B
		0, #560, all
	])

	# lowest median contrast (w=0.05, lp=0.9, sp=0.1)
	y1 = np.array([
		0.3266314163271572, #360
		0.3123140968136736,
		0.294692481663287, #370
		0.2749841053971982,
		0.25358900702795295, #380
		0.2297576011301315,
		0.20101546212040633, #390
		0.16217117434685305,
		0.1385978582741992, #400
		0.22413398793797112,
		0.360140825448527, #410
		0.5290701835481114,
		0.8246340141211987, #420
		1.2044545505984863,
		1.2437681847173452, #430
		1.1628075198472771,
		1.0110039459276385, #440
		0.7811668198932582,
		0.47352629369445715, #450
		0.10597334789894955,
		0.45124712598197514, #460
		0.9370662009444986,
		1.4408740678430836, #470
		1.957620198861704,
		2.4692178598487162, #480
		2.9206392178065466,
		3.2840400911191026, #490
		3.404534843345984,
		2.9894431838138678, #500
		2.5680310349127566,
		2.1519652754687524, #510
		1.7670201880157301,
		1.4155645749064338, #520
		1.0997111775551862,
		0.8213182784333408, #530
		0.5815076585767733,
		0.38204817592999074, #540
		0.22508031347466514,
		0.10895973688862494, # 550
		0.03463295053117855,
		0.0017301516821745318 # 560
		#0.012404390197030556
	])

	# highest median contrast
	y2 = np.array([
		2.1621469641940374, #360
		2.4865347637322404,
		2.8332275461018823, #370
		3.2041900331533317,
		3.5998111446102925, #380
		4.02695746566881,
		4.498676795965365, #390
		4.941442562133805,
		5.377072697866122, #400
		5.84698102314721,
		6.315881356235241, #410
		6.777888967503436,
		7.227211583413264, #420
		7.658275829179262,
		8.065854580697074, #430
		8.358370551868125,
		8.704125234996223, #440
		9.013430252007048,
		9.282905654763674, #450
		9.509452518332456,
		9.6899987429787, #460
		9.821099808930427,
		9.898382365798803, #470
		9.915897607223247,
		9.865624483556992, #480
		9.737613107339428,
		9.52141349397467, #490
		9.209095476225826,
		8.79900787867561, #500
		8.297984561938536,
		7.7196473719410275, #510
		7.078991912572704,
		6.387063699478136, #520
		5.650353488917943,
		4.875368545505786, #530
		4.073547854820973,
		3.26185713958644, #540
		2.459406468283915,
		1.68246206224998, # 550
		0.945721970920892,
		0.265284992872467 # 560
	])

	#plt.plot(x, y*100, 'o-k')
	#plt.ylabel("Minimum distinguishable color/brightness pairs (%)")
	#plt.xlabel("λmax of S cone (nm)")
	#plt.show()

	# lowest median contrast for M cones given S=362 and L=562 (w=0.06, lp=0.62, mp=0.31, sp=0.07)
	y3 = np.array([
		0.4577810630009087, #360
		0.44776081789168903,
		0.4357331354341544, #370
		0.4227265819906353,
		0.40919044233894086, #380
		0.39489345912858065,
		0.3788622999185072, #390
		0.3596327561653114,
		0.3372274074867613, #400
		0.32125224453533163,
		0.39655260606543763, #410
		0.5996616557723204,
		0.9083700248880022, #420
		1.263912820556233,
		1.451097969967503, #430
		1.3824769148088656,
		1.2523591523899231, #440
		1.0632256495333963,
		0.8438788737748868, #450
		0.6893491353807499,
		0.8220135600947149, #460
		1.2432181350217457,
		1.8058928030480033, #470
		2.389418289871686,
		2.920852805745188, #480
		3.484594743888741,
		3.960957270273307, #490
		4.317496733216242,
		4.534780539468157, #500
		4.176826303773539,
		3.8055488298720848, #510
		3.5127580000497227,
		3.2020868450037656, #520
		2.967152190750146,
		2.7944747449506826, #530
		2.429652156671667,
		2.055459685638413, #540
		1.6386336705431992,
		1.249677500317743, # 550
		0.8262518446018268,
		0.508541829016269 # 560
	])

	#plt.plot(x, y1, 'o-k')
	#plt.plot(x, y2, 's-k', mfc='w', label="highest median contrast")
	#plt.ylabel("Lowest median contrast (JND)")
	#plt.xlabel("λmax of S cone (nm)")
	#plt.plot([362, 362], [0, 4], ':k')
	#plt.plot([493, 493], [0, 4], ':k')
	#plt.text(363, 3.5, 'D. aurita S cone')
	#plt.text(494, 3.5, 'D. virginiana rod')
	#plt.show()

	#plt.plot(x, y3, 'o-k')
	#plt.ylabel("Lowest median contrast (JND)")
	#plt.xlabel("λmax of M cone (nm)")
	#plt.plot([362, 362], [0, 5], ':k')
	#plt.plot([493, 493], [0, 5], ':k')
	#plt.text(363, 4.75, 'D. aurita S cone')
	#plt.text(494, 4.75, 'D. virginiana rod')
	#plt.show()

	x1 = np.array([
		490,
		491,
		492,
		493,
		494,
		495,
		496,
		497,
		498,
		499,
		500,
		501,
		502,
		503,
		504,
		505,
		506,
		507,
		508,
		509,
		510
	])

	# S cones
	y4 = np.array([
		3.2840400911191026, #490
		3.3441619681478674,
		3.3997664789917073,
		3.450742959490288,
		3.496998101636657,
		3.404534843345984, # 495
		3.3089980109980814,
		3.2223337300604356,
		3.1533525970922387,
		3.0760519243187847,
		2.9894431838138678, #500
		2.9215088715949395,
		2.831513041100504,
		2.7425852550251006,
		2.6547500073427583,
		2.5680310349127566, # 505
		2.482451379458902,
		2.398033441796644,
		2.3147990289765064,
		2.232769394968497,
		2.1519652754687524 #510
	])

	# M cones
	y5 = np.array([
		3.960957270273307, #490
		4.042684666768339,
		4.119372624390497,
		4.190838916757469,
		4.256924920553885,
		4.317496733216242, # 495
		4.372446095712421,
		4.421691067385867,
		4.465176403960991,
		4.502873596627392,
		4.534780539468157, #500
		4.532630556593004,
		4.427249951609493,
		4.32396550077768,
		4.2498452529733335,
		4.176826303773539, # 505
		4.10310829512685,
		4.0075637129664665,
		3.9144899584563957,
		3.849336456485055,
		3.8055488298720848 #510
	])

	#plt.plot(x1, y4, 'o-k')
	#plt.plot(x1, y5, 's-k', mfc='w')
	#plt.ylabel("Lowest median contrast (JND)")
	#plt.xlabel("λmax of M/S cone (nm)")
	#plt.plot([493, 493], [2, 5], ':k')
	#plt.text(493.5, 4.75, 'D. virginiana rod')
	#plt.show()
	
	# redoing this too...
	# The script won't run if you set -m equal to -l or -s, so we won't include the ends of
	# the range.
	mvalues = np.empty(194)
	for i in range(362, 556):
		mvalues[i-362] = i
	
	contrast = np.array([
		float('inf'), # 362
		0.6755111063077329,
		0.6831832780307252,
		0.6909874088588867, # 365
		0.6989227217694014,
		0.706988804089542,
		0.7151856531560902,
		0.7235137175613533,
		0.7319739238571595, # 370
		0.7405676887612536,
		0.7413535006469469,
		0.7401244197536263,
		0.7389058308403942,
		0.7377009292543436, # 375
		0.7365113899653375,
		0.7353372996299012,
		0.7341770713543045,
		0.733027340461255,
		0.7318828426198376, # 380
		0.7307362761554503,
		0.7295781487370582,
		0.7283966066513687,
		0.7271772441887869,
		0.725902891978305, # 385
		0.7245533859789121,
		0.7231053222509728,
		0.7215318057986339,
		0.7198022046172705,
		0.7178819232037383, # 390
		0.7157322140373139,
		0.7133100515026451,
		0.7105681004852713,
		0.7074548211041191,
		0.7039147613385516, # 395
		0.6998891004386294,
		0.6953165180480108,
		0.6901344771906881,
		0.6842810239812347,
		0.677697223361003, # 400
		0.6703303685616742,
		0.6621534063795855,
		0.6534058646428655,
		0.6437624126473674,
		0.6332251259225088, # 405
		0.6218269372429046,
		0.6096410593481592,
		0.5967922684967517,
		0.5834702199867392,
		0.5707882410696262, # 410
		0.5588176470974614,
		0.5481227652595329,
		0.5394624881309171,
		0.5337292667898148,
		0.5319199691736528, # 415
		0.5350793883010513,
		0.5442185637905891,
		0.5602212299162572,
		0.5837611272727616,
		0.6152533295841448, # 420
		0.6581562710475619,
		0.7152577366173519,
		0.778849433324659,
		0.8486182626338901,
		0.924254111359502, # 425
		1.0054614410074294,
		1.0919633201573358,
		1.1835007539035347,
		1.2798295257685983,
		1.3807160525587467, # 430
		1.4774853424572432,
		1.5186894563425597,
		1.61648457111507,
		1.729808530457945,
		1.7365732098731308, # 435
		1.7174003515574416,
		1.6955399683310444,
		1.6709556848154288,
		1.6436343120572916,
		1.613587293783901, # 440
		1.5808518746909477,
		1.5454921069112837,
		1.507599883979462,
		1.4672962729622854,
		1.4247335042358316, # 445
		1.3800980743654976,
		1.3336155203086824,
		1.2855575305383349,
		1.2362521627055574,
		1.1860980159290764, # 450
		1.135583205935395,
		1.0853098002506427,
		1.036023768511126,
		0.9886491034046331,
		0.9443219903181135, # 455
		0.9044161196082624,
		0.8705433991662597,
		0.8445074746964223,
		0.8281867536285223,
		0.8242215415865974, # 460
		0.8407122368638591,
		0.8708797279924915,
		0.9143282103189401,
		0.9701391509867039,
		1.0370727456448574, # 465
		1.1137581653544126,
		1.1988319531133123,
		1.2910178950425868,
		1.3891608951552237,
		1.492231944801306, # 470
		1.5993182123446563,
		1.7096073620992174,
		1.8223711127542948,
		1.936950359127413,
		2.0527426629651537, # 475
		2.1691921633055506,
		2.2857816379673745,
		2.402026354229628,
		2.4992381443574923,
		2.540704714557072, # 480
		2.634670696075736,
		2.744834380709813,
		2.852771272921551,
		2.958115704003813,
		3.0605182295094187, # 485
		3.159645726678755,
		3.2551817652975017,
		3.3468272113530024,
		3.4343010251639448,
		3.517341214811264, # 490
		3.595705902822,
		3.669174460140222,
		3.7375486573316756,
		3.8006537794710056,
		3.858339648898024, # 495
		3.9104814995250416,
		3.956980648014337,
		3.9977649111575584,
		4.0327887252483,
		4.0620329320539525, # 500
		4.070786580602448,
		4.023283271460081,
		3.9738208474706025,
		3.9224952834726334,
		3.8693987300663277, # 505
		3.8146193582323704,
		3.7582412646331154,
		3.7003444298664365,
		3.641004722441975,
		3.58029394180917, # 510
		3.5182798943609335,
		3.4550264969449316,
		3.3905939030208536,
		3.32503864719445,
		3.258413804430286, # 515
		3.2128089558623536,
		3.1700767626602415,
		3.098614652180687,
		3.0263279857439267,
		2.953252425918691, # 520
		2.8794213748585538,
		2.8048661831717925,
		2.7296163603539165,
		2.6536997876237907,
		2.5917869790116557, # 525
		2.527797276985846,
		2.449898505159717,
		2.3965343153589442,
		2.3156906408994167,
		2.2343727436542196, # 530
		2.162049320842672,
		2.0800882952015742,
		1.997705046574264,
		1.9149296685112094,
		1.8487050732253536, # 535
		1.7642305354183374,
		1.6795050531851805,
		1.5962336551588998,
		1.5321170135349904,
		1.4460392872178627, # 540
		1.360025965333152,
		1.2741867958862085,
		1.1886616919048563,
		1.1125711972432706,
		1.0487954137559488, # 545
		0.9675186112634149,
		0.8868601759315792,
		0.8087098652683014,
		0.7340229723287135,
		0.6641359649382043, # 550
		0.6009072027953737,
		0.5468471326199756,
		0.5051176363999856,
		0.47916943814859125,
		float('inf') # 555
	])
	
	plt.plot(mvalues, contrast, 'k')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("ΔS (JND)")
	plt.show()
	
	# individual color pairs
	
	ry = np.array([
		float('inf'), # 362
		1.1732832293430255,
		1.1808952586284824,
		1.1885442079067805, # 365
		1.1962381345812476,
		1.203985367809636,
		1.2117944669352134,
		1.2196741717431818,
		1.2276333277271843, # 370
		1.2356807863754777,
		1.2438252954484117,
		1.2520753986936408,
		1.2604393573198867,
		1.2689250927894236, # 375
		1.2775401405323064,
		1.2862916025325144,
		1.2951860930989851,
		1.3042296814726682,
		1.313427841160832, # 380
		1.322785415683381,
		1.3323066046806182,
		1.341994967012795,
		1.3518534327306067,
		1.3618843155243163, # 385
		1.3720893204629743,
		1.3824695457737848,
		1.3930254795944275,
		1.4037569922577622,
		1.4146633227544565, # 390
		1.4257430563812195,
		1.436994090523878,
		1.4484135870902206,
		1.4599979122615352,
		1.4717425656769603, # 395
		1.4836421011799206,
		1.495690040031386,
		1.5078787758565224,
		1.520199469399285,
		1.5326419308081523, # 400
		1.5451944874793697,
		1.5578438359336142,
		1.5705748763613503,
		1.583370528237654,
		1.5962115250046822, # 405
		1.6090761855975553,
		1.6219401607807031,
		1.6347761528728166,
		1.647553608303619,
		1.6602383833817356, # 410
		1.6727923845953807,
		1.6851731858071064,
		1.6973336260211647,
		1.709221393160468,
		1.7207786015585482, # 415
		1.7319413736142197,
		1.7426394391741997,
		1.7527957695923657,
		1.7623262669626478,
		1.771139532620039, # 420
		1.7791367424707656,
		1.7862116597618547,
		1.7922508181289598,
		1.7971339086735014,
		1.8007344038789657, # 425
		1.8029204478641143,
		1.803556036352866,
		1.802502500533683,
		1.7996202966326282,
		1.794771087802526, # 430
		1.7878200875139194,
		1.7786386151734401,
		1.7671067968239673,
		1.7531163285446947,
		1.7365732098731308, # 435
		1.7174003515574416,
		1.6955399683310444,
		1.6709556848154288,
		1.6436343120572916,
		1.613587293783901, # 440
		1.5808518746909477,
		1.5454921069112837,
		1.507599883979462,
		1.4672962729622854,
		1.4247335042358316, # 445
		1.3800980743654976,
		1.3336155203086824,
		1.2855575305383349,
		1.2362521627055574,
		1.1860980159290764, # 450
		1.135583205935395,
		1.0853098002506427,
		1.036023768511126,
		0.9886491034046331,
		0.9443219903181135, # 455
		0.9044161196082624,
		0.8705433991662597,
		0.8445074746964223,
		0.8281867536285223,
		0.8242215415865974, # 460
		0.8407122368638591,
		0.8708797279924915,
		0.9143282103189401,
		0.9701391509867039,
		1.0370727456448574, # 465
		1.1137581653544126,
		1.1988319531133123,
		1.2910178950425868,
		1.3891608951552237,
		1.492231944801306, # 470
		1.5993182123446563,
		1.7096073620992174,
		1.8223711127542948,
		1.936950359127413,
		2.0527426629651537, # 475
		2.1691921633055506,
		2.2857816379673745,
		2.402026354229628,
		2.4992381443574923,
		2.540704714557072, # 480
		2.634670696075736,
		2.744834380709813,
		2.852771272921551,
		2.958115704003813,
		3.0605182295094187, # 485
		3.159645726678755,
		3.2551817652975017,
		3.3468272113530024,
		3.4343010251639448,
		3.517341214811264, # 490
		3.595705902822,
		3.669174460140222,
		3.7375486573316756,
		3.8006537794710056,
		3.858339648898024, # 495
		3.9104814995250416,
		3.956980648014337,
		3.9977649111575584,
		4.0327887252483,
		4.0620329320539525, # 500
		4.085504206911882,
		4.103234117104374,
		4.1152778124936145,
		4.121712364822571,
		4.122634786458359, # 505
		4.118159773005509,
		4.108417226500746,
		4.093549626222355,
		4.073709321982875,
		4.049812254675643, # 510
		4.0066085619117855,
		3.9491013027984305,
		3.889341589026527,
		3.8363644353866535,
		3.7914277534619307, # 515
		3.7426410906979877,
		3.690154237771535,
		3.634111412199754,
		3.574651296586174,
		3.5119074552465257, # 520
		3.446009084929801,
		3.3768201475418866,
		3.3002395149066834,
		3.222753871541647,
		3.144460074381492, # 525
		3.065456680920591,
		2.9858447851345122,
		2.905728817762961,
		2.8202755814456344,
		2.7316924862936203, # 530
		2.641284592181907,
		2.5492161361625074,
		2.4556608392510753,
		2.3608026488315104,
		2.2648365851528327, # 535
		2.205100506906223,
		2.113598803884419,
		2.029788681232289,
		1.9503052743926417,
		1.8720796732763585, # 540
		1.7775988936433527,
		1.6791379832454683,
		1.5822384601617636,
		1.4873780428204064,
		1.395109872630743, # 545
		1.3060818805054593,
		1.2210594243416417,
		1.1409496051013273,
		1.0668231262090704,
		0.999925219832141, # 550
		0.9416610020881898,
		0.8935345899319065,
		0.8570214641454588,
		0.833370090704743,
		float('inf') # 555
	])
	
	rg = np.array([
		float('inf'), # 362
		0.7516835121712035,
		0.7507250972854779,
		0.7496899893788751, # 365
		0.7485923081020427,
		0.747445200618289,
		0.7462607887401593,
		0.7450501170971074,
		0.7438230926188578, # 370
		0.74258841444454,
		0.7413535006469469,
		0.7401244197536263,
		0.7389058308403942,
		0.7377009292543436, # 375
		0.7365113899653375,
		0.7353372996299012,
		0.7341770713543045,
		0.733027340461255,
		0.7318828426198376, # 380
		0.7307362761554503,
		0.7295781487370582,
		0.7283966066513687,
		0.7271772441887869,
		0.725902891978305, # 385
		0.7245533859789121,
		0.7231053222509728,
		0.7215318057986339,
		0.7198022046172705,
		0.7178819232037383, # 390
		0.7157322140373139,
		0.7133100515026451,
		0.7105681004852713,
		0.7074548211041191,
		0.7039147613385516, # 395
		0.6998891004386294,
		0.6953165180480108,
		0.6901344771906881,
		0.6842810239812347,
		0.677697223361003, # 400
		0.6703303685616742,
		0.6621534063795855,
		0.6534058646428655,
		0.6437624126473674,
		0.6332251259225088, # 405
		0.6218269372429046,
		0.6096410593481592,
		0.5967922684967517,
		0.5834702199867392,
		0.5707882410696262, # 410
		0.5588176470974614,
		0.5481227652595329,
		0.5394624881309171,
		0.5337292667898148,
		0.5319199691736528, # 415
		0.5350793883010513,
		0.5442185637905891,
		0.5602212299162572,
		0.5837611272727616,
		0.6152533295841448, # 420
		0.6581562710475619,
		0.7152577366173519,
		0.778849433324659,
		0.8486182626338901,
		0.924254111359502, # 425
		1.0054614410074294,
		1.0919633201573358,
		1.1835007539035347,
		1.2798295257685983,
		1.3807160525587467, # 430
		1.4774853424572432,
		1.5186894563425597,
		1.61648457111507,
		1.729808530457945,
		1.8467720157755938, # 435
		1.967144411584844,
		2.0906898034750805,
		2.2171670250458106,
		2.346330256659781,
		2.4779300527910624, # 440
		2.6117146755131193,
		2.7474316184662944,
		2.884829216808998,
		3.0236582527948404,
		3.163673482473203, # 445
		3.3046350254582224,
		3.4463095757863864,
		3.5884714068161596,
		3.730903156357731,
		3.873396389410642, # 450
		4.0157519448786925,
		4.116137530909822,
		4.186879339419736,
		4.32755712875788,
		4.427818388748719, # 455
		4.515171785059573,
		4.634233966637425,
		4.654558044346063,
		4.731589775936088,
		4.858533540998687, # 460
		4.984046601503948,
		5.108012409991424,
		5.230317541054946,
		5.350850962413159,
		5.469503310219182, # 465
		5.586166175678221,
		5.700731409532821,
		5.81309045077276,
		5.923133686011589,
		6.030749846317091, # 470
		6.135825448852624,
		6.238244291436169,
		6.337887009001296,
		6.43463070188754,
		6.5283486468246075, # 475
		6.618910102323435,
		6.706180220854468,
		6.790020080578284,
		6.870286849387091,
		6.946834093506077, # 480
		7.016118501461136,
		7.042762833182606,
		7.0662436400457596,
		7.086436831370444,
		7.103218385059975, # 485
		7.116465600411549,
		7.126058492947535,
		7.1318813131600045,
		7.167193442721969,
		7.197726338420478, # 490
		7.223213926577035,
		7.243551910280227,
		7.250900645872001,
		7.228229915104392,
		7.201400481579013, # 495
		7.170390824674275,
		7.135197253664915,
		7.095834448451367,
		7.052335635852989,
		7.004752373607859, # 500
		6.953153926539208,
		6.907157518445353,
		6.871663978174388,
		6.831365516587557,
		6.786370736918917, # 505
		6.736796370025303,
		6.682764371125322,
		6.624398863938266,
		6.561823027544258,
		6.4951560289477595, # 510
		6.424510108417541,
		6.349987924713434,
		6.271680262917478,
		6.189664198538004,
		6.104001797819755, # 515
		6.014739415985563,
		5.920232267716584,
		5.8145962929230155,
		5.7072425503214195,
		5.598260957784216, # 520
		5.487737572290442,
		5.375756692066988,
		5.262403098790897,
		5.147764326484555,
		5.031932842842245, # 525
		4.9150080338122315,
		4.795599103870907,
		4.6626715235673615,
		4.526013958388243,
		4.385655167724384, # 530
		4.2416415446229845,
		4.094037954629148,
		3.9429280504496345,
		3.788414100371808,
		3.630616391014885, # 535
		3.5005071983919596,
		3.357346044482046,
		3.186263482630888,
		3.0128103634273264,
		2.8477400432567173, # 540
		2.7112619130963296,
		2.5689963835967586,
		2.3816644184133846,
		2.1994389220157835,
		2.0296225928789378, # 545
		1.8489031450184559,
		1.6857942665679597,
		1.5307493860474157,
		1.34674003746174,
		1.162910821492317, # 550
		0.9866545062076535,
		0.8229095086372387,
		0.6806890126695941,
		0.5759124319820965,
		float('inf') # 555
	])
	
	rb = np.array([
		float('inf'), # 362
		3.2716789584400283,
		3.320919710830255,
		3.371458167846411, # 365
		3.4233035637411806,
		3.476464954570808,
		3.5309509086185384,
		3.5867692078435294,
		3.6439265322731638, # 370
		3.702428124253221,
		3.762277459093305,
		3.8234759635183426,
		3.8860228145806834,
		3.9499148256658003, # 375
		4.01514639932237,
		4.081709514188491,
		4.149593720157803,
		4.218786134716304,
		4.337506387043851, # 380
		4.459453641833003,
		4.581233607194962,
		4.702647311604437,
		4.823511524903407,
		4.9436588999575, # 385
		5.0510102116474735,
		5.136368592124613,
		5.222813603166925,
		5.310308053167771,
		5.3988130251861035, # 390
		5.49563438794513,
		5.61830305541911,
		5.739604504022204,
		5.8594536264589205,
		5.977775889936153, # 395
		6.09450648016241,
		6.209589443526188,
		6.32297684358624,
		6.43462794269412,
		6.54450841673488, # 400
		6.652589609854414,
		6.758847835226079,
		6.863263726353932,
		6.965821641007947,
		7.066509117320345, # 405
		7.165316379706059,
		7.262235891558268,
		7.357261951931906,
		7.450390334060652,
		7.541617963953228, # 410
		7.630942637218946,
		7.7183627718192565,
		7.8038771939876765,
		7.887484954402904,
		7.969185171905027, # 415
		8.048976902453653,
		8.122126289795837,
		8.168013788120135,
		8.210714289005688,
		8.250276346936724, # 420
		8.286747012190272,
		8.320171793274614,
		8.3706945768249,
		8.427499868325308,
		8.482583888897802, # 425
		8.535942926103829,
		8.587572737801054,
		8.637468594909617,
		8.685625326259427,
		8.73203736489142, # 430
		8.776698795307148,
		8.842201858545188,
		8.925372316343559,
		9.007552898748418,
		9.088702255522925, # 435
		9.168779560780113,
		9.247744507728495,
		9.325557300372632,
		9.40217864194224,
		9.47756971976678, # 440
		9.551692186242958,
		9.62450813547051,
		9.695980075071667,
		9.766070892674442,
		9.834743816525847, # 445
		9.901962369701153,
		9.967690317373627,
		10.031891606598883,
		10.09453029804623,
		10.155570489081981, # 450
		10.2149762275846,
		10.272711415855095,
		10.287828405893581,
		10.257497547560323,
		10.307471710634376, # 455
		10.35765384140845,
		10.405968704216654,
		10.452377146368221,
		10.49683889581474,
		10.539312368145993, # 460
		10.579754460954621,
		10.618120336309744,
		10.654363192503265,
		10.688434026728077,
		10.72028139091978, # 465
		10.74985114364679,
		10.777086201668553,
		10.801926295598241,
		10.824307734998257,
		10.844163189194683, # 470
		10.861421491103506,
		10.876007472393793,
		10.887841839338506,
		10.896841099679676,
		10.902917551707976, # 475
		10.905979347461534,
		10.905930642408421,
		10.902671844106177,
		10.896099972035682,
		10.88610913999064, # 480
		10.87259117097453,
		10.855436352429802,
		10.834534336734151,
		10.809775188205897,
		10.781050573362135, # 485
		10.748255085912348,
		10.711287692043811,
		10.670053275120011,
		10.624464252190279,
		10.574442227978198, # 490
		10.519919645614955,
		10.46084138768864,
		10.39716627659509,
		10.328868420103666,
		10.255938346872519, # 495
		10.178383877689026,
		10.09623068171826,
		10.0095224731562,
		9.91832081242076,
		9.822704487251194, # 500
		9.722768462564073,
		9.618622403235813,
		9.510388790630222,
		9.398200671046503,
		9.282199091630854, # 505
		9.162530295923789,
		9.03934276632516,
		8.912784213568663,
		8.782998623042271,
		8.650123473756949, # 510
		8.51428724731748,
		8.375607340871174,
		8.23418848935794,
		8.090121788340308,
		7.943484389422358, # 515
		7.794339916279137,
		7.642739621498788,
		7.4887242740565245,
		7.332326735916371,
		7.173575155893245, # 520
		7.012496681554898,
		6.849121567642651,
		6.683487544087732,
		6.515644299660353,
		6.345657939536525, # 525
		6.173615286874415,
		5.999627919436769,
		5.8238358612983205,
		5.646410885105437,
		5.467559420190069, # 530
		5.287525103865283,
		5.1065910552148,
		4.925081990516219,
		4.743366335140097,
		4.561858516409751, # 535
		4.381021643280271,
		4.201370788738446,
		4.023477084709305,
		3.847972809037187,
		3.675557576898054, # 540
		3.5070056246772516,
		3.3431739632606803,
		3.185010839491908,
		3.033563430979032,
		2.8899829664456966, # 545
		2.755524501942005,
		2.668820507636467,
		2.6106087224223353,
		2.5264347149944593,
		2.441324761774956, # 550
		2.372443383777761,
		2.320841515856137,
		2.287229825986292,
		2.2718921289140432,
		float('inf') # 555
	])
	
	yg = np.array([
		float('inf'), # 362
		0.6755111063077329,
		0.6831832780307252,
		0.6909874088588867, # 365
		0.6989227217694014,
		0.706988804089542,
		0.7151856531560902,
		0.7235137175613533,
		0.7319739238571595, # 370
		0.7405676887612536,
		0.7492969267484744,
		0.7581640665549112,
		0.7671720862456287,
		0.7763245685260765, # 375
		0.7856257714037667,
		0.7950807080650704,
		0.8046952341066871,
		0.8144761468627921,
		0.8244313063034248, # 380
		0.8345697872917983,
		0.8449020692311975,
		0.8554402639016275,
		0.8661983785192215,
		0.8771926102368098, # 385
		0.888441669868395,
		0.8999671346551414,
		0.9117938305423834,
		0.923950242992919,
		0.9364689524220755, # 390
		0.9493870871458274,
		0.9627467842259458,
		0.9765956468493522,
		0.9909871851976295,
		1.0059812252768954, # 395
		1.0216442664825738,
		1.038049764120105,
		1.0552783086335338,
		1.0734176700013762,
		1.0925626744772279, # 400
		1.1128148819960217,
		1.1342820362286528,
		1.157077265415575,
		1.1813180206970573,
		1.207124749555827, # 405
		1.2346193147964333,
		1.2639231833613116,
		1.2951554229215674,
		1.3284305560008467,
		1.3638563298668736, # 410
		1.401531464437422,
		1.4415434395364888,
		1.4839663772932956,
		1.5288590662692103,
		1.5762631624879968, # 415
		1.6262015906630785,
		1.6786771583372935,
		1.7132392766824713,
		1.7481415276613403,
		1.788493701614618, # 420
		1.8306786630909109,
		1.879228748111831,
		1.9453808808501147,
		2.0135113968070115,
		2.0834508625164245, # 425
		2.1550081908241037,
		2.2279720643633025,
		2.302112963586399,
		2.377185860318112,
		2.452933610567358, # 430
		2.5290910434405234,
		2.605389698536398,
		2.6818624295199864,
		2.7649635439757434,
		2.847612299279152, # 435
		2.92953945447387,
		3.010497296618327,
		3.0902657484152822,
		3.168657766340905,
		3.2455237440116065, # 440
		3.320754673916201,
		3.3942838755825426,
		3.466087165828977,
		3.5361814222332972,
		3.604621569302433, # 445
		3.671496093198246,
		3.7369212609615374,
		3.8010342804109705,
		3.863985684516571,
		3.9259312570912637, # 450
		3.9870238338968296,
		4.04740531424522,
		4.107199203161395,
		4.166503974195112,
		4.225387499833622, # 455
		4.283882742702026,
		4.341984839469683,
		4.399649644140975,
		4.456793731886211,
		4.513295802335847, # 460
		4.568999365512755,
		4.623716546907566,
		4.677232812449448,
		4.729312390301898,
		4.779704154711283, # 465
		4.815851921406072,
		4.795229631252922,
		4.7727037788495466,
		4.767942276602026,
		4.800187140926591, # 470
		4.773135510708214,
		4.744868810793896,
		4.759944796182634,
		4.794512041365132,
		4.8157366292727755, # 475
		4.781726807389541,
		4.750239921298219,
		4.769560129323617,
		4.785113491937814,
		4.796851062495265, # 480
		4.8047479171383225,
		4.808801811948813,
		4.804513075889359,
		4.763073252292278,
		4.7179789962438, # 485
		4.6812604619223475,
		4.671459492917454,
		4.658125505371119,
		4.641346208342972,
		4.606785320814167, # 490
		4.541607290903908,
		4.499103543358011,
		4.473544914983268,
		4.444961557103213,
		4.409465266346626, # 495
		4.333489315020829,
		4.2572887505285095,
		4.200529964336241,
		4.159514256231801,
		4.116231200020511, # 500
		4.070786580602448,
		4.023283271460081,
		3.9738208474706025,
		3.9224952834726334,
		3.8693987300663277, # 505
		3.8146193582323704,
		3.7582412646331154,
		3.7003444298664365,
		3.641004722441975,
		3.58029394180917, # 510
		3.5182798943609335,
		3.4550264969449316,
		3.3905939030208536,
		3.32503864719445,
		3.258413804430286, # 515
		3.2128089558623536,
		3.1700767626602415,
		3.098614652180687,
		3.0263279857439267,
		2.953252425918691, # 520
		2.8794213748585538,
		2.8048661831717925,
		2.7296163603539165,
		2.6536997876237907,
		2.5917869790116557, # 525
		2.527797276985846,
		2.449898505159717,
		2.3965343153589442,
		2.3156906408994167,
		2.2343727436542196, # 530
		2.162049320842672,
		2.0800882952015742,
		1.997705046574264,
		1.9149296685112094,
		1.8487050732253536, # 535
		1.7642305354183374,
		1.6795050531851805,
		1.5962336551588998,
		1.5321170135349904,
		1.4460392872178627, # 540
		1.360025965333152,
		1.2741867958862085,
		1.1886616919048563,
		1.1125711972432706,
		1.0487954137559488, # 545
		0.9675186112634149,
		0.8868601759315792,
		0.8087098652683014,
		0.7340229723287135,
		0.6641359649382043, # 550
		0.6009072027953737,
		0.5468471326199756,
		0.5051176363999856,
		0.47916943814859125,
		float('inf') # 555
	])
	
	yb = np.array([
		float('inf'), # 362
		2.4180262292260766,
		2.4473445556795106,
		2.47729203324495, # 365
		2.5078588470557786,
		2.5390347038981704,
		2.5708089163832035,
		2.603170467129508,
		2.6361080115690654, # 370
		2.669609816011227,
		2.7036636643599063,
		2.7382567804539972,
		2.773375798248011,
		2.809006781637703, # 375
		2.8451352701521824,
		2.8817463207684755,
		2.9360702389183437,
		2.9929026538535677,
		3.0509826806340943, # 380
		3.1102908012820594,
		3.1708059800628385,
		3.2325058203668195,
		3.2953667311104926,
		3.3593640779869354, # 385
		3.424472305551011,
		3.490665029267496,
		3.557915104319182,
		3.6261946772957367,
		3.695475220875478, # 390
		3.7657275461431174,
		3.8369217866869816,
		3.9090273534303157,
		3.9820128659239,
		4.055846070208173, # 395
		4.130493752881073,
		4.220059024136242,
		4.313126175841541,
		4.404745125072125,
		4.494890252651471, # 400
		4.58354044450805,
		4.670678368818154,
		4.756289810041621,
		4.840363054714593,
		4.922888323224489, # 405
		5.0038572416646545,
		5.083262348569657,
		5.161096632699031,
		5.2373530995880255,
		5.312024365865062, # 410
		5.38510228118637,
		5.456577578233412,
		5.526439551907611,
		5.59467576993518,
		5.661271818654428, # 415
		5.73002592592697,
		5.811069696141246,
		5.891661423989975,
		5.971698385785608,
		6.051072529127538, # 420
		6.12967077813081,
		6.207375559968895,
		6.284065596573363,
		6.3596170058918515,
		6.433904754856362, # 425
		6.506804500348792,
		6.5781948443093325,
		6.647960014261278,
		6.715992960731647,
		6.782198838501759, # 430
		6.846498809985311,
		6.908834077567093,
		6.96917001935407,
		7.0275002719742785,
		7.083850577649055, # 435
		7.138282193643741,
		7.190894652924267,
		7.24182766728485,
		7.291261979296793,
		7.339418997025667, # 440
		7.386559084414401,
		7.4329784285294185,
		7.47900445995322,
		7.524989861662792,
		7.571305261942808, # 445
		7.618330765584096,
		7.6664465323354705,
		7.716022659979484,
		7.767408669241322,
		7.820922916852668, # 450
		7.876842279508194,
		7.935392453602784,
		7.99673920262444,
		8.060980855918661,
		8.128142320319746, # 455
		8.198170812015118,
		8.270933453030647,
		8.34621680857435,
		8.423728372073803,
		8.503099937867653, # 460
		8.583892740459648,
		8.66560418657529,
		8.747675963666623,
		8.82950327679762,
		8.910444945032618, # 465
		8.989834077956647,
		9.06698905179939,
		9.141224511652778,
		9.211862140292613,
		9.27824095405584, # 470
		9.339726911133734,
		9.395721646665166,
		9.445670181346498,
		9.48906748508134,
		9.525463813562217, # 475
		9.55446877259008,
		9.548583879562736,
		9.47846332025864,
		9.45537613449565,
		9.448605076109224, # 480
		9.433547879817015,
		9.410206706129529,
		9.378637701276396,
		9.33894680436803,
		9.291285149023365, # 485
		9.235844201837857,
		9.17285077005543,
		9.102561997665958,
		9.025260453841,
		8.94124940108252, # 490
		8.850848313543764,
		8.754388699422751,
		8.652210265716729,
		8.544657449400813,
		8.432076326550035, # 495
		8.314811900220693,
		8.193205759092052,
		8.067594091894765,
		7.938306037404082,
		7.805662346088492, # 500
		7.669974327186833,
		7.531543053833529,
		7.390658798657844,
		7.247600672855411,
		7.102636442888935, # 505
		6.956022500564536,
		6.808003964112748,
		6.658814889968423,
		6.508678577098652,
		6.357807947902131, # 510
		6.206405991844137,
		6.054666260059895,
		5.902773401132313,
		5.750903730113372,
		5.599225824608167, # 515
		5.447901143377909,
		5.3282835693838955,
		5.227961921930154,
		5.1056601965413195,
		4.95494161575789, # 520
		4.805534423798843,
		4.6575687640626064,
		4.511173192712921,
		4.366475485780084,
		4.223603481738254, # 525
		4.082685965900219,
		3.943853603240539,
		3.8072399261981875,
		3.67298238347232,
		3.5412234545988532, # 530
		3.4121118328919375,
		3.2831202300632962,
		3.155578397112796,
		3.0309381938302646,
		2.9093911472829443, # 535
		2.7911433832674493,
		2.6764175983437317,
		2.565455006957227,
		2.458517148019353,
		2.3558873798509454, # 540
		2.257871821903233,
		2.1647994173728398,
		2.0770206986440467,
		1.9949047510835265,
		1.9188338147631598, # 545
		1.849194975959007,
		1.80355065835179,
		1.7749784277187373,
		1.7502762104059586,
		1.7295739683393785, # 550
		1.7129609569573125,
		1.7004762124096322,
		1.6921014300525896,
		1.687757439370325,
		float('inf') # 555
	])
	
	gb = np.array([
		float('inf'), # 362
		2.897796416079587,
		2.9304123193178047,
		2.9635859088767504, # 365
		3.0011833049020105,
		3.0541058056940003,
		3.1086807764937654,
		3.1648943864059813,
		3.2227292502649814, # 370
		3.2821643862986054,
		3.3431751594644696,
		3.405733260031682,
		3.4698067515397635,
		3.5353601865249953, # 375
		3.6023547552166293,
		3.670748420424064,
		3.740496004689354,
		3.8115492218326334,
		3.8838566665663983, # 380
		3.957363780830536,
		4.03201280408285,
		4.107742697487021,
		4.184489021576548,
		4.262183750343437, # 385
		4.340755019295012,
		4.420126822017701,
		4.500218680523567,
		4.580945316005652,
		4.662216342063726, # 390
		4.743935998828862,
		4.8260029491149865,
		4.922711647787102,
		5.030151227585531,
		5.135727719993319, # 395
		5.239377532002964,
		5.3410433556980275,
		5.440673964179274,
		5.538224241108015,
		5.633655460632271, # 400
		5.726935824265345,
		5.818041248015735,
		5.906956376107017,
		5.993675777746471,
		6.078205262669144, # 405
		6.160563232350476,
		6.240781969524841,
		6.318908761011212,
		6.395006748975522,
		6.46915541385726, # 410
		6.541450607573212,
		6.612004076793333,
		6.680942440936427,
		6.748405615621669,
		6.814544697364527, # 415
		6.8795193476796115,
		6.943494733690889,
		7.006638097900855,
		7.069115042422591,
		7.131085623193142, # 420
		7.19270035758052,
		7.254096254103208,
		7.315392975250941,
		7.376689243270736,
		7.438059594164239, # 425
		7.499551577183153,
		7.561183486075433,
		7.622942694485262,
		7.684784651485718,
		7.746632574545969, # 430
		7.808377856842398,
		7.869881184515592,
		7.930974338240712,
		7.9914626333158125,
		8.055077493833098, # 435
		8.138073920757753,
		8.21972819369665,
		8.299512695888897,
		8.376888070399744,
		8.451312010698382, # 440
		8.5222479663882,
		8.589173548659055,
		8.651588436014219,
		8.709021603173898,
		8.76103772372189, # 445
		8.80724262874382,
		8.847287737973154,
		8.88087341533425,
		8.90775123578327,
		8.927725183591733, # 450
		8.94065183240585,
		8.946439583450317,
		8.945047059292254,
		8.936480766126012,
		8.920792147414677, # 455
		8.898074156094765,
		8.868457471868398,
		8.832106485041322,
		8.789215159725526,
		8.740002877888372, # 460
		8.684710352576321,
		8.623595684497824,
		8.55693062175715,
		8.454700733403591,
		8.344697871622433, # 465
		8.26700062109633,
		8.216523716093125,
		8.150400279742652,
		8.078892302770415,
		8.021128767584981, # 470
		7.959816278429325,
		7.8563722247369,
		7.743931992848145,
		7.637487805364547,
		7.56873315478767, # 475
		7.497698860932422,
		7.3773854062113315,
		7.255856472719147,
		7.133313856995434,
		7.009949682316835, # 480
		6.885946742190109,
		6.761478888999529,
		6.636711456250454,
		6.511801704384519,
		6.386899281545461, # 485
		6.262146691942823,
		6.137679765592718,
		6.013628124213486,
		5.890115638924721,
		5.767260876148249, # 490
		5.645177528746003,
		5.52397482996124,
		5.403757948163185,
		5.284628360738447,
		5.1666842057320395, # 495
		5.05002061002226,
		4.934729992923,
		4.8209023441484025,
		4.708625475054006,
		4.5979852419897185, # 500
		4.4890657404687655,
		4.389314149170151,
		4.315323132492431,
		4.241978202343191,
		4.169336471625886, # 505
		4.095501018176247,
		4.012704092951002,
		3.957933104098734,
		3.9034194311820753,
		3.818129763198954, # 510
		3.7355569304462213,
		3.655753284274768,
		3.5794161014100987,
		3.5196020330946354,
		3.4609798078763707, # 515
		3.4035757148084365,
		3.3474128892513955,
		3.2925111776947116,
		3.238887025609768,
		3.186553396543742, # 520
		3.135519730838759,
		3.0857919522361508,
		3.03737253016891,
		2.9902606047429514,
		2.944452180268695, # 525
		2.8999403917613655,
		2.856715847136908,
		2.814767045963531,
		2.7740808736709273,
		2.7346431681545362, # 530
		2.696439353816107,
		2.670786104215667,
		2.6501173958970368,
		2.5814120100724005,
		2.5104444678216193, # 535
		2.438990984694608,
		2.344827475988686,
		2.2503469556586557,
		2.2108104898866503,
		2.1822456444451435, # 540
		2.155032181705711,
		2.1412970506415783,
		2.1353864973472585,
		2.1306112852149415,
		2.1268456567284955, # 545
		2.1129734593530527,
		2.095405429181679,
		2.0795276847252167,
		2.065379723329851,
		2.053003796060196, # 550
		2.042443661205417,
		2.03374313434193,
		2.0269444888983594,
		2.0220867781313716,
		float('inf') # 555
	])
	
	plt.plot(mvalues, ry, 'k', label="R-Y")
	plt.plot(mvalues, rg, 'r', label="R-G")
	plt.plot(mvalues, rb, '--k', label="R-B")
	plt.plot(mvalues, yg, '--r', label="Y-G")
	plt.plot(mvalues, yb, ':k', label="Y-B")
	plt.plot(mvalues, gb, ':r', label="G-B")
	plt.legend()
	plt.ylabel("ΔS (JND)")
	plt.xlabel("Wavelength (nm)")
	plt.show()

# performance variations for Gutierrez et al. (2011)
if (args.performance2):
	xvalues = np.array([
		0.06,
		0.07,
		0.08,
		0.09,
		0.10,
		0.11,
		0.12,
		0.13,
		0.14,
		0.15,
		0.16,
		0.17,
		0.18,
		0.19,
		0.20,
		0.21,
		0.22
	])
	
	perf = np.array([
		100,
		100,
		87.5,
		87.5,
		87.5,
		81.25,
		81.25,
		81.25,
		75,
		68.75,
		62.5,
		59.375,
		56.25,
		56.25,
		53.125,
		50,
		50
	])
	
	contrast = np.array([
		2.029011521831178,
		1.8113614994088278,
		1.6329635653861423,
		1.4852981573533655,
		1.361742295385485,
		1.2572415454802979,
		1.1679474322342374,
		1.0909150479557514,
		1.0238721270051974,
		0.9650483876191293,
		0.9130507289523605,
		0.8667719664249858,
		0.8253237465691047,
		0.787986849268589,
		0.7541740364747758,
		0.7221545095778028,
		0.6928525027395886
	])
	
	# I feel like there's a better way to do this
	line1 = np.empty(17)
	for i in range(17):
		line1[i] = 62.5
	line2 = np.empty(17)
	for i in range(17):
		line2[i] = 1
	
	plt.subplot(1, 2, 1)
	plt.plot(xvalues, perf, '-k')
	plt.plot(xvalues, line1, '--k')
	plt.title("Expected % correct")
	plt.subplot(1, 2, 2)
	plt.plot(xvalues, contrast, '-k')
	#plt.plot(xvalues, line2, '--k')
	plt.title("Median contrast")
	plt.show()

# ERG graphs (Jacobs & Williams 2010)

if (args.erg):
	# average for several animals, 460-650 (figure 1)
	erg0 = np.array([
		-0.764865291, # 460
		-0.65598016, # 470
		-0.538437606, # 480
		-0.403219479, # 490
		-0.311450795, # 500
		-0.216994702, # 510
		-0.153506933, # 520
		-0.102355991, # 530
		-0.070846579, # 540
		-0.036036524, # 550
		0, # 560
		-0.011074287, # 570
		-0.051024687, # 580
		-0.090145418, # 590
		-0.128905422, # 600
		-0.219339421, # 610
		-0.344727765, # 620
		-0.553966858, # 630
		-0.74387104, # 640
		-0.984349002 # 650
	])

	x0 = np.array([
		460,
		470,
		480,
		490,
		500,
		510,
		520,
		530,
		540,
		550,
		560,
		570,
		580,
		590,
		600,
		610,
		620,
		630,
		640,
		650
	])

	# This is not a real best-fit curve, just an approximation of what the original image shows
	x0_detail = np.empty(190)
	#best_fit0 = np.empty(190)
	for i in range(190):
		x0_detail[i] = i+460
	#	best_fit0[i] = 0.44*math.log(vpt(i+460, 562.4)) - 0.01

	#plt.plot(x0, erg0, 'ok')
	#plt.plot(x0_detail, best_fit0, 'k')
	#plt.show()
	
	# actual best fit curve
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x0, erg0, p0=[1, 0, 560])
	print("")
	print("Average for several animals, 460-650 nm")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	best_fit0 = vpt_fit1(x0_detail, *best_fit[0])
	plt.plot(x0, erg0, 'ok')
	plt.plot(x0_detail, best_fit0, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# one animal, 370-670 (figure 2)
	erg1 = np.array([
		-0.676985896, # 370
		-0.687185684, # 380
		-0.69775213, # 390
		-0.776750484, # 400
		-0.804949897, # 410
		-0.850848941, # 420
		-0.86864857, # 430
		-0.926680694, # 440
		-0.918614196, # 450
		-0.777917127, # 460
		-0.724351576, # 470
		-0.577321306, # 480
		-0.372758901, # 490
		-0.309926877, # 500
		-0.211162267, # 510
		-0.11886419, # 520
		-0.09409804, # 530
		-0.06303202, # 540
		-0.034332618, # 550
		0, # 560
		-0.009233141, # 570
		-0.078398367, # 580
		-0.152363492, # 590
		-0.204395742, # 600
		-0.287694006, # 610
		-0.364825733, # 620
		-0.5392221, # 630
		-0.729518135, # 640
		-1.026578613, # 650
		-1.261140393, # 660
		-1.5664007 # 670
	])
	
	x1 = np.empty(31)
	for i in range(31):
		x1[i] = i*10 + 370
	
	x1_detail = np.empty(300)
	for i in range(300):
		x1_detail[i] = i+370
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x1, erg1, p0=[1, 0, 560])
	print("")
	print("Single animal, 370-670 nm")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	best_fit1 = vpt_fit1(x1_detail, *best_fit[0])
	plt.plot(x1, erg1, 'ok')
	plt.plot(x1_detail, best_fit1, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# one animal, 390-670 nm, sensitivity differences (figure 3)
	erg2 = np.array([
		0.009655977, # 390
		-0.019895044, #400
		-0.03419242, #410
		-0.020058309, #420
		-0.059731778, #430
		-0.020571429, #440
		0.111673469, #450
		0.141271137, #460
		0.009166181, #470
		0.080769679, #480
		0.13187172, #490
		0.156921283, #500
		0.06071137, #510
		0.049772595, #520
		0.071626822, #530
		0.081002915, #540
		0.008419825, #550
		0.029690962, #560
		-0.009632653, #570
		-0.001399417, #580
		-0.019988338, #590
		0.029854227, #600
		-0.059335277, #610
		0.020011662, #620
		0.025889213, #630
		0.029527697, #640
		0.111953353, #650
		-0.010542274, #660
		-0.009212828 #670
	])
	
	x2 = np.empty(29)
	for i in range(29):
		x2[i] = i*10 + 390
	
	plt.plot(x2, erg2, 'ok')
	plt.show()
	
	# correction for lens filtering
	#print(opossum_fit[0])
	filter_x = np.empty(101)
	for i in range(101):
		filter_x[i] = i*4 + 300
	filter_x1 = np.empty(400)
	for i in range(400):
		filter_x1[i] = i + 300
	plt.plot(filter_x, opossum_filter_data, 'ok')
	filter_y = filter_fit(filter_x1, *opossum_fit[0])
	plt.plot(filter_x1, filter_y, 'k')
	#plt.show()
	
	#print(mouse_fit[0])
	filter_x2 = np.empty(40)
	for i in range(40):
		filter_x2[i] = i*10 + 310
	filter_x3 = np.empty(400)
	for i in range(400):
		filter_x3[i] = i + 300
	plt.plot(filter_x2, mouse_filter_data/100, 'or')
	filter_y1 = filter_fit(filter_x3, *mouse_fit[0])
	filter_y2 = filter_fit(filter_x3, *mousesquared_fit[0])
	plt.plot(filter_x3, filter_y1, 'r')
	# mouse cubed
	plt.plot(filter_x2, (mouse_filter_data/100)**2, 'og')
	plt.plot(filter_x3, filter_y2, 'g')
	#plt.plot(filter_x2, (mouse_filter_data/100)**3, 'ob')
	#plt.plot(filter_x3, filter_y1**3, 'b')
	plt.show()
	
	erg0_adjusted = np.empty(20)
	peak = 0
	for i in range(20):
		#erg0_adjusted[i] = math.exp(erg0[i]) / template_filter(i*10 + 450, *opossum_fit[0])
		# square as estimate of transmission for larger lens (see
		# mouse and rabbit lens diameters, UV vision paper)
		erg0_adjusted[i] = math.exp(erg0[i]) / mouse_filter_data[i+14]**2
		peak = max(peak, erg0_adjusted[i])
	# adjust downward and convert back to log format
	for i in range(20):
		erg0_adjusted[i] = math.log(erg0_adjusted[i] / peak)
	plt.plot(x0, erg0_adjusted, 'ok')
	plt.plot(x0_detail, best_fit0, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	erg1_adjusted = np.empty(31)
	peak = 0
	for i in range(31):
		#erg1_adjusted[i] = math.exp(erg1[i]) / template_filter(i*10 + 370, *opossum_fit[0])
		erg1_adjusted[i] = math.exp(erg1[i]) / mouse_filter_data[i+6]**2
		peak = max(peak, erg1_adjusted[i])
	# adjust downward and convert back to log format
	for i in range(31):
		erg1_adjusted[i] = math.log(erg1_adjusted[i] / peak)
	plt.plot(x1, erg1_adjusted, 'ok')
	plt.plot(x1_detail, best_fit1, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# more curve fitting
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x0, erg0_adjusted, p0=[1, 0, 560])
	best_fit2 = vpt_fit1(x0_detail, *best_fit[0])
	print("")
	print("Average of several animals, 460-650 nm, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x0, erg0_adjusted, 'ok')
	plt.plot(x0_detail, best_fit2, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x1, erg1_adjusted, p0=[1, 0, 560])
	best_fit3 = vpt_fit1(x1_detail, *best_fit[0])
	print("")
	print("Single animal, 370-670 nm, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x1, erg1_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# 2 templates
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x0, erg0_adjusted, p0=[1, 0, 560, 500, 1, 1])
	#best_fit2 = vpt_fit2(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.ylabel("Log relative sensitivity")
	#plt.xlabel("Wavelength (nm)")
	#plt.show()
	
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x1, erg1_adjusted, p0=[1, 0, 560, 500, 1, 1])
	#best_fit3 = vpt_fit2(x1_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x1, erg1_adjusted, 'ok')
	#plt.plot(x1_detail, best_fit3, 'k')
	#plt.show()
	
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x0, erg0_adjusted, p0=[1, 0, 560, 360, 1, 1])
	#best_fit2 = vpt_fit2(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit2, x1, erg1_adjusted, p0=[1, 0, 560, 1, 1])
	best_fit3 = vpt_fit2(x1_detail, *best_fit[0])
	print("")
	print("Single animal, 370-670 nm, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value: " + str(best_fit[0][2]))
	print("Second template value (fixed): " + str(args.sw))
	print("Scaling factor for template 1: " + str(best_fit[0][3])
	+ " (" + str(round(100 * best_fit[0][3] / (best_fit[0][3] + best_fit[0][4]))) + "%)")
	print("Scaling factor for template 2: " + str(best_fit[0][4])
	+ " (" + str(round(100 * best_fit[0][4] / (best_fit[0][3] + best_fit[0][4]))) + "%)")
	plt.plot(x1, erg1_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# 3 templates
	#best_fit = scipy.optimize.curve_fit(vpt_fit3, x0, erg0_adjusted, p0=[1, 0, 560, 500, 360, 1, 1, 1])
	#best_fit2 = vpt_fit3(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit3, x1, erg1_adjusted, p0=[1, 0, 1, 1, 1])
	best_fit3 = vpt_fit3(x1_detail, *best_fit[0])
	print("")
	print("Single animal, 370-670 nm, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value (fixed): " + str(args.lw))
	print("Second template value (fixed): " + str(args.mw))
	print("Third template value (fixed): " + str(args.sw))
	print("Scaling factor for template 1: " + str(best_fit[0][2])
	+ " (" + str(round(100 * abs(best_fit[0][2]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	print("Scaling factor for template 2: " + str(best_fit[0][3])
	+ " (" + str(round(100 * abs(best_fit[0][3]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	print("Scaling factor for template 3: " + str(best_fit[0][4])
	+ " (" + str(round(100 * abs(best_fit[0][4]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	plt.plot(x1, erg1_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# chromatic adaptation
	erg0_adapted = np.empty(20) # 460-650
	peak = 0
	for i in range(20):
		erg0_adapted[i] = erg0[i] + erg2[i+7]
		peak = max(peak, erg0_adapted[i])
	# adjust downward
	for i in range(20):
		erg0_adapted[i] = erg0_adapted[i] - peak
	plt.plot(x0, erg0_adapted, 'ok')
	plt.plot(x0_detail, best_fit0, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	erg1_adapted = np.empty(29) # 390-670
	peak = 0
	for i in range(29):
		erg1_adapted[i] = erg1[i+2] + erg2[i]
		peak = max(peak, erg1_adapted[i])
	# adjust downward
	for i in range(29):
		erg1_adapted[i] = erg1_adapted[i] - peak
	plt.plot(x2, erg1_adapted, 'ok')
	plt.plot(x1_detail, best_fit1, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	erg0_adapted_adjusted = np.empty(20)
	peak = 0
	for i in range(20):
		erg0_adapted_adjusted[i] = erg0_adjusted[i] + erg2[i+7]
		peak = max(peak, erg0_adapted_adjusted[i])
	# adjust downward
	for i in range(20):
		erg0_adapted_adjusted[i] = erg0_adapted_adjusted[i] - peak
	plt.plot(x0, erg0_adapted_adjusted, 'ok')
	plt.plot(x0_detail, best_fit0, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	erg1_adapted_adjusted = np.empty(29)
	peak = 0
	for i in range(29):
		erg1_adapted_adjusted[i] = erg1_adjusted[i+2] + erg2[i]
		peak = max(peak, erg1_adapted_adjusted[i])
	# adjust downward
	for i in range(29):
		erg1_adapted_adjusted[i] = erg1_adapted_adjusted[i] - peak
	plt.plot(x2, erg1_adapted_adjusted, 'ok')
	plt.plot(x1_detail, best_fit1, 'k')
	plt.show()
	
	# further curve fitting
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x0, erg0_adapted_adjusted, p0=[1, 0, 560])
	best_fit2 = vpt_fit1(x0_detail, *best_fit[0])
	print("")
	print("Average of several animals combined with adaptation to long-wavelength light, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x0, erg0_adjusted, 'ok')
	plt.plot(x0_detail, best_fit2, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x2, erg1_adapted_adjusted, p0=[1, 0, 560])
	best_fit3 = vpt_fit1(x1_detail, *best_fit[0])
	print("")
	print("Single animal combined with adaptation, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x2, erg1_adapted_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# 2 templates
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x0, erg0_adapted_adjusted, p0=[1, 0, 560, 500, 1, 1])
	#best_fit2 = vpt_fit2(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.show()
	
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x2, erg1_adapted_adjusted, p0=[1, 0, 560, 500, 1, 1])
	#best_fit3 = vpt_fit2(x1_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x2, erg1_adapted_adjusted, 'ok')
	#plt.plot(x1_detail, best_fit3, 'k')
	#plt.show()
	
	#best_fit = scipy.optimize.curve_fit(vpt_fit2, x0, erg0_adapted_adjusted, p0=[1, 0, 560, 360, 1, 1])
	#best_fit2 = vpt_fit2(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit2, x2, erg1_adapted_adjusted, p0=[1, 0, 560, 1, 1])
	best_fit3 = vpt_fit2(x1_detail, *best_fit[0])
	print("")
	print("Single animal with adaptation, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value: " + str(best_fit[0][2]))
	print("Second template value (fixed): " + str(args.sw))
	print("Scaling factor for template 1: " + str(best_fit[0][3])
	+ " (" + str(round(100 * best_fit[0][3] / (best_fit[0][3] + best_fit[0][4]))) + "%)")
	print("Scaling factor for template 2: " + str(best_fit[0][4])
	+ " (" + str(round(100 * best_fit[0][4] / (best_fit[0][3] + best_fit[0][4]))) + "%)")
	plt.plot(x2, erg1_adapted_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# 3 templates
	#best_fit = scipy.optimize.curve_fit(vpt_fit3, x0, erg0_adapted_adjusted, p0=[1, 0, 560, 500, 360, 1, 1, 1])
	#best_fit2 = vpt_fit3(x0_detail, *best_fit[0])
	#print(best_fit[0])
	#plt.plot(x0, erg0_adjusted, 'ok')
	#plt.plot(x0_detail, best_fit2, 'k')
	#plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit3, x2, erg1_adapted_adjusted, p0=[1, 0, 1, 0.5, 0.1])
	best_fit3 = vpt_fit3(x1_detail, *best_fit[0])
	print("")
	print("Single animal with adaptation, corrected for estimated lens transmission")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value (fixed): " + str(args.lw))
	print("Second template value (fixed): " + str(args.mw))
	print("Third template value (fixed): " + str(args.sw))
	print("Scaling factor for template 1: " + str(best_fit[0][2])
	+ " (" + str(round(100 * abs(best_fit[0][2]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	print("Scaling factor for template 2: " + str(best_fit[0][3])
	+ " (" + str(round(100 * abs(best_fit[0][3]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	print("Scaling factor for template 3: " + str(best_fit[0][4])
	+ " (" + str(round(100 * abs(best_fit[0][4]) / (abs(best_fit[0][2]) + abs(best_fit[0][3]) + abs(best_fit[0][4])))) + "%)")
	plt.plot(x2, erg1_adapted_adjusted, 'ok')
	plt.plot(x1_detail, best_fit3, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# try without "noisy" data below 490 nm
	erg1_clipped = np.empty(19)
	for i in range(19):
		erg1_clipped[i] = erg1_adapted_adjusted[i+10]
	x_clipped = np.empty(19)
	for i in range(19):
		x_clipped[i] = i*10 + 490
	x_clipped_detail = np.empty(190)
	for i in range(190):
		x_clipped_detail[i] = i + 490
	
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x_clipped, erg1_clipped, p0=[1, 0, 560])
	best_fit1 = vpt_fit1(x_clipped_detail, *best_fit[0])
	print("")
	print("Single animal with adaptation and estimated lens transmission, values less than 490 nm removed")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x_clipped, erg1_clipped, 'ok')
	plt.plot(x_clipped_detail, best_fit1, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit2_fixed, x_clipped, erg1_clipped, p0=[1, 0, 1, 1])
	best_fit2 = vpt_fit2_fixed(x_clipped_detail, *best_fit[0])
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value (fixed): " + str(args.lw))
	print("Second template value (fixed): " + str(args.mw))
	print("Scaling factor for template 1: " + str(best_fit[0][2])
	+ " (" + str(round(100 * best_fit[0][2] / (best_fit[0][2] + best_fit[0][3]))) + "%)")
	print("Scaling factor for template 2: " + str(best_fit[0][3])
	+ " (" + str(round(100 * best_fit[0][3] / (best_fit[0][2] + best_fit[0][3]))) + "%)")
	plt.plot(x_clipped, erg1_clipped, 'ok')
	plt.plot(x_clipped_detail, best_fit2, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	# compare without adaptation
	erg1_clipped = np.empty(19)
	for i in range(19):
		erg1_clipped[i] = erg1_adjusted[i+12]
	x_clipped = np.empty(19)
	for i in range(19):
		x_clipped[i] = i*10 + 490
	x_clipped_detail = np.empty(190)
	for i in range(190):
		x_clipped_detail[i] = i + 490
	
	best_fit = scipy.optimize.curve_fit(vpt_fit1, x_clipped, erg1_clipped, p0=[1, 0, 560])
	best_fit1 = vpt_fit1(x_clipped_detail, *best_fit[0])
	print("")
	print("Single animal with estimated lens transmission, values less than 490 nm removed")
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("Template value: " + str(best_fit[0][2]))
	plt.plot(x_clipped, erg1_clipped, 'ok')
	plt.plot(x_clipped_detail, best_fit1, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()
	
	best_fit = scipy.optimize.curve_fit(vpt_fit2_fixed, x_clipped, erg1_clipped, p0=[1, 0, 1, 1])
	best_fit2 = vpt_fit2_fixed(x_clipped_detail, *best_fit[0])
	print("Scaling factor: " + str(best_fit[0][0]))
	print("x-shift: " + str(best_fit[0][1]))
	print("First template value (fixed): " + str(args.lw))
	print("Second template value (fixed): " + str(args.mw))
	print("Scaling factor for template 1: " + str(abs(best_fit[0][2]))
	+ " (" + str(round(100 * abs(best_fit[0][2]) / (abs(best_fit[0][2]) + abs(best_fit[0][3])))) + "%)")
	print("Scaling factor for template 2: " + str(abs(best_fit[0][3]))
	+ " (" + str(round(100 * abs(best_fit[0][3]) / (abs(best_fit[0][2]) + abs(best_fit[0][3])))) + "%)")
	plt.plot(x_clipped, erg1_clipped, 'ok')
	plt.plot(x_clipped_detail, best_fit2, 'k')
	plt.ylabel("Log relative sensitivity")
	plt.xlabel("Wavelength (nm)")
	plt.show()

# Munsell spectra take two
if (args.munsell):
	#10YR6-8/10
	yr6 = np.array([
	   4.6800000e-02,
	   4.5400000e-02,
	   4.7100000e-02,
	   4.5100000e-02,
	   4.5200000e-02,
	   4.6500000e-02,
	   4.2200000e-02,
	   4.2400000e-02,
	   4.6600000e-02,
	   4.4000000e-02,
	   4.2200000e-02,
	   4.5000000e-02,
	   4.4800000e-02,
	   4.4000000e-02,
	   4.4600000e-02,
	   4.3600000e-02,
	   4.3900000e-02,
	   4.4000000e-02,
	   4.3600000e-02,
	   4.4900000e-02,
	   4.4300000e-02,
	   4.2700000e-02,
	   4.6200000e-02,
	   4.6700000e-02,
	   4.4300000e-02,
	   4.4900000e-02,
	   4.6800000e-02,
	   4.4100000e-02,
	   4.4000000e-02,
	   4.6100000e-02,
	   4.5300000e-02,
	   4.5000000e-02,
	   4.6300000e-02,
	   4.5000000e-02,
	   4.5000000e-02,
	   4.3600000e-02,
	   4.2400000e-02,
	   4.4000000e-02,
	   4.2400000e-02,
	   4.1800000e-02,
	   4.4800000e-02,
	   4.4600000e-02,
	   4.1400000e-02,
	   4.5100000e-02,
	   4.4100000e-02,
	   4.3300000e-02,
	   4.4700000e-02,
	   4.5500000e-02,
	   4.4400000e-02,
	   4.5900000e-02,
	   4.4700000e-02,
	   4.5600000e-02,
	   4.5300000e-02,
	   4.2700000e-02,
	   4.4300000e-02,
	   4.6800000e-02,
	   4.3700000e-02,
	   4.5700000e-02,
	   4.7700000e-02,
	   4.4800000e-02,
	   4.5200000e-02,
	   4.6900000e-02,
	   4.4200000e-02,
	   4.4900000e-02,
	   4.6300000e-02,
	   4.4600000e-02,
	   4.4400000e-02,
	   4.4300000e-02,
	   4.4400000e-02,
	   4.5000000e-02,
	   4.3200000e-02,
	   4.2000000e-02,
	   4.5500000e-02,
	   4.4200000e-02,
	   4.2800000e-02,
	   4.4800000e-02,
	   4.3400000e-02,
	   4.2700000e-02,
	   4.4800000e-02,
	   4.5400000e-02,
	   4.4400000e-02,
	   4.6400000e-02,
	   4.8000000e-02,
	   4.8100000e-02,
	   4.7200000e-02,
	   4.6300000e-02,
	   4.8400000e-02,
	   5.0200000e-02,
	   4.7900000e-02,
	   4.8200000e-02,
	   5.0000000e-02,
	   4.7400000e-02,
	   4.7500000e-02,
	   4.9000000e-02,
	   4.6700000e-02,
	   4.7300000e-02,
	   4.8700000e-02,
	   4.6900000e-02,
	   4.6000000e-02,
	   4.8000000e-02,
	   4.7300000e-02,
	   4.7900000e-02,
	   4.5200000e-02,
	   4.4800000e-02,
	   4.7000000e-02,
	   4.6400000e-02,
	   4.4800000e-02,
	   4.8600000e-02,
	   4.8100000e-02,
	   4.8500000e-02,
	   5.0200000e-02,
	   4.9700000e-02,
	   4.8300000e-02,
	   5.1700000e-02,
	   5.2300000e-02,
	   5.2900000e-02,
	   5.3200000e-02,
	   5.2700000e-02,
	   5.6000000e-02,
	   5.8100000e-02,
	   5.6200000e-02,
	   5.9200000e-02,
	   6.1600000e-02,
	   6.1600000e-02,
	   6.5600000e-02,
	   6.8300000e-02,
	   6.7600000e-02,
	   7.3500000e-02,
	   7.8200000e-02,
	   8.0000000e-02,
	   8.3200000e-02,
	   8.8600000e-02,
	   9.3500000e-02,
	   1.0120000e-01,
	   1.0300000e-01,
	   1.0990000e-01,
	   1.1730000e-01,
	   1.2260000e-01,
	   1.2770000e-01,
	   1.3690000e-01,
	   1.4050000e-01,
	   1.4650000e-01,
	   1.5190000e-01,
	   1.5670000e-01,
	   1.5990000e-01,
	   1.6590000e-01,
	   1.6880000e-01,
	   1.7490000e-01,
	   1.7700000e-01,
	   1.7980000e-01,
	   1.8480000e-01,
	   1.8650000e-01,
	   1.8610000e-01,
	   1.9220000e-01,
	   1.9400000e-01,
	   1.9440000e-01,
	   1.9730000e-01,
	   2.0010000e-01,
	   2.0090000e-01,
	   2.0790000e-01,
	   2.1080000e-01,
	   2.1170000e-01,
	   2.1510000e-01,
	   2.2020000e-01,
	   2.2360000e-01,
	   2.3020000e-01,
	   2.3260000e-01,
	   2.3960000e-01,
	   2.4630000e-01,
	   2.5140000e-01,
	   2.5620000e-01,
	   2.6550000e-01,
	   2.6770000e-01,
	   2.7420000e-01,
	   2.8200000e-01,
	   2.8600000e-01,
	   2.8880000e-01,
	   2.9500000e-01,
	   2.9680000e-01,
	   2.9970000e-01,
	   3.0050000e-01,
	   3.0820000e-01,
	   3.2150000e-01,
	   3.2500000e-01,
	   3.2510000e-01,
	   3.3080000e-01,
	   3.3450000e-01,
	   3.3610000e-01,
	   3.3890000e-01,
	   3.4100000e-01,
	   3.4460000e-01,
	   3.4850000e-01,
	   3.4640000e-01,
	   3.4910000e-01,
	   3.5280000e-01,
	   3.4970000e-01,
	   3.5110000e-01,
	   3.5660000e-01,
	   3.5380000e-01,
	   3.5510000e-01,
	   3.5870000e-01,
	   3.5780000e-01,
	   3.5800000e-01,
	   3.6150000e-01,
	   3.6180000e-01,
	   3.6470000e-01,
	   3.6460000e-01,
	   3.6440000e-01,
	   3.6730000e-01,
	   3.6900000e-01,
	   3.6620000e-01,
	   3.7010000e-01,
	   3.7020000e-01,
	   3.6850000e-01,
	   3.7130000e-01,
	   3.7260000e-01,
	   3.6910000e-01,
	   3.7250000e-01,
	   3.7460000e-01,
	   3.7420000e-01,
	   3.7510000e-01,
	   3.7530000e-01,
	   3.7380000e-01,
	   3.7660000e-01,
	   3.7590000e-01,
	   3.7560000e-01,
	   3.7620000e-01,
	   3.7460000e-01,
	   3.7620000e-01,
	   3.7890000e-01,
	   3.7410000e-01,
	   3.7450000e-01,
	   3.7860000e-01,
	   3.7490000e-01,
	   3.7340000e-01,
	   3.7540000e-01,
	   3.7560000e-01,
	   3.7720000e-01,
	   3.7760000e-01,
	   3.7510000e-01,
	   3.7730000e-01,
	   3.7730000e-01,
	   3.7530000e-01,
	   3.7890000e-01,
	   3.7870000e-01,
	   3.7470000e-01,
	   3.8000000e-01,
	   3.7910000e-01,
	   3.7440000e-01,
	   3.7860000e-01,
	   3.8170000e-01,
	   3.7890000e-01,
	   3.8000000e-01,
	   3.7820000e-01,
	   3.7760000e-01,
	   3.7970000e-01,
	   3.7810000e-01,
	   3.7970000e-01,
	   3.8160000e-01,
	   3.7750000e-01,
	   3.7760000e-01,
	   3.7980000e-01,
	   3.7590000e-01,
	   3.7950000e-01,
	   3.8180000e-01,
	   3.7830000e-01,
	   3.7780000e-01,
	   3.8090000e-01,
	   3.7940000e-01,
	   3.8210000e-01,
	   3.8160000e-01,
	   3.7800000e-01,
	   3.7870000e-01,
	   3.8090000e-01,
	   3.7860000e-01,
	   3.8220000e-01,
	   3.8030000e-01,
	   3.7780000e-01,
	   3.8100000e-01,
	   3.8190000e-01,
	   3.7860000e-01,
	   3.8090000e-01,
	   3.8160000e-01,
	   3.7800000e-01,
	   3.8130000e-01,
	   3.8010000e-01,
	   3.7750000e-01,
	   3.7870000e-01,
	   3.8080000e-01,
	   3.8020000e-01,
	   3.8130000e-01,
	   3.8000000e-01,
	   3.8180000e-01,
	   3.8440000e-01,
	   3.8210000e-01,
	   3.8170000e-01,
	   3.8550000e-01,
	   3.8260000e-01,
	   3.8100000e-01,
	   3.8340000e-01,
	   3.8230000e-01,
	   3.8290000e-01,
	   3.8400000e-01,
	   3.8080000e-01,
	   3.8180000e-01,
	   3.8180000e-01,
	   3.7770000e-01,
	   3.7600000e-01,
	   3.7400000e-01,
	   3.7420000e-01,
	   3.8360000e-01,
	   3.8160000e-01,
	   3.8190000e-01,
	   3.8580000e-01,
	   3.8350000e-01,
	   3.8380000e-01,
	   3.8520000e-01,
	   3.8170000e-01,
	   3.8120000e-01,
	   3.8590000e-01,
	   3.8450000e-01,
	   3.8410000e-01,
	   3.8610000e-01,
	   3.8470000e-01,
	   3.8490000e-01,
	   3.8720000e-01,
	   3.8760000e-01,
	   3.8750000e-01,
	   3.8780000e-01,
	   3.8590000e-01,
	   3.8890000e-01,
	   3.8930000e-01,
	   3.8560000e-01,
	   3.8800000e-01,
	   3.9000000e-01,
	   3.8650000e-01,
	   3.8810000e-01,
	   3.8960000e-01,
	   3.8740000e-01,
	   3.8710000e-01,
	   3.8950000e-01,
	   3.8870000e-01,
	   3.8950000e-01,
	   3.8900000e-01,
	   3.8790000e-01,
	   3.9190000e-01,
	   3.9090000e-01,
	   3.8920000e-01,
	   3.9120000e-01,
	   3.8970000e-01,
	   3.8810000e-01,
	   3.9270000e-01,
	   3.9020000e-01,
	   3.8750000e-01,
	   3.9090000e-01,
	   3.9280000e-01,
	   3.8890000e-01,
	   3.9290000e-01,
	   3.9210000e-01,
	   3.9450000e-01,
	   3.9650000e-01,
	   3.9290000e-01,
	   3.9140000e-01,
	   3.9380000e-01,
	   3.9080000e-01,
	   3.9210000e-01,
	   3.9420000e-01,
	   3.9200000e-01,
	   3.9400000e-01,
	   3.9710000e-01,
	   3.9330000e-01,
	   3.9250000e-01,
	   3.9710000e-01,
	   3.9280000e-01,
	   3.9140000e-01,
	   3.9250000e-01,
	   3.9190000e-01,
	   3.9420000e-01,
	   3.9430000e-01,
	   3.9130000e-01,
	   3.9170000e-01,
	   3.9270000e-01,
	   3.9250000e-01,
	   3.9310000e-01,
	   3.9390000e-01,
	   3.9200000e-01,
	   3.9390000e-01,
	   3.9490000e-01,
	   3.9270000e-01,
	   3.9580000e-01,
	   3.9900000e-01,
	   3.9450000e-01,
	   3.9110000e-01,
	   3.9130000e-01,
	   3.9080000e-01,
	   3.9380000e-01,
	   3.9140000e-01,
	   3.9380000e-01,
	   3.9830000e-01,
	   3.9540000e-01,
	   3.9700000e-01,
	   3.9880000e-01,
	   3.9430000e-01,
	   3.9580000e-01,
	   3.9960000e-01,
	   3.9080000e-01,
	   3.8950000e-01,
	   3.9830000e-01,
	   3.9980000e-01,
	   3.9610000e-01,
	   3.9540000e-01,
	   3.9050000e-01,
	   3.9030000e-01,
	   3.9240000e-01,
	   3.9200000e-01,
	   3.9270000e-01,
	   3.9290000e-01,
	   3.9190000e-01,
	   3.9820000e-01,
	   3.9720000e-01,
	   3.9280000e-01,
	])

	yr7 = np.array([
	   7.1300000e-02,
	   6.9800000e-02,
	   6.7400000e-02,
	   7.1300000e-02,
	   7.1400000e-02,
	   6.9200000e-02,
	   7.2400000e-02,
	   7.1500000e-02,
	   7.1200000e-02,
	   7.5100000e-02,
	   7.5700000e-02,
	   7.5100000e-02,
	   7.5300000e-02,
	   7.4300000e-02,
	   7.6600000e-02,
	   7.8500000e-02,
	   7.5300000e-02,
	   7.6700000e-02,
	   7.9700000e-02,
	   7.7300000e-02,
	   7.8000000e-02,
	   7.9200000e-02,
	   7.6800000e-02,
	   7.6700000e-02,
	   7.7800000e-02,
	   7.6100000e-02,
	   7.6200000e-02,
	   7.5600000e-02,
	   7.5700000e-02,
	   7.8100000e-02,
	   7.6900000e-02,
	   7.5500000e-02,
	   7.8100000e-02,
	   7.6600000e-02,
	   7.5300000e-02,
	   7.7400000e-02,
	   7.6300000e-02,
	   7.4400000e-02,
	   7.7200000e-02,
	   7.6800000e-02,
	   7.5300000e-02,
	   7.7300000e-02,
	   7.8800000e-02,
	   7.8900000e-02,
	   7.8600000e-02,
	   7.5700000e-02,
	   7.7200000e-02,
	   7.8600000e-02,
	   7.6300000e-02,
	   7.6100000e-02,
	   7.7500000e-02,
	   7.6100000e-02,
	   7.6500000e-02,
	   7.7100000e-02,
	   7.4500000e-02,
	   7.4100000e-02,
	   7.5300000e-02,
	   7.3500000e-02,
	   7.3000000e-02,
	   7.4600000e-02,
	   7.4800000e-02,
	   7.7500000e-02,
	   7.5000000e-02,
	   7.4700000e-02,
	   7.7300000e-02,
	   7.5500000e-02,
	   7.4400000e-02,
	   7.6900000e-02,
	   7.5700000e-02,
	   7.4000000e-02,
	   7.8500000e-02,
	   7.7400000e-02,
	   7.5700000e-02,
	   7.8800000e-02,
	   7.9300000e-02,
	   7.8700000e-02,
	   7.9100000e-02,
	   7.6800000e-02,
	   7.8500000e-02,
	   7.9600000e-02,
	   7.7800000e-02,
	   8.0500000e-02,
	   8.1200000e-02,
	   7.7900000e-02,
	   7.9800000e-02,
	   8.0400000e-02,
	   7.7800000e-02,
	   7.8200000e-02,
	   7.9300000e-02,
	   7.7500000e-02,
	   7.7700000e-02,
	   7.6800000e-02,
	   7.7100000e-02,
	   7.8700000e-02,
	   7.6400000e-02,
	   7.7000000e-02,
	   7.9300000e-02,
	   7.7700000e-02,
	   7.7500000e-02,
	   7.9100000e-02,
	   7.7500000e-02,
	   7.7600000e-02,
	   8.1200000e-02,
	   7.9100000e-02,
	   7.9100000e-02,
	   8.2200000e-02,
	   8.1800000e-02,
	   8.1700000e-02,
	   8.0100000e-02,
	   7.9500000e-02,
	   8.2400000e-02,
	   8.3600000e-02,
	   8.1800000e-02,
	   8.5100000e-02,
	   8.4900000e-02,
	   8.4100000e-02,
	   8.6600000e-02,
	   8.8900000e-02,
	   8.7400000e-02,
	   9.1100000e-02,
	   9.2300000e-02,
	   9.3000000e-02,
	   9.5000000e-02,
	   9.9200000e-02,
	   1.0210000e-01,
	   1.0790000e-01,
	   1.1020000e-01,
	   1.1730000e-01,
	   1.2310000e-01,
	   1.2830000e-01,
	   1.3410000e-01,
	   1.4490000e-01,
	   1.4910000e-01,
	   1.5870000e-01,
	   1.6850000e-01,
	   1.7590000e-01,
	   1.8270000e-01,
	   1.9550000e-01,
	   2.0220000e-01,
	   2.1350000e-01,
	   2.1970000e-01,
	   2.2730000e-01,
	   2.3530000e-01,
	   2.4310000e-01,
	   2.4580000e-01,
	   2.5470000e-01,
	   2.5800000e-01,
	   2.5980000e-01,
	   2.6700000e-01,
	   2.7210000e-01,
	   2.7270000e-01,
	   2.7980000e-01,
	   2.8150000e-01,
	   2.8320000e-01,
	   2.8690000e-01,
	   2.8970000e-01,
	   2.9240000e-01,
	   2.9940000e-01,
	   2.9980000e-01,
	   3.0470000e-01,
	   3.0880000e-01,
	   3.1090000e-01,
	   3.1620000e-01,
	   3.2540000e-01,
	   3.2450000e-01,
	   3.3360000e-01,
	   3.4140000e-01,
	   3.4760000e-01,
	   3.5430000e-01,
	   3.6500000e-01,
	   3.6990000e-01,
	   3.8430000e-01,
	   3.9220000e-01,
	   4.0010000e-01,
	   4.0880000e-01,
	   4.1990000e-01,
	   4.2390000e-01,
	   4.3760000e-01,
	   4.4130000e-01,
	   4.4570000e-01,
	   4.5380000e-01,
	   4.6550000e-01,
	   4.7410000e-01,
	   4.8180000e-01,
	   4.8500000e-01,
	   4.8760000e-01,
	   4.9230000e-01,
	   4.9500000e-01,
	   4.9670000e-01,
	   5.0390000e-01,
	   5.0190000e-01,
	   5.0410000e-01,
	   5.0950000e-01,
	   5.0910000e-01,
	   5.0750000e-01,
	   5.1410000e-01,
	   5.1490000e-01,
	   5.1350000e-01,
	   5.1650000e-01,
	   5.1390000e-01,
	   5.1420000e-01,
	   5.1800000e-01,
	   5.1580000e-01,
	   5.1900000e-01,
	   5.2160000e-01,
	   5.1870000e-01,
	   5.2430000e-01,
	   5.2510000e-01,
	   5.2030000e-01,
	   5.2220000e-01,
	   5.2530000e-01,
	   5.2080000e-01,
	   5.2220000e-01,
	   5.2380000e-01,
	   5.2020000e-01,
	   5.2290000e-01,
	   5.2330000e-01,
	   5.2210000e-01,
	   5.2430000e-01,
	   5.2170000e-01,
	   5.2140000e-01,
	   5.2550000e-01,
	   5.2180000e-01,
	   5.2020000e-01,
	   5.2490000e-01,
	   5.2410000e-01,
	   5.2060000e-01,
	   5.2570000e-01,
	   5.2420000e-01,
	   5.2290000e-01,
	   5.2510000e-01,
	   5.2190000e-01,
	   5.2080000e-01,
	   5.2500000e-01,
	   5.2210000e-01,
	   5.2380000e-01,
	   5.2460000e-01,
	   5.2050000e-01,
	   5.2130000e-01,
	   5.2420000e-01,
	   5.2130000e-01,
	   5.2350000e-01,
	   5.2510000e-01,
	   5.2010000e-01,
	   5.2200000e-01,
	   5.2330000e-01,
	   5.1950000e-01,
	   5.2120000e-01,
	   5.2450000e-01,
	   5.2210000e-01,
	   5.2290000e-01,
	   5.2170000e-01,
	   5.2050000e-01,
	   5.2310000e-01,
	   5.2130000e-01,
	   5.1910000e-01,
	   5.2400000e-01,
	   5.2210000e-01,
	   5.1940000e-01,
	   5.2500000e-01,
	   5.2430000e-01,
	   5.2080000e-01,
	   5.2290000e-01,
	   5.2050000e-01,
	   5.1920000e-01,
	   5.2310000e-01,
	   5.2160000e-01,
	   5.2190000e-01,
	   5.2340000e-01,
	   5.1930000e-01,
	   5.2260000e-01,
	   5.2460000e-01,
	   5.1880000e-01,
	   5.2180000e-01,
	   5.2330000e-01,
	   5.2000000e-01,
	   5.2160000e-01,
	   5.2330000e-01,
	   5.1960000e-01,
	   5.2250000e-01,
	   5.2180000e-01,
	   5.1960000e-01,
	   5.2110000e-01,
	   5.1880000e-01,
	   5.1870000e-01,
	   5.2300000e-01,
	   5.1950000e-01,
	   5.1970000e-01,
	   5.2320000e-01,
	   5.1960000e-01,
	   5.1880000e-01,
	   5.2330000e-01,
	   5.2140000e-01,
	   5.2100000e-01,
	   5.2390000e-01,
	   5.2200000e-01,
	   5.2150000e-01,
	   5.2390000e-01,
	   5.2170000e-01,
	   5.2120000e-01,
	   5.2270000e-01,
	   5.2040000e-01,
	   5.2290000e-01,
	   5.2220000e-01,
	   5.1780000e-01,
	   5.2080000e-01,
	   5.2120000e-01,
	   5.1500000e-01,
	   5.1710000e-01,
	   5.1830000e-01,
	   5.1900000e-01,
	   5.2290000e-01,
	   5.2160000e-01,
	   5.1760000e-01,
	   5.2320000e-01,
	   5.2250000e-01,
	   5.2040000e-01,
	   5.2360000e-01,
	   5.2230000e-01,
	   5.2180000e-01,
	   5.2300000e-01,
	   5.1960000e-01,
	   5.2150000e-01,
	   5.2430000e-01,
	   5.2150000e-01,
	   5.2410000e-01,
	   5.2640000e-01,
	   5.1970000e-01,
	   5.2280000e-01,
	   5.2660000e-01,
	   5.2240000e-01,
	   5.2420000e-01,
	   5.2580000e-01,
	   5.2250000e-01,
	   5.2320000e-01,
	   5.2450000e-01,
	   5.2310000e-01,
	   5.2490000e-01,
	   5.2380000e-01,
	   5.2020000e-01,
	   5.2420000e-01,
	   5.2560000e-01,
	   5.2180000e-01,
	   5.2610000e-01,
	   5.2500000e-01,
	   5.2270000e-01,
	   5.2770000e-01,
	   5.2620000e-01,
	   5.2260000e-01,
	   5.2580000e-01,
	   5.2540000e-01,
	   5.2210000e-01,
	   5.2380000e-01,
	   5.2390000e-01,
	   5.2330000e-01,
	   5.2660000e-01,
	   5.2620000e-01,
	   5.2760000e-01,
	   5.2890000e-01,
	   5.2740000e-01,
	   5.2970000e-01,
	   5.2960000e-01,
	   5.2410000e-01,
	   5.2390000e-01,
	   5.2790000e-01,
	   5.2590000e-01,
	   5.2490000e-01,
	   5.3050000e-01,
	   5.2800000e-01,
	   5.3000000e-01,
	   5.3170000e-01,
	   5.2630000e-01,
	   5.2800000e-01,
	   5.2690000e-01,
	   5.2440000e-01,
	   5.2820000e-01,
	   5.2740000e-01,
	   5.2620000e-01,
	   5.3330000e-01,
	   5.3180000e-01,
	   5.2700000e-01,
	   5.2940000e-01,
	   5.2900000e-01,
	   5.2450000e-01,
	   5.3020000e-01,
	   5.3000000e-01,
	   5.2840000e-01,
	   5.3210000e-01,
	   5.3090000e-01,
	   5.3040000e-01,
	   5.3310000e-01,
	   5.2930000e-01,
	   5.2710000e-01,
	   5.3320000e-01,
	   5.2990000e-01,
	   5.2830000e-01,
	   5.2930000e-01,
	   5.2840000e-01,
	   5.2940000e-01,
	   5.3350000e-01,
	   5.3250000e-01,
	   5.3410000e-01,
	   5.3100000e-01,
	   5.3120000e-01,
	   5.2950000e-01,
	   5.2780000e-01,
	   5.2840000e-01,
	   5.3110000e-01,
	   5.3270000e-01,
	   5.3310000e-01,
	   5.3130000e-01,
	   5.3070000e-01,
	   5.2730000e-01,
	   5.2610000e-01,
	   5.2810000e-01,
	   5.2190000e-01,
	   5.2460000e-01,
	   5.3030000e-01,
	   5.3050000e-01,
	   5.2760000e-01,
	   5.2990000e-01
	])

	yr8 = np.array([
	   8.4100000e-02,
	   8.3400000e-02,
	   8.5800000e-02,
	   8.5500000e-02,
	   8.7000000e-02,
	   9.2300000e-02,
	   9.2500000e-02,
	   9.3700000e-02,
	   9.9500000e-02,
	   1.0170000e-01,
	   1.0010000e-01,
	   1.0650000e-01,
	   1.1020000e-01,
	   1.0980000e-01,
	   1.1220000e-01,
	   1.1370000e-01,
	   1.1150000e-01,
	   1.1530000e-01,
	   1.1890000e-01,
	   1.1940000e-01,
	   1.2020000e-01,
	   1.1970000e-01,
	   1.1950000e-01,
	   1.2130000e-01,
	   1.1940000e-01,
	   1.1860000e-01,
	   1.2000000e-01,
	   1.1780000e-01,
	   1.1570000e-01,
	   1.2040000e-01,
	   1.1940000e-01,
	   1.1650000e-01,
	   1.1880000e-01,
	   1.1780000e-01,
	   1.1530000e-01,
	   1.1780000e-01,
	   1.1870000e-01,
	   1.1630000e-01,
	   1.1560000e-01,
	   1.1540000e-01,
	   1.1650000e-01,
	   1.1820000e-01,
	   1.1600000e-01,
	   1.1660000e-01,
	   1.1900000e-01,
	   1.1610000e-01,
	   1.1510000e-01,
	   1.1720000e-01,
	   1.1580000e-01,
	   1.1690000e-01,
	   1.2030000e-01,
	   1.1850000e-01,
	   1.1660000e-01,
	   1.1960000e-01,
	   1.2010000e-01,
	   1.1950000e-01,
	   1.1990000e-01,
	   1.1920000e-01,
	   1.2000000e-01,
	   1.1900000e-01,
	   1.1920000e-01,
	   1.2160000e-01,
	   1.2100000e-01,
	   1.1740000e-01,
	   1.1860000e-01,
	   1.2020000e-01,
	   1.1670000e-01,
	   1.1750000e-01,
	   1.2300000e-01,
	   1.1870000e-01,
	   1.1780000e-01,
	   1.2030000e-01,
	   1.1840000e-01,
	   1.1850000e-01,
	   1.2090000e-01,
	   1.2080000e-01,
	   1.2060000e-01,
	   1.2120000e-01,
	   1.1990000e-01,
	   1.2200000e-01,
	   1.2290000e-01,
	   1.2070000e-01,
	   1.2330000e-01,
	   1.2460000e-01,
	   1.2150000e-01,
	   1.2370000e-01,
	   1.2500000e-01,
	   1.2260000e-01,
	   1.2230000e-01,
	   1.2530000e-01,
	   1.2280000e-01,
	   1.2330000e-01,
	   1.2500000e-01,
	   1.2360000e-01,
	   1.2310000e-01,
	   1.2320000e-01,
	   1.2310000e-01,
	   1.2440000e-01,
	   1.2300000e-01,
	   1.2300000e-01,
	   1.2530000e-01,
	   1.2520000e-01,
	   1.2230000e-01,
	   1.2510000e-01,
	   1.2670000e-01,
	   1.2530000e-01,
	   1.2760000e-01,
	   1.2890000e-01,
	   1.2560000e-01,
	   1.2730000e-01,
	   1.2840000e-01,
	   1.2690000e-01,
	   1.2760000e-01,
	   1.2880000e-01,
	   1.3000000e-01,
	   1.3240000e-01,
	   1.3210000e-01,
	   1.3320000e-01,
	   1.3780000e-01,
	   1.3820000e-01,
	   1.3850000e-01,
	   1.4670000e-01,
	   1.4810000e-01,
	   1.4950000e-01,
	   1.5690000e-01,
	   1.6230000e-01,
	   1.6400000e-01,
	   1.7360000e-01,
	   1.8120000e-01,
	   1.8990000e-01,
	   1.9750000e-01,
	   2.0720000e-01,
	   2.1450000e-01,
	   2.2890000e-01,
	   2.3530000e-01,
	   2.4960000e-01,
	   2.6000000e-01,
	   2.7110000e-01,
	   2.8020000e-01,
	   2.9700000e-01,
	   3.0270000e-01,
	   3.1500000e-01,
	   3.2480000e-01,
	   3.3360000e-01,
	   3.3850000e-01,
	   3.5070000e-01,
	   3.5610000e-01,
	   3.6580000e-01,
	   3.7240000e-01,
	   3.7860000e-01,
	   3.8250000e-01,
	   3.9110000e-01,
	   3.9400000e-01,
	   4.0280000e-01,
	   4.0550000e-01,
	   4.0810000e-01,
	   4.1450000e-01,
	   4.2190000e-01,
	   4.2110000e-01,
	   4.3070000e-01,
	   4.3930000e-01,
	   4.4250000e-01,
	   4.4720000e-01,
	   4.5860000e-01,
	   4.6230000e-01,
	   4.7430000e-01,
	   4.8440000e-01,
	   4.9250000e-01,
	   5.0240000e-01,
	   5.1580000e-01,
	   5.2280000e-01,
	   5.3750000e-01,
	   5.4460000e-01,
	   5.5020000e-01,
	   5.6410000e-01,
	   5.7570000e-01,
	   5.7680000e-01,
	   5.9170000e-01,
	   5.9860000e-01,
	   6.0070000e-01,
	   6.0580000e-01,
	   6.1770000e-01,
	   6.2560000e-01,
	   6.3720000e-01,
	   6.4010000e-01,
	   6.4330000e-01,
	   6.5230000e-01,
	   6.5750000e-01,
	   6.5610000e-01,
	   6.6460000e-01,
	   6.6820000e-01,
	   6.6860000e-01,
	   6.7220000e-01,
	   6.7540000e-01,
	   6.7450000e-01,
	   6.8090000e-01,
	   6.8490000e-01,
	   6.8320000e-01,
	   6.8510000e-01,
	   6.8600000e-01,
	   6.8700000e-01,
	   6.9200000e-01,
	   6.8860000e-01,
	   6.8810000e-01,
	   6.9590000e-01,
	   6.9330000e-01,
	   6.8960000e-01,
	   6.9430000e-01,
	   6.9350000e-01,
	   6.9430000e-01,
	   6.9740000e-01,
	   6.9660000e-01,
	   6.9740000e-01,
	   7.0010000e-01,
	   6.9800000e-01,
	   7.0090000e-01,
	   7.0130000e-01,
	   6.9720000e-01,
	   7.0090000e-01,
	   7.0530000e-01,
	   6.9850000e-01,
	   7.0200000e-01,
	   7.0610000e-01,
	   6.9950000e-01,
	   7.0190000e-01,
	   7.0480000e-01,
	   7.0280000e-01,
	   7.0500000e-01,
	   7.0650000e-01,
	   7.0360000e-01,
	   7.0520000e-01,
	   7.0510000e-01,
	   7.0570000e-01,
	   7.0960000e-01,
	   7.0870000e-01,
	   7.0320000e-01,
	   7.0790000e-01,
	   7.0490000e-01,
	   7.0200000e-01,
	   7.0640000e-01,
	   7.0620000e-01,
	   7.0050000e-01,
	   7.0400000e-01,
	   7.0610000e-01,
	   7.0460000e-01,
	   7.0510000e-01,
	   7.0720000e-01,
	   7.0500000e-01,
	   7.0860000e-01,
	   7.0640000e-01,
	   7.0740000e-01,
	   7.1060000e-01,
	   7.0820000e-01,
	   7.0940000e-01,
	   7.1330000e-01,
	   7.0970000e-01,
	   7.0860000e-01,
	   7.1270000e-01,
	   7.0980000e-01,
	   7.0750000e-01,
	   7.1280000e-01,
	   7.0850000e-01,
	   7.0460000e-01,
	   7.1120000e-01,
	   7.1040000e-01,
	   7.1260000e-01,
	   7.1290000e-01,
	   7.0710000e-01,
	   7.1040000e-01,
	   7.1180000e-01,
	   7.0660000e-01,
	   7.0920000e-01,
	   7.1170000e-01,
	   7.0670000e-01,
	   7.1000000e-01,
	   7.1180000e-01,
	   7.0690000e-01,
	   7.1160000e-01,
	   7.1450000e-01,
	   7.1040000e-01,
	   7.1170000e-01,
	   7.1020000e-01,
	   7.0890000e-01,
	   7.1180000e-01,
	   7.1010000e-01,
	   7.0820000e-01,
	   7.1200000e-01,
	   7.0710000e-01,
	   7.0420000e-01,
	   7.0920000e-01,
	   7.0770000e-01,
	   7.0840000e-01,
	   7.1390000e-01,
	   7.0910000e-01,
	   7.0850000e-01,
	   7.1540000e-01,
	   7.1530000e-01,
	   7.1190000e-01,
	   7.1390000e-01,
	   7.0960000e-01,
	   7.1130000e-01,
	   7.1190000e-01,
	   7.1030000e-01,
	   7.1340000e-01,
	   7.1410000e-01,
	   7.0810000e-01,
	   7.1020000e-01,
	   7.1060000e-01,
	   7.0360000e-01,
	   7.0640000e-01,
	   7.1540000e-01,
	   7.1220000e-01,
	   7.1730000e-01,
	   7.1630000e-01,
	   7.1320000e-01,
	   7.2100000e-01,
	   7.2080000e-01,
	   7.1360000e-01,
	   7.1770000e-01,
	   7.1880000e-01,
	   7.1630000e-01,
	   7.1780000e-01,
	   7.1570000e-01,
	   7.1520000e-01,
	   7.1830000e-01,
	   7.1240000e-01,
	   7.1340000e-01,
	   7.1810000e-01,
	   7.1340000e-01,
	   7.1510000e-01,
	   7.2010000e-01,
	   7.1670000e-01,
	   7.1500000e-01,
	   7.2010000e-01,
	   7.1690000e-01,
	   7.1780000e-01,
	   7.2010000e-01,
	   7.1610000e-01,
	   7.1720000e-01,
	   7.1830000e-01,
	   7.1640000e-01,
	   7.2110000e-01,
	   7.2030000e-01,
	   7.1980000e-01,
	   7.2400000e-01,
	   7.2510000e-01,
	   7.1980000e-01,
	   7.2310000e-01,
	   7.2380000e-01,
	   7.2190000e-01,
	   7.2570000e-01,
	   7.2550000e-01,
	   7.1880000e-01,
	   7.2270000e-01,
	   7.2500000e-01,
	   7.2230000e-01,
	   7.2270000e-01,
	   7.2330000e-01,
	   7.2240000e-01,
	   7.2900000e-01,
	   7.2540000e-01,
	   7.2090000e-01,
	   7.2400000e-01,
	   7.2130000e-01,
	   7.2090000e-01,
	   7.2730000e-01,
	   7.2420000e-01,
	   7.2240000e-01,
	   7.2770000e-01,
	   7.2550000e-01,
	   7.2450000e-01,
	   7.2950000e-01,
	   7.2850000e-01,
	   7.2760000e-01,
	   7.2920000e-01,
	   7.2220000e-01,
	   7.2500000e-01,
	   7.3030000e-01,
	   7.2670000e-01,
	   7.2520000e-01,
	   7.2540000e-01,
	   7.2310000e-01,
	   7.2570000e-01,
	   7.2680000e-01,
	   7.2260000e-01,
	   7.2540000e-01,
	   7.2800000e-01,
	   7.2690000e-01,
	   7.3030000e-01,
	   7.2890000e-01,
	   7.2620000e-01,
	   7.3100000e-01,
	   7.2370000e-01,
	   7.2070000e-01,
	   7.2540000e-01,
	   7.2520000e-01,
	   7.2080000e-01,
	   7.2700000e-01,
	   7.2650000e-01,
	   7.2510000e-01,
	   7.2760000e-01,
	   7.2720000e-01,
	   7.2400000e-01,
	   7.3080000e-01,
	   7.3140000e-01,
	   7.2690000e-01,
	   7.3230000e-01,
	   7.2920000e-01,
	   7.3140000e-01,
	   7.3310000e-01,
	   7.3230000e-01,
	   7.3480000e-01,
	   7.3560000e-01,
	   7.3070000e-01,
	   7.2560000e-01,
	   7.3290000e-01,
	   7.2880000e-01,
	   7.2940000e-01,
	   7.3280000e-01,
	   7.2520000e-01,
	   7.2460000e-01
	])

	xvalues = np.empty(421)
	for i in range(0, 421):
		xvalues[i] = i + 380

	# 5GY8/10
	gy8 = np.array([
	   7.2700000e-02,
	   6.7900000e-02,
	   7.0600000e-02,
	   7.3000000e-02,
	   7.0700000e-02,
	   7.0900000e-02,
	   7.3100000e-02,
	   7.4500000e-02,
	   7.4400000e-02,
	   7.5300000e-02,
	   7.8400000e-02,
	   7.9500000e-02,
	   7.7300000e-02,
	   7.8100000e-02,
	   7.9700000e-02,
	   7.7800000e-02,
	   7.7900000e-02,
	   8.0800000e-02,
	   7.9100000e-02,
	   7.7800000e-02,
	   7.9600000e-02,
	   8.0900000e-02,
	   7.9400000e-02,
	   7.9300000e-02,
	   8.0400000e-02,
	   8.1600000e-02,
	   7.9600000e-02,
	   7.9700000e-02,
	   8.1500000e-02,
	   8.2400000e-02,
	   8.1000000e-02,
	   8.0900000e-02,
	   8.1300000e-02,
	   8.0500000e-02,
	   8.1200000e-02,
	   8.3100000e-02,
	   8.0800000e-02,
	   7.9900000e-02,
	   8.1900000e-02,
	   8.2400000e-02,
	   8.1800000e-02,
	   8.3800000e-02,
	   8.3300000e-02,
	   8.1200000e-02,
	   8.0700000e-02,
	   7.9900000e-02,
	   8.0900000e-02,
	   8.1700000e-02,
	   8.2200000e-02,
	   8.4000000e-02,
	   8.3500000e-02,
	   8.2000000e-02,
	   8.3400000e-02,
	   8.5100000e-02,
	   8.3000000e-02,
	   8.3200000e-02,
	   8.3500000e-02,
	   8.2900000e-02,
	   8.2900000e-02,
	   8.4300000e-02,
	   8.3700000e-02,
	   8.4200000e-02,
	   8.4700000e-02,
	   8.4600000e-02,
	   8.3100000e-02,
	   8.1200000e-02,
	   8.3500000e-02,
	   8.5700000e-02,
	   8.3800000e-02,
	   8.4100000e-02,
	   8.6500000e-02,
	   8.7200000e-02,
	   8.4300000e-02,
	   8.6300000e-02,
	   8.8300000e-02,
	   8.7000000e-02,
	   8.7400000e-02,
	   9.0100000e-02,
	   9.1400000e-02,
	   9.3600000e-02,
	   9.6000000e-02,
	   9.7100000e-02,
	   9.7400000e-02,
	   1.0020000e-01,
	   1.0330000e-01,
	   1.0810000e-01,
	   1.1000000e-01,
	   1.1340000e-01,
	   1.1700000e-01,
	   1.2070000e-01,
	   1.2380000e-01,
	   1.3180000e-01,
	   1.3570000e-01,
	   1.3970000e-01,
	   1.4480000e-01,
	   1.5250000e-01,
	   1.5660000e-01,
	   1.6530000e-01,
	   1.7240000e-01,
	   1.8240000e-01,
	   1.8810000e-01,
	   1.9850000e-01,
	   2.0630000e-01,
	   2.1800000e-01,
	   2.2350000e-01,
	   2.3410000e-01,
	   2.4280000e-01,
	   2.5570000e-01,
	   2.6420000e-01,
	   2.7840000e-01,
	   2.8600000e-01,
	   2.9900000e-01,
	   3.0840000e-01,
	   3.2100000e-01,
	   3.2800000e-01,
	   3.4390000e-01,
	   3.5470000e-01,
	   3.6660000e-01,
	   3.7410000e-01,
	   3.9010000e-01,
	   3.9800000e-01,
	   4.1030000e-01,
	   4.2020000e-01,
	   4.3260000e-01,
	   4.3990000e-01,
	   4.5020000e-01,
	   4.5710000e-01,
	   4.6920000e-01,
	   4.7560000e-01,
	   4.8510000e-01,
	   4.9420000e-01,
	   5.0390000e-01,
	   5.0720000e-01,
	   5.1670000e-01,
	   5.2420000e-01,
	   5.2990000e-01,
	   5.3520000e-01,
	   5.4280000e-01,
	   5.4510000e-01,
	   5.5050000e-01,
	   5.5480000e-01,
	   5.5830000e-01,
	   5.5970000e-01,
	   5.6170000e-01,
	   5.6440000e-01,
	   5.6950000e-01,
	   5.7070000e-01,
	   5.7160000e-01,
	   5.7570000e-01,
	   5.7700000e-01,
	   5.7630000e-01,
	   5.7980000e-01,
	   5.8070000e-01,
	   5.8030000e-01,
	   5.8190000e-01,
	   5.8320000e-01,
	   5.8200000e-01,
	   5.8050000e-01,
	   5.8300000e-01,
	   5.8270000e-01,
	   5.8150000e-01,
	   5.8370000e-01,
	   5.8310000e-01,
	   5.8340000e-01,
	   5.8270000e-01,
	   5.8100000e-01,
	   5.8140000e-01,
	   5.7840000e-01,
	   5.7820000e-01,
	   5.8130000e-01,
	   5.7990000e-01,
	   5.7530000e-01,
	   5.7760000e-01,
	   5.7840000e-01,
	   5.7350000e-01,
	   5.7080000e-01,
	   5.7140000e-01,
	   5.6750000e-01,
	   5.6550000e-01,
	   5.6120000e-01,
	   5.5900000e-01,
	   5.6140000e-01,
	   5.6380000e-01,
	   5.6030000e-01,
	   5.5970000e-01,
	   5.5830000e-01,
	   5.5500000e-01,
	   5.5310000e-01,
	   5.5420000e-01,
	   5.4960000e-01,
	   5.4560000e-01,
	   5.4720000e-01,
	   5.4490000e-01,
	   5.3920000e-01,
	   5.3800000e-01,
	   5.3610000e-01,
	   5.3460000e-01,
	   5.3150000e-01,
	   5.2870000e-01,
	   5.2540000e-01,
	   5.2340000e-01,
	   5.1910000e-01,
	   5.1960000e-01,
	   5.1670000e-01,
	   5.1180000e-01,
	   5.0610000e-01,
	   5.0560000e-01,
	   4.9740000e-01,
	   4.9510000e-01,
	   4.9340000e-01,
	   4.8950000e-01,
	   4.8400000e-01,
	   4.8160000e-01,
	   4.7440000e-01,
	   4.7010000e-01,
	   4.6390000e-01,
	   4.6200000e-01,
	   4.5610000e-01,
	   4.5300000e-01,
	   4.4610000e-01,
	   4.4330000e-01,
	   4.3830000e-01,
	   4.3250000e-01,
	   4.2730000e-01,
	   4.2520000e-01,
	   4.1900000e-01,
	   4.1470000e-01,
	   4.1200000e-01,
	   4.0760000e-01,
	   4.0220000e-01,
	   4.0200000e-01,
	   3.9640000e-01,
	   3.9280000e-01,
	   3.9110000e-01,
	   3.9000000e-01,
	   3.8450000e-01,
	   3.8240000e-01,
	   3.7900000e-01,
	   3.7820000e-01,
	   3.7630000e-01,
	   3.7380000e-01,
	   3.7340000e-01,
	   3.7240000e-01,
	   3.6630000e-01,
	   3.6620000e-01,
	   3.6690000e-01,
	   3.6390000e-01,
	   3.6130000e-01,
	   3.6290000e-01,
	   3.6120000e-01,
	   3.5980000e-01,
	   3.5810000e-01,
	   3.5760000e-01,
	   3.5620000e-01,
	   3.5560000e-01,
	   3.5400000e-01,
	   3.5230000e-01,
	   3.5040000e-01,
	   3.4940000e-01,
	   3.4830000e-01,
	   3.4610000e-01,
	   3.4260000e-01,
	   3.4490000e-01,
	   3.4470000e-01,
	   3.4080000e-01,
	   3.3870000e-01,
	   3.4100000e-01,
	   3.3790000e-01,
	   3.3660000e-01,
	   3.3650000e-01,
	   3.3650000e-01,
	   3.3500000e-01,
	   3.3460000e-01,
	   3.3220000e-01,
	   3.3130000e-01,
	   3.3150000e-01,
	   3.3050000e-01,
	   3.3060000e-01,
	   3.3020000e-01,
	   3.3030000e-01,
	   3.3200000e-01,
	   3.3230000e-01,
	   3.2980000e-01,
	   3.3060000e-01,
	   3.3070000e-01,
	   3.2750000e-01,
	   3.2910000e-01,
	   3.3000000e-01,
	   3.2930000e-01,
	   3.3100000e-01,
	   3.3380000e-01,
	   3.3580000e-01,
	   3.3620000e-01,
	   3.3630000e-01,
	   3.3880000e-01,
	   3.4110000e-01,
	   3.3940000e-01,
	   3.4040000e-01,
	   3.4400000e-01,
	   3.4460000e-01,
	   3.4460000e-01,
	   3.4580000e-01,
	   3.4680000e-01,
	   3.4770000e-01,
	   3.4940000e-01,
	   3.5080000e-01,
	   3.5040000e-01,
	   3.5140000e-01,
	   3.5230000e-01,
	   3.5600000e-01,
	   3.6080000e-01,
	   3.6220000e-01,
	   3.6160000e-01,
	   3.6460000e-01,
	   3.6800000e-01,
	   3.6890000e-01,
	   3.6920000e-01,
	   3.7000000e-01,
	   3.7160000e-01,
	   3.7420000e-01,
	   3.7450000e-01,
	   3.7710000e-01,
	   3.8020000e-01,
	   3.7870000e-01,
	   3.8130000e-01,
	   3.8250000e-01,
	   3.8100000e-01,
	   3.8250000e-01,
	   3.8490000e-01,
	   3.8670000e-01,
	   3.8630000e-01,
	   3.8670000e-01,
	   3.8570000e-01,
	   3.8490000e-01,
	   3.8500000e-01,
	   3.8280000e-01,
	   3.8340000e-01,
	   3.8140000e-01,
	   3.8030000e-01,
	   3.8080000e-01,
	   3.8070000e-01,
	   3.7940000e-01,
	   3.8100000e-01,
	   3.8180000e-01,
	   3.7890000e-01,
	   3.7820000e-01,
	   3.7890000e-01,
	   3.7700000e-01,
	   3.7750000e-01,
	   3.7880000e-01,
	   3.7840000e-01,
	   3.7870000e-01,
	   3.8120000e-01,
	   3.7930000e-01,
	   3.7940000e-01,
	   3.8280000e-01,
	   3.8430000e-01,
	   3.8470000e-01,
	   3.8240000e-01,
	   3.8490000e-01,
	   3.8960000e-01,
	   3.9190000e-01,
	   3.8920000e-01,
	   3.9340000e-01,
	   3.9560000e-01,
	   3.9550000e-01,
	   3.9790000e-01,
	   4.0260000e-01,
	   4.0180000e-01,
	   4.0560000e-01,
	   4.0840000e-01,
	   4.1040000e-01,
	   4.1150000e-01,
	   4.1330000e-01,
	   4.1640000e-01,
	   4.2000000e-01,
	   4.1970000e-01,
	   4.2300000e-01,
	   4.2620000e-01,
	   4.2770000e-01,
	   4.2420000e-01,
	   4.2650000e-01,
	   4.2730000e-01,
	   4.3040000e-01,
	   4.3280000e-01,
	   4.3570000e-01,
	   4.3440000e-01,
	   4.3660000e-01,
	   4.4000000e-01,
	   4.4290000e-01,
	   4.4190000e-01,
	   4.4400000e-01,
	   4.4490000e-01,
	   4.4850000e-01,
	   4.5320000e-01,
	   4.5640000e-01,
	   4.5580000e-01,
	   4.5820000e-01,
	   4.6120000e-01,
	   4.6500000e-01,
	   4.6560000e-01,
	   4.6720000e-01,
	   4.7070000e-01,
	   4.7520000e-01,
	   4.7500000e-01,
	   4.7830000e-01,
	   4.8480000e-01,
	   4.8950000e-01,
	   4.9420000e-01,
	   4.9590000e-01,
	   4.9850000e-01,
	   5.0590000e-01,
	   5.0880000e-01,
	   5.1010000e-01,
	   5.1160000e-01,
	   5.1370000e-01,
	   5.1710000e-01,
	   5.2900000e-01,
	   5.2900000e-01,
	   5.3070000e-01,
	   5.3310000e-01
	])

	# 5B4-7/6
	b4 = np.array([
	   9.0700000e-02,
	   8.7700000e-02,
	   8.6800000e-02,
	   8.8000000e-02,
	   8.9000000e-02,
	   9.3100000e-02,
	   9.4800000e-02,
	   9.7100000e-02,
	   1.0050000e-01,
	   1.0430000e-01,
	   1.0670000e-01,
	   1.1010000e-01,
	   1.1290000e-01,
	   1.1690000e-01,
	   1.1640000e-01,
	   1.1860000e-01,
	   1.2330000e-01,
	   1.2560000e-01,
	   1.2600000e-01,
	   1.2910000e-01,
	   1.3090000e-01,
	   1.3140000e-01,
	   1.3270000e-01,
	   1.3560000e-01,
	   1.3620000e-01,
	   1.3830000e-01,
	   1.3940000e-01,
	   1.4170000e-01,
	   1.4160000e-01,
	   1.4260000e-01,
	   1.4530000e-01,
	   1.4490000e-01,
	   1.4310000e-01,
	   1.4440000e-01,
	   1.4570000e-01,
	   1.4620000e-01,
	   1.4530000e-01,
	   1.4670000e-01,
	   1.4610000e-01,
	   1.4800000e-01,
	   1.4820000e-01,
	   1.4940000e-01,
	   1.4960000e-01,
	   1.5010000e-01,
	   1.5200000e-01,
	   1.5410000e-01,
	   1.5270000e-01,
	   1.5490000e-01,
	   1.5620000e-01,
	   1.5560000e-01,
	   1.5720000e-01,
	   1.6000000e-01,
	   1.6070000e-01,
	   1.6120000e-01,
	   1.6400000e-01,
	   1.6690000e-01,
	   1.6670000e-01,
	   1.6770000e-01,
	   1.7080000e-01,
	   1.7290000e-01,
	   1.7290000e-01,
	   1.7390000e-01,
	   1.7630000e-01,
	   1.7710000e-01,
	   1.7720000e-01,
	   1.7780000e-01,
	   1.8080000e-01,
	   1.8160000e-01,
	   1.8290000e-01,
	   1.8720000e-01,
	   1.8730000e-01,
	   1.8690000e-01,
	   1.8990000e-01,
	   1.9180000e-01,
	   1.9210000e-01,
	   1.9370000e-01,
	   1.9720000e-01,
	   1.9900000e-01,
	   1.9970000e-01,
	   2.0310000e-01,
	   2.0650000e-01,
	   2.0790000e-01,
	   2.0880000e-01,
	   2.1250000e-01,
	   2.1460000e-01,
	   2.1440000e-01,
	   2.1700000e-01,
	   2.1890000e-01,
	   2.1890000e-01,
	   2.2140000e-01,
	   2.2400000e-01,
	   2.2350000e-01,
	   2.2350000e-01,
	   2.2540000e-01,
	   2.2720000e-01,
	   2.2740000e-01,
	   2.2720000e-01,
	   2.2860000e-01,
	   2.2910000e-01,
	   2.2960000e-01,
	   2.2960000e-01,
	   2.3070000e-01,
	   2.2900000e-01,
	   2.2830000e-01,
	   2.2940000e-01,
	   2.2910000e-01,
	   2.2710000e-01,
	   2.2790000e-01,
	   2.2850000e-01,
	   2.2580000e-01,
	   2.2470000e-01,
	   2.2490000e-01,
	   2.2350000e-01,
	   2.2270000e-01,
	   2.2250000e-01,
	   2.2100000e-01,
	   2.1870000e-01,
	   2.1740000e-01,
	   2.1870000e-01,
	   2.1770000e-01,
	   2.1540000e-01,
	   2.1190000e-01,
	   2.1230000e-01,
	   2.1000000e-01,
	   2.0850000e-01,
	   2.0710000e-01,
	   2.0560000e-01,
	   2.0200000e-01,
	   2.0260000e-01,
	   2.0020000e-01,
	   1.9710000e-01,
	   1.9390000e-01,
	   1.9310000e-01,
	   1.9040000e-01,
	   1.8740000e-01,
	   1.8430000e-01,
	   1.8440000e-01,
	   1.8070000e-01,
	   1.7520000e-01,
	   1.7420000e-01,
	   1.7450000e-01,
	   1.6990000e-01,
	   1.6690000e-01,
	   1.6490000e-01,
	   1.6170000e-01,
	   1.5880000e-01,
	   1.5710000e-01,
	   1.5400000e-01,
	   1.5060000e-01,
	   1.4800000e-01,
	   1.4640000e-01,
	   1.4330000e-01,
	   1.4040000e-01,
	   1.3810000e-01,
	   1.3650000e-01,
	   1.3230000e-01,
	   1.2950000e-01,
	   1.2710000e-01,
	   1.2370000e-01,
	   1.2130000e-01,
	   1.2080000e-01,
	   1.1830000e-01,
	   1.1460000e-01,
	   1.1170000e-01,
	   1.1270000e-01,
	   1.1000000e-01,
	   1.0650000e-01,
	   1.0360000e-01,
	   1.0330000e-01,
	   1.0110000e-01,
	   9.8000000e-02,
	   9.5000000e-02,
	   9.4200000e-02,
	   9.2400000e-02,
	   9.1400000e-02,
	   8.8800000e-02,
	   8.5600000e-02,
	   8.2100000e-02,
	   8.1800000e-02,
	   7.7300000e-02,
	   7.2100000e-02,
	   7.3100000e-02,
	   7.7400000e-02,
	   7.6600000e-02,
	   7.6500000e-02,
	   7.2500000e-02,
	   7.2000000e-02,
	   7.2300000e-02,
	   7.0800000e-02,
	   6.9100000e-02,
	   6.9100000e-02,
	   6.8300000e-02,
	   6.7300000e-02,
	   6.5400000e-02,
	   6.6400000e-02,
	   6.5700000e-02,
	   6.4500000e-02,
	   6.3700000e-02,
	   6.4900000e-02,
	   6.4200000e-02,
	   6.2900000e-02,
	   6.3200000e-02,
	   6.2500000e-02,
	   6.0900000e-02,
	   6.1800000e-02,
	   6.2200000e-02,
	   6.0600000e-02,
	   6.0200000e-02,
	   6.1200000e-02,
	   6.1200000e-02,
	   6.0300000e-02,
	   6.1400000e-02,
	   6.1100000e-02,
	   5.9300000e-02,
	   5.9100000e-02,
	   5.9100000e-02,
	   5.8900000e-02,
	   5.8300000e-02,
	   5.9000000e-02,
	   6.0200000e-02,
	   5.8100000e-02,
	   5.6700000e-02,
	   5.8400000e-02,
	   5.9300000e-02,
	   5.7100000e-02,
	   5.6900000e-02,
	   5.8500000e-02,
	   5.8300000e-02,
	   5.7300000e-02,
	   5.7500000e-02,
	   5.7700000e-02,
	   5.7900000e-02,
	   5.7200000e-02,
	   5.8000000e-02,
	   5.7700000e-02,
	   5.7500000e-02,
	   5.8400000e-02,
	   5.8500000e-02,
	   5.6900000e-02,
	   5.7700000e-02,
	   5.9400000e-02,
	   5.6000000e-02,
	   5.4900000e-02,
	   5.6900000e-02,
	   5.8100000e-02,
	   5.6200000e-02,
	   5.7100000e-02,
	   5.7900000e-02,
	   5.8200000e-02,
	   5.6200000e-02,
	   5.7700000e-02,
	   5.7400000e-02,
	   5.6600000e-02,
	   5.6600000e-02,
	   5.8700000e-02,
	   5.7700000e-02,
	   5.6400000e-02,
	   5.6400000e-02,
	   5.8100000e-02,
	   5.8100000e-02,
	   5.7300000e-02,
	   5.7700000e-02,
	   5.7400000e-02,
	   5.8100000e-02,
	   5.9400000e-02,
	   5.9400000e-02,
	   5.7900000e-02,
	   5.8700000e-02,
	   5.9400000e-02,
	   5.9700000e-02,
	   5.8800000e-02,
	   5.8100000e-02,
	   5.9400000e-02,
	   5.8200000e-02,
	   5.7400000e-02,
	   6.0100000e-02,
	   6.0500000e-02,
	   5.9700000e-02,
	   6.1200000e-02,
	   6.1800000e-02,
	   6.0700000e-02,
	   6.0500000e-02,
	   6.1800000e-02,
	   6.2000000e-02,
	   6.1000000e-02,
	   5.9600000e-02,
	   5.9800000e-02,
	   5.8700000e-02,
	   5.8200000e-02,
	   6.0100000e-02,
	   6.1200000e-02,
	   6.0900000e-02,
	   6.2100000e-02,
	   6.3100000e-02,
	   6.1900000e-02,
	   6.1400000e-02,
	   6.2100000e-02,
	   6.1500000e-02,
	   6.1100000e-02,
	   6.2000000e-02,
	   6.3000000e-02,
	   6.3400000e-02,
	   6.2500000e-02,
	   6.2100000e-02,
	   6.2400000e-02,
	   6.0900000e-02,
	   6.0100000e-02,
	   5.8800000e-02,
	   5.6400000e-02,
	   5.7300000e-02,
	   6.4000000e-02,
	   6.3000000e-02,
	   6.2900000e-02,
	   6.3600000e-02,
	   6.1900000e-02,
	   6.2000000e-02,
	   6.3400000e-02,
	   6.2100000e-02,
	   6.1000000e-02,
	   6.2200000e-02,
	   6.2900000e-02,
	   6.2100000e-02,
	   6.2600000e-02,
	   6.2600000e-02,
	   6.3300000e-02,
	   6.3100000e-02,
	   6.3300000e-02,
	   6.4000000e-02,
	   6.4500000e-02,
	   6.3200000e-02,
	   6.5800000e-02,
	   6.6600000e-02,
	   6.4800000e-02,
	   6.4700000e-02,
	   6.6600000e-02,
	   6.6900000e-02,
	   6.6800000e-02,
	   6.6000000e-02,
	   6.6500000e-02,
	   6.7800000e-02,
	   6.8000000e-02,
	   6.8500000e-02,
	   6.8900000e-02,
	   6.9100000e-02,
	   7.0500000e-02,
	   7.2300000e-02,
	   7.0800000e-02,
	   7.2200000e-02,
	   7.3700000e-02,
	   7.5000000e-02,
	   7.4500000e-02,
	   7.5500000e-02,
	   7.5700000e-02,
	   7.6100000e-02,
	   7.6200000e-02,
	   7.8000000e-02,
	   7.8400000e-02,
	   7.9700000e-02,
	   7.9900000e-02,
	   8.0800000e-02,
	   8.1100000e-02,
	   8.2000000e-02,
	   8.3500000e-02,
	   8.5300000e-02,
	   8.5300000e-02,
	   8.6900000e-02,
	   8.8500000e-02,
	   9.0600000e-02,
	   9.2200000e-02,
	   9.4700000e-02,
	   9.6100000e-02,
	   9.7200000e-02,
	   1.0050000e-01,
	   1.0150000e-01,
	   1.0240000e-01,
	   1.0380000e-01,
	   1.0650000e-01,
	   1.0870000e-01,
	   1.0930000e-01,
	   1.1110000e-01,
	   1.1290000e-01,
	   1.1280000e-01,
	   1.1290000e-01,
	   1.1580000e-01,
	   1.1680000e-01,
	   1.1660000e-01,
	   1.1840000e-01,
	   1.2150000e-01,
	   1.2210000e-01,
	   1.2320000e-01,
	   1.2330000e-01,
	   1.2360000e-01,
	   1.2230000e-01,
	   1.2260000e-01,
	   1.2400000e-01,
	   1.2350000e-01,
	   1.2320000e-01,
	   1.2510000e-01,
	   1.2570000e-01,
	   1.2600000e-01,
	   1.2710000e-01,
	   1.2640000e-01,
	   1.2360000e-01,
	   1.2700000e-01,
	   1.2900000e-01,
	   1.2920000e-01,
	   1.2720000e-01,
	   1.2650000e-01,
	   1.2770000e-01,
	   1.2920000e-01,
	   1.2890000e-01,
	   1.3080000e-01,
	   1.3250000e-01,
	   1.3220000e-01,
	   1.3320000e-01,
	   1.3620000e-01,
	   1.3710000e-01,
	   1.3690000e-01,
	   1.3630000e-01,
	   1.3890000e-01,
	   1.3960000e-01
	])

	b5 = np.array([
	   1.0170000e-01,
	   1.0280000e-01,
	   1.0690000e-01,
	   1.1290000e-01,
	   1.1250000e-01,
	   1.1730000e-01,
	   1.2380000e-01,
	   1.3000000e-01,
	   1.3250000e-01,
	   1.4030000e-01,
	   1.4550000e-01,
	   1.5330000e-01,
	   1.5820000e-01,
	   1.6690000e-01,
	   1.7220000e-01,
	   1.7960000e-01,
	   1.8430000e-01,
	   1.9320000e-01,
	   1.9610000e-01,
	   2.0000000e-01,
	   2.0620000e-01,
	   2.1160000e-01,
	   2.1100000e-01,
	   2.1580000e-01,
	   2.2020000e-01,
	   2.2340000e-01,
	   2.2430000e-01,
	   2.2920000e-01,
	   2.2980000e-01,
	   2.3120000e-01,
	   2.3340000e-01,
	   2.3530000e-01,
	   2.3520000e-01,
	   2.3480000e-01,
	   2.3620000e-01,
	   2.3720000e-01,
	   2.3480000e-01,
	   2.3610000e-01,
	   2.3870000e-01,
	   2.4230000e-01,
	   2.4230000e-01,
	   2.4390000e-01,
	   2.4470000e-01,
	   2.4550000e-01,
	   2.4620000e-01,
	   2.4580000e-01,
	   2.4510000e-01,
	   2.4720000e-01,
	   2.4840000e-01,
	   2.5040000e-01,
	   2.5090000e-01,
	   2.5290000e-01,
	   2.5560000e-01,
	   2.5630000e-01,
	   2.5610000e-01,
	   2.5950000e-01,
	   2.6210000e-01,
	   2.6100000e-01,
	   2.6050000e-01,
	   2.6480000e-01,
	   2.6590000e-01,
	   2.6520000e-01,
	   2.6680000e-01,
	   2.6950000e-01,
	   2.7020000e-01,
	   2.7060000e-01,
	   2.7250000e-01,
	   2.7410000e-01,
	   2.7430000e-01,
	   2.7390000e-01,
	   2.7520000e-01,
	   2.7770000e-01,
	   2.7700000e-01,
	   2.7920000e-01,
	   2.7880000e-01,
	   2.7850000e-01,
	   2.8130000e-01,
	   2.8340000e-01,
	   2.8200000e-01,
	   2.8450000e-01,
	   2.8780000e-01,
	   2.8960000e-01,
	   2.8920000e-01,
	   2.9060000e-01,
	   2.9310000e-01,
	   2.9410000e-01,
	   2.9210000e-01,
	   2.9470000e-01,
	   2.9540000e-01,
	   2.9440000e-01,
	   2.9590000e-01,
	   2.9730000e-01,
	   2.9650000e-01,
	   2.9640000e-01,
	   2.9790000e-01,
	   2.9860000e-01,
	   2.9780000e-01,
	   2.9860000e-01,
	   3.0010000e-01,
	   3.0030000e-01,
	   2.9910000e-01,
	   2.9890000e-01,
	   2.9970000e-01,
	   2.9720000e-01,
	   2.9690000e-01,
	   2.9790000e-01,
	   2.9810000e-01,
	   2.9670000e-01,
	   2.9760000e-01,
	   2.9750000e-01,
	   2.9560000e-01,
	   2.9260000e-01,
	   2.9470000e-01,
	   2.9400000e-01,
	   2.9290000e-01,
	   2.9360000e-01,
	   2.9410000e-01,
	   2.9290000e-01,
	   2.9170000e-01,
	   2.9100000e-01,
	   2.9160000e-01,
	   2.9040000e-01,
	   2.9000000e-01,
	   2.8950000e-01,
	   2.8720000e-01,
	   2.8470000e-01,
	   2.8560000e-01,
	   2.8400000e-01,
	   2.8100000e-01,
	   2.8140000e-01,
	   2.8030000e-01,
	   2.7680000e-01,
	   2.7550000e-01,
	   2.7460000e-01,
	   2.7370000e-01,
	   2.7170000e-01,
	   2.6970000e-01,
	   2.6780000e-01,
	   2.6560000e-01,
	   2.6200000e-01,
	   2.6190000e-01,
	   2.5890000e-01,
	   2.5460000e-01,
	   2.5230000e-01,
	   2.5240000e-01,
	   2.4840000e-01,
	   2.4550000e-01,
	   2.4160000e-01,
	   2.3910000e-01,
	   2.3750000e-01,
	   2.3550000e-01,
	   2.3190000e-01,
	   2.2880000e-01,
	   2.2470000e-01,
	   2.2370000e-01,
	   2.1980000e-01,
	   2.1640000e-01,
	   2.1160000e-01,
	   2.0970000e-01,
	   2.0300000e-01,
	   1.9830000e-01,
	   1.9500000e-01,
	   1.9290000e-01,
	   1.8730000e-01,
	   1.8570000e-01,
	   1.8280000e-01,
	   1.8030000e-01,
	   1.7420000e-01,
	   1.7390000e-01,
	   1.6950000e-01,
	   1.6570000e-01,
	   1.6160000e-01,
	   1.6060000e-01,
	   1.5750000e-01,
	   1.5420000e-01,
	   1.5020000e-01,
	   1.4810000e-01,
	   1.4420000e-01,
	   1.4110000e-01,
	   1.3600000e-01,
	   1.3170000e-01,
	   1.2830000e-01,
	   1.2990000e-01,
	   1.2500000e-01,
	   1.2490000e-01,
	   1.2310000e-01,
	   1.2000000e-01,
	   1.1750000e-01,
	   1.1670000e-01,
	   1.1410000e-01,
	   1.1160000e-01,
	   1.1040000e-01,
	   1.0740000e-01,
	   1.0540000e-01,
	   1.0630000e-01,
	   1.0580000e-01,
	   1.0320000e-01,
	   1.0250000e-01,
	   1.0370000e-01,
	   1.0240000e-01,
	   9.9300000e-02,
	   1.0000000e-01,
	   1.0020000e-01,
	   9.7600000e-02,
	   9.5700000e-02,
	   9.5100000e-02,
	   9.5500000e-02,
	   9.3500000e-02,
	   9.2900000e-02,
	   9.4500000e-02,
	   9.3300000e-02,
	   9.1800000e-02,
	   9.1500000e-02,
	   9.0100000e-02,
	   8.9300000e-02,
	   8.9600000e-02,
	   9.0400000e-02,
	   8.7600000e-02,
	   8.6300000e-02,
	   8.6500000e-02,
	   8.7100000e-02,
	   8.5000000e-02,
	   8.3600000e-02,
	   8.5200000e-02,
	   8.4400000e-02,
	   8.2200000e-02,
	   8.3500000e-02,
	   8.4100000e-02,
	   8.3000000e-02,
	   8.2800000e-02,
	   8.4300000e-02,
	   8.3300000e-02,
	   8.2700000e-02,
	   8.3300000e-02,
	   8.4400000e-02,
	   8.3500000e-02,
	   8.2400000e-02,
	   8.3100000e-02,
	   8.3300000e-02,
	   8.1800000e-02,
	   8.3000000e-02,
	   8.2300000e-02,
	   8.0700000e-02,
	   8.1300000e-02,
	   8.3300000e-02,
	   8.2800000e-02,
	   8.1000000e-02,
	   8.2500000e-02,
	   8.3300000e-02,
	   8.2600000e-02,
	   8.1800000e-02,
	   8.2400000e-02,
	   8.3100000e-02,
	   8.2700000e-02,
	   8.2200000e-02,
	   8.2100000e-02,
	   8.1100000e-02,
	   8.1300000e-02,
	   8.2400000e-02,
	   8.3100000e-02,
	   8.1500000e-02,
	   8.1200000e-02,
	   8.3200000e-02,
	   8.4000000e-02,
	   8.2200000e-02,
	   8.2500000e-02,
	   8.2800000e-02,
	   8.3200000e-02,
	   8.4300000e-02,
	   8.3900000e-02,
	   8.3500000e-02,
	   8.4200000e-02,
	   8.4700000e-02,
	   8.3300000e-02,
	   8.3000000e-02,
	   8.3500000e-02,
	   8.5200000e-02,
	   8.4100000e-02,
	   8.3500000e-02,
	   8.5700000e-02,
	   8.5700000e-02,
	   8.4500000e-02,
	   8.5500000e-02,
	   8.5800000e-02,
	   8.5400000e-02,
	   8.3400000e-02,
	   8.4100000e-02,
	   8.2900000e-02,
	   8.2300000e-02,
	   8.2800000e-02,
	   8.5100000e-02,
	   8.6500000e-02,
	   8.5200000e-02,
	   8.5600000e-02,
	   8.6900000e-02,
	   8.5500000e-02,
	   8.4500000e-02,
	   8.5500000e-02,
	   8.6100000e-02,
	   8.6700000e-02,
	   8.7500000e-02,
	   8.6500000e-02,
	   8.4700000e-02,
	   8.5700000e-02,
	   8.6800000e-02,
	   8.5600000e-02,
	   8.3000000e-02,
	   8.0200000e-02,
	   7.9700000e-02,
	   8.2400000e-02,
	   8.7700000e-02,
	   8.5500000e-02,
	   8.5200000e-02,
	   8.4600000e-02,
	   8.6100000e-02,
	   8.6100000e-02,
	   8.5500000e-02,
	   8.7200000e-02,
	   8.7100000e-02,
	   8.5700000e-02,
	   8.6300000e-02,
	   8.6900000e-02,
	   8.5200000e-02,
	   8.5600000e-02,
	   8.6600000e-02,
	   8.6300000e-02,
	   8.5700000e-02,
	   8.5900000e-02,
	   8.6500000e-02,
	   8.7900000e-02,
	   8.6600000e-02,
	   8.7200000e-02,
	   8.6800000e-02,
	   8.7000000e-02,
	   8.7400000e-02,
	   8.7800000e-02,
	   8.8000000e-02,
	   8.9200000e-02,
	   9.0200000e-02,
	   9.0500000e-02,
	   8.9300000e-02,
	   9.1200000e-02,
	   9.2900000e-02,
	   9.3800000e-02,
	   9.3500000e-02,
	   9.5100000e-02,
	   9.6000000e-02,
	   9.7800000e-02,
	   9.9200000e-02,
	   1.0100000e-01,
	   1.0170000e-01,
	   1.0150000e-01,
	   1.0240000e-01,
	   1.0410000e-01,
	   1.0360000e-01,
	   1.0540000e-01,
	   1.0910000e-01,
	   1.1090000e-01,
	   1.1120000e-01,
	   1.1660000e-01,
	   1.1880000e-01,
	   1.2090000e-01,
	   1.2320000e-01,
	   1.2640000e-01,
	   1.2760000e-01,
	   1.3160000e-01,
	   1.3390000e-01,
	   1.3800000e-01,
	   1.4130000e-01,
	   1.4500000e-01,
	   1.4860000e-01,
	   1.5140000e-01,
	   1.5230000e-01,
	   1.5620000e-01,
	   1.5950000e-01,
	   1.6240000e-01,
	   1.6500000e-01,
	   1.6990000e-01,
	   1.7140000e-01,
	   1.7450000e-01,
	   1.7620000e-01,
	   1.7830000e-01,
	   1.7970000e-01,
	   1.8500000e-01,
	   1.8910000e-01,
	   1.9010000e-01,
	   1.8840000e-01,
	   1.9050000e-01,
	   1.9380000e-01,
	   1.9370000e-01,
	   1.9380000e-01,
	   1.9450000e-01,
	   1.9520000e-01,
	   1.9560000e-01,
	   1.9800000e-01,
	   1.9870000e-01,
	   1.9750000e-01,
	   1.9880000e-01,
	   2.0070000e-01,
	   1.9920000e-01,
	   2.0030000e-01,
	   2.0020000e-01,
	   2.0060000e-01,
	   2.0420000e-01,
	   2.0440000e-01,
	   2.0420000e-01,
	   2.0450000e-01,
	   2.0550000e-01,
	   2.0760000e-01,
	   2.0980000e-01,
	   2.0980000e-01,
	   2.1010000e-01,
	   2.1190000e-01,
	   2.1340000e-01,
	   2.1210000e-01,
	   2.1070000e-01,
	   2.1230000e-01,
	   2.1580000e-01,
	   2.1680000e-01,
	   2.1790000e-01,
	   2.1920000e-01
	])

	b6 = np.array([
	   1.2370000e-01,
	   1.2890000e-01,
	   1.3430000e-01,
	   1.4120000e-01,
	   1.4270000e-01,
	   1.4870000e-01,
	   1.5720000e-01,
	   1.6710000e-01,
	   1.7290000e-01,
	   1.8120000e-01,
	   1.8970000e-01,
	   2.0200000e-01,
	   2.0880000e-01,
	   2.2130000e-01,
	   2.3010000e-01,
	   2.4100000e-01,
	   2.4820000e-01,
	   2.6280000e-01,
	   2.6920000e-01,
	   2.7740000e-01,
	   2.8590000e-01,
	   2.9580000e-01,
	   2.9980000e-01,
	   3.0910000e-01,
	   3.1340000e-01,
	   3.1940000e-01,
	   3.2180000e-01,
	   3.2700000e-01,
	   3.3040000e-01,
	   3.3470000e-01,
	   3.3630000e-01,
	   3.3930000e-01,
	   3.3970000e-01,
	   3.3980000e-01,
	   3.4170000e-01,
	   3.4330000e-01,
	   3.4050000e-01,
	   3.4370000e-01,
	   3.4550000e-01,
	   3.4640000e-01,
	   3.4640000e-01,
	   3.4770000e-01,
	   3.4940000e-01,
	   3.5160000e-01,
	   3.5250000e-01,
	   3.5290000e-01,
	   3.5320000e-01,
	   3.5320000e-01,
	   3.5400000e-01,
	   3.5580000e-01,
	   3.5520000e-01,
	   3.5570000e-01,
	   3.5910000e-01,
	   3.6120000e-01,
	   3.6030000e-01,
	   3.6180000e-01,
	   3.6460000e-01,
	   3.6530000e-01,
	   3.6530000e-01,
	   3.6880000e-01,
	   3.6960000e-01,
	   3.7060000e-01,
	   3.7300000e-01,
	   3.7410000e-01,
	   3.7410000e-01,
	   3.7580000e-01,
	   3.7920000e-01,
	   3.8100000e-01,
	   3.7950000e-01,
	   3.8020000e-01,
	   3.8330000e-01,
	   3.8400000e-01,
	   3.8400000e-01,
	   3.8790000e-01,
	   3.9000000e-01,
	   3.8970000e-01,
	   3.9150000e-01,
	   3.9310000e-01,
	   3.9420000e-01,
	   3.9700000e-01,
	   3.9850000e-01,
	   4.0040000e-01,
	   4.0030000e-01,
	   4.0170000e-01,
	   4.0490000e-01,
	   4.0530000e-01,
	   4.0340000e-01,
	   4.0750000e-01,
	   4.0950000e-01,
	   4.0810000e-01,
	   4.0900000e-01,
	   4.0960000e-01,
	   4.0940000e-01,
	   4.1030000e-01,
	   4.1100000e-01,
	   4.1260000e-01,
	   4.1280000e-01,
	   4.1290000e-01,
	   4.1430000e-01,
	   4.1460000e-01,
	   4.1110000e-01,
	   4.0930000e-01,
	   4.1130000e-01,
	   4.1150000e-01,
	   4.1160000e-01,
	   4.1210000e-01,
	   4.1130000e-01,
	   4.0850000e-01,
	   4.0930000e-01,
	   4.0830000e-01,
	   4.0810000e-01,
	   4.0730000e-01,
	   4.0750000e-01,
	   4.0600000e-01,
	   4.0400000e-01,
	   4.0390000e-01,
	   4.0420000e-01,
	   4.0200000e-01,
	   4.0150000e-01,
	   4.0260000e-01,
	   4.0270000e-01,
	   3.9910000e-01,
	   3.9860000e-01,
	   3.9740000e-01,
	   3.9520000e-01,
	   3.9240000e-01,
	   3.9280000e-01,
	   3.9130000e-01,
	   3.8890000e-01,
	   3.8800000e-01,
	   3.8690000e-01,
	   3.8450000e-01,
	   3.8210000e-01,
	   3.8010000e-01,
	   3.8030000e-01,
	   3.7720000e-01,
	   3.7460000e-01,
	   3.7300000e-01,
	   3.7080000e-01,
	   3.6780000e-01,
	   3.6720000e-01,
	   3.6310000e-01,
	   3.5990000e-01,
	   3.5770000e-01,
	   3.5570000e-01,
	   3.5190000e-01,
	   3.4960000e-01,
	   3.4480000e-01,
	   3.4370000e-01,
	   3.4070000e-01,
	   3.3670000e-01,
	   3.3350000e-01,
	   3.3010000e-01,
	   3.2480000e-01,
	   3.2560000e-01,
	   3.2320000e-01,
	   3.1880000e-01,
	   3.1460000e-01,
	   3.1410000e-01,
	   3.0980000e-01,
	   3.0570000e-01,
	   3.0100000e-01,
	   2.9830000e-01,
	   2.9430000e-01,
	   2.9090000e-01,
	   2.8670000e-01,
	   2.8400000e-01,
	   2.7810000e-01,
	   2.7590000e-01,
	   2.7220000e-01,
	   2.6800000e-01,
	   2.6370000e-01,
	   2.6220000e-01,
	   2.5790000e-01,
	   2.5160000e-01,
	   2.4700000e-01,
	   2.4490000e-01,
	   2.3920000e-01,
	   2.3450000e-01,
	   2.2830000e-01,
	   2.2470000e-01,
	   2.2190000e-01,
	   2.2460000e-01,
	   2.1960000e-01,
	   2.2020000e-01,
	   2.1340000e-01,
	   2.0860000e-01,
	   2.0670000e-01,
	   2.0600000e-01,
	   2.0330000e-01,
	   2.0120000e-01,
	   1.9780000e-01,
	   1.9510000e-01,
	   1.9230000e-01,
	   1.9110000e-01,
	   1.8870000e-01,
	   1.8570000e-01,
	   1.8190000e-01,
	   1.8160000e-01,
	   1.8270000e-01,
	   1.7870000e-01,
	   1.7750000e-01,
	   1.7800000e-01,
	   1.7480000e-01,
	   1.7400000e-01,
	   1.7260000e-01,
	   1.7160000e-01,
	   1.7010000e-01,
	   1.7000000e-01,
	   1.6760000e-01,
	   1.6640000e-01,
	   1.6490000e-01,
	   1.6430000e-01,
	   1.6280000e-01,
	   1.6030000e-01,
	   1.5830000e-01,
	   1.5920000e-01,
	   1.5580000e-01,
	   1.5400000e-01,
	   1.5420000e-01,
	   1.5500000e-01,
	   1.5210000e-01,
	   1.5010000e-01,
	   1.5130000e-01,
	   1.5010000e-01,
	   1.4850000e-01,
	   1.4840000e-01,
	   1.4700000e-01,
	   1.4650000e-01,
	   1.4680000e-01,
	   1.4660000e-01,
	   1.4690000e-01,
	   1.4550000e-01,
	   1.4410000e-01,
	   1.4580000e-01,
	   1.4570000e-01,
	   1.4260000e-01,
	   1.4370000e-01,
	   1.4320000e-01,
	   1.4180000e-01,
	   1.4330000e-01,
	   1.4180000e-01,
	   1.4000000e-01,
	   1.4310000e-01,
	   1.4300000e-01,
	   1.4060000e-01,
	   1.3950000e-01,
	   1.3890000e-01,
	   1.3960000e-01,
	   1.3930000e-01,
	   1.3800000e-01,
	   1.3780000e-01,
	   1.3900000e-01,
	   1.3760000e-01,
	   1.3770000e-01,
	   1.3900000e-01,
	   1.3820000e-01,
	   1.3650000e-01,
	   1.3780000e-01,
	   1.3870000e-01,
	   1.3740000e-01,
	   1.3710000e-01,
	   1.3760000e-01,
	   1.3680000e-01,
	   1.3760000e-01,
	   1.3820000e-01,
	   1.3740000e-01,
	   1.3680000e-01,
	   1.3710000e-01,
	   1.3820000e-01,
	   1.3850000e-01,
	   1.3780000e-01,
	   1.3880000e-01,
	   1.3960000e-01,
	   1.3850000e-01,
	   1.3700000e-01,
	   1.3970000e-01,
	   1.3910000e-01,
	   1.3830000e-01,
	   1.4030000e-01,
	   1.4140000e-01,
	   1.4070000e-01,
	   1.4110000e-01,
	   1.4120000e-01,
	   1.4190000e-01,
	   1.4060000e-01,
	   1.4000000e-01,
	   1.3880000e-01,
	   1.3910000e-01,
	   1.3950000e-01,
	   1.4210000e-01,
	   1.4340000e-01,
	   1.4270000e-01,
	   1.4400000e-01,
	   1.4450000e-01,
	   1.4150000e-01,
	   1.4190000e-01,
	   1.4150000e-01,
	   1.4080000e-01,
	   1.4140000e-01,
	   1.4210000e-01,
	   1.4130000e-01,
	   1.4040000e-01,
	   1.4010000e-01,
	   1.3990000e-01,
	   1.4070000e-01,
	   1.3820000e-01,
	   1.3530000e-01,
	   1.3610000e-01,
	   1.3930000e-01,
	   1.4270000e-01,
	   1.4010000e-01,
	   1.3860000e-01,
	   1.3860000e-01,
	   1.3990000e-01,
	   1.3790000e-01,
	   1.3650000e-01,
	   1.3780000e-01,
	   1.3750000e-01,
	   1.3580000e-01,
	   1.3670000e-01,
	   1.3620000e-01,
	   1.3500000e-01,
	   1.3460000e-01,
	   1.3450000e-01,
	   1.3380000e-01,
	   1.3340000e-01,
	   1.3300000e-01,
	   1.3410000e-01,
	   1.3460000e-01,
	   1.3280000e-01,
	   1.3520000e-01,
	   1.3520000e-01,
	   1.3490000e-01,
	   1.3620000e-01,
	   1.3650000e-01,
	   1.3480000e-01,
	   1.3600000e-01,
	   1.3780000e-01,
	   1.3820000e-01,
	   1.3800000e-01,
	   1.3960000e-01,
	   1.3990000e-01,
	   1.4110000e-01,
	   1.4100000e-01,
	   1.4340000e-01,
	   1.4520000e-01,
	   1.4550000e-01,
	   1.4670000e-01,
	   1.5050000e-01,
	   1.5100000e-01,
	   1.5100000e-01,
	   1.5370000e-01,
	   1.5800000e-01,
	   1.5840000e-01,
	   1.6070000e-01,
	   1.6360000e-01,
	   1.6600000e-01,
	   1.6790000e-01,
	   1.7260000e-01,
	   1.7670000e-01,
	   1.8040000e-01,
	   1.8320000e-01,
	   1.8760000e-01,
	   1.9150000e-01,
	   1.9530000e-01,
	   1.9780000e-01,
	   2.0330000e-01,
	   2.0510000e-01,
	   2.0890000e-01,
	   2.1480000e-01,
	   2.1980000e-01,
	   2.2160000e-01,
	   2.2560000e-01,
	   2.2820000e-01,
	   2.3280000e-01,
	   2.3630000e-01,
	   2.3940000e-01,
	   2.4270000e-01,
	   2.4620000e-01,
	   2.4680000e-01,
	   2.4850000e-01,
	   2.5070000e-01,
	   2.5300000e-01,
	   2.5660000e-01,
	   2.5760000e-01,
	   2.5740000e-01,
	   2.6170000e-01,
	   2.6400000e-01,
	   2.6650000e-01,
	   2.6670000e-01,
	   2.6770000e-01,
	   2.6640000e-01,
	   2.6680000e-01,
	   2.6790000e-01,
	   2.6980000e-01,
	   2.6940000e-01,
	   2.6880000e-01,
	   2.6920000e-01,
	   2.7000000e-01,
	   2.7000000e-01,
	   2.7090000e-01,
	   2.7220000e-01,
	   2.7380000e-01,
	   2.7480000e-01,
	   2.7470000e-01,
	   2.7580000e-01,
	   2.7920000e-01,
	   2.8110000e-01,
	   2.8000000e-01,
	   2.7780000e-01,
	   2.7990000e-01,
	   2.8610000e-01,
	   2.8300000e-01,
	   2.8020000e-01,
	   2.8210000e-01,
	   2.8390000e-01,
	   2.8630000e-01,
	   2.8850000e-01,
	   2.9240000e-01,
	   2.9260000e-01
	])

	b7 = np.array([
	   1.3740000e-01,
	   1.3940000e-01,
	   1.4420000e-01,
	   1.5350000e-01,
	   1.5790000e-01,
	   1.6730000e-01,
	   1.7420000e-01,
	   1.8450000e-01,
	   1.9270000e-01,
	   2.0660000e-01,
	   2.1520000e-01,
	   2.3140000e-01,
	   2.4230000e-01,
	   2.5830000e-01,
	   2.6820000e-01,
	   2.8490000e-01,
	   2.9900000e-01,
	   3.1830000e-01,
	   3.2830000e-01,
	   3.4780000e-01,
	   3.6040000e-01,
	   3.7630000e-01,
	   3.8700000e-01,
	   4.0250000e-01,
	   4.1090000e-01,
	   4.2260000e-01,
	   4.3090000e-01,
	   4.4000000e-01,
	   4.4430000e-01,
	   4.5100000e-01,
	   4.5730000e-01,
	   4.6440000e-01,
	   4.6600000e-01,
	   4.6830000e-01,
	   4.7000000e-01,
	   4.7150000e-01,
	   4.7090000e-01,
	   4.7480000e-01,
	   4.7630000e-01,
	   4.7760000e-01,
	   4.8120000e-01,
	   4.8430000e-01,
	   4.8270000e-01,
	   4.8390000e-01,
	   4.8680000e-01,
	   4.8700000e-01,
	   4.8510000e-01,
	   4.8910000e-01,
	   4.9090000e-01,
	   4.9150000e-01,
	   4.9230000e-01,
	   4.9630000e-01,
	   4.9930000e-01,
	   4.9990000e-01,
	   5.0030000e-01,
	   5.0380000e-01,
	   5.0440000e-01,
	   5.0470000e-01,
	   5.0840000e-01,
	   5.1110000e-01,
	   5.1070000e-01,
	   5.1370000e-01,
	   5.1660000e-01,
	   5.1800000e-01,
	   5.1910000e-01,
	   5.1900000e-01,
	   5.2040000e-01,
	   5.2150000e-01,
	   5.2230000e-01,
	   5.2570000e-01,
	   5.2620000e-01,
	   5.2470000e-01,
	   5.2760000e-01,
	   5.3110000e-01,
	   5.3040000e-01,
	   5.3190000e-01,
	   5.3570000e-01,
	   5.3760000e-01,
	   5.3730000e-01,
	   5.4120000e-01,
	   5.4350000e-01,
	   5.4620000e-01,
	   5.4740000e-01,
	   5.4780000e-01,
	   5.4900000e-01,
	   5.4990000e-01,
	   5.5150000e-01,
	   5.5310000e-01,
	   5.5350000e-01,
	   5.5530000e-01,
	   5.5750000e-01,
	   5.5690000e-01,
	   5.5690000e-01,
	   5.5780000e-01,
	   5.5950000e-01,
	   5.5850000e-01,
	   5.5850000e-01,
	   5.6000000e-01,
	   5.5980000e-01,
	   5.5950000e-01,
	   5.5950000e-01,
	   5.5980000e-01,
	   5.5900000e-01,
	   5.5740000e-01,
	   5.5870000e-01,
	   5.6080000e-01,
	   5.5780000e-01,
	   5.5560000e-01,
	   5.5760000e-01,
	   5.5580000e-01,
	   5.5450000e-01,
	   5.5580000e-01,
	   5.5500000e-01,
	   5.5230000e-01,
	   5.5300000e-01,
	   5.5110000e-01,
	   5.5010000e-01,
	   5.5000000e-01,
	   5.4960000e-01,
	   5.4680000e-01,
	   5.4610000e-01,
	   5.4490000e-01,
	   5.4620000e-01,
	   5.4440000e-01,
	   5.4080000e-01,
	   5.4070000e-01,
	   5.3990000e-01,
	   5.3520000e-01,
	   5.3440000e-01,
	   5.3460000e-01,
	   5.3220000e-01,
	   5.2910000e-01,
	   5.2930000e-01,
	   5.2450000e-01,
	   5.2160000e-01,
	   5.1770000e-01,
	   5.1760000e-01,
	   5.1570000e-01,
	   5.1290000e-01,
	   5.1080000e-01,
	   5.0980000e-01,
	   5.0470000e-01,
	   5.0120000e-01,
	   4.9760000e-01,
	   4.9520000e-01,
	   4.8950000e-01,
	   4.8770000e-01,
	   4.8440000e-01,
	   4.8030000e-01,
	   4.7630000e-01,
	   4.7570000e-01,
	   4.7070000e-01,
	   4.6580000e-01,
	   4.6090000e-01,
	   4.5980000e-01,
	   4.5560000e-01,
	   4.5150000e-01,
	   4.4560000e-01,
	   4.4250000e-01,
	   4.3790000e-01,
	   4.3410000e-01,
	   4.2890000e-01,
	   4.2460000e-01,
	   4.1940000e-01,
	   4.1840000e-01,
	   4.1100000e-01,
	   4.0500000e-01,
	   3.9980000e-01,
	   3.9720000e-01,
	   3.9190000e-01,
	   3.8830000e-01,
	   3.8120000e-01,
	   3.7720000e-01,
	   3.7100000e-01,
	   3.6720000e-01,
	   3.6130000e-01,
	   3.5620000e-01,
	   3.4820000e-01,
	   3.4560000e-01,
	   3.3740000e-01,
	   3.3040000e-01,
	   3.2840000e-01,
	   3.2890000e-01,
	   3.2250000e-01,
	   3.2080000e-01,
	   3.1500000e-01,
	   3.1170000e-01,
	   3.0830000e-01,
	   3.0440000e-01,
	   2.9900000e-01,
	   2.9770000e-01,
	   2.9480000e-01,
	   2.9100000e-01,
	   2.8560000e-01,
	   2.8440000e-01,
	   2.7990000e-01,
	   2.7790000e-01,
	   2.7740000e-01,
	   2.7510000e-01,
	   2.7190000e-01,
	   2.6880000e-01,
	   2.6510000e-01,
	   2.6360000e-01,
	   2.6040000e-01,
	   2.5960000e-01,
	   2.5870000e-01,
	   2.5670000e-01,
	   2.5390000e-01,
	   2.5530000e-01,
	   2.5520000e-01,
	   2.5090000e-01,
	   2.4980000e-01,
	   2.4890000e-01,
	   2.4500000e-01,
	   2.4310000e-01,
	   2.3880000e-01,
	   2.3730000e-01,
	   2.3550000e-01,
	   2.3560000e-01,
	   2.3430000e-01,
	   2.3320000e-01,
	   2.3170000e-01,
	   2.3020000e-01,
	   2.2740000e-01,
	   2.2480000e-01,
	   2.2420000e-01,
	   2.2450000e-01,
	   2.2270000e-01,
	   2.2220000e-01,
	   2.2090000e-01,
	   2.2010000e-01,
	   2.1900000e-01,
	   2.1860000e-01,
	   2.1890000e-01,
	   2.1760000e-01,
	   2.1610000e-01,
	   2.1660000e-01,
	   2.1730000e-01,
	   2.1620000e-01,
	   2.1560000e-01,
	   2.1650000e-01,
	   2.1550000e-01,
	   2.1420000e-01,
	   2.1590000e-01,
	   2.1630000e-01,
	   2.1540000e-01,
	   2.1500000e-01,
	   2.1320000e-01,
	   2.1240000e-01,
	   2.1320000e-01,
	   2.1460000e-01,
	   2.1330000e-01,
	   2.1120000e-01,
	   2.1230000e-01,
	   2.1290000e-01,
	   2.1300000e-01,
	   2.1110000e-01,
	   2.1270000e-01,
	   2.1430000e-01,
	   2.1300000e-01,
	   2.1130000e-01,
	   2.1180000e-01,
	   2.1170000e-01,
	   2.1210000e-01,
	   2.1420000e-01,
	   2.1570000e-01,
	   2.1520000e-01,
	   2.1510000e-01,
	   2.1530000e-01,
	   2.1540000e-01,
	   2.1540000e-01,
	   2.1420000e-01,
	   2.1630000e-01,
	   2.1690000e-01,
	   2.1670000e-01,
	   2.1810000e-01,
	   2.1870000e-01,
	   2.1800000e-01,
	   2.1880000e-01,
	   2.1980000e-01,
	   2.1960000e-01,
	   2.2090000e-01,
	   2.2210000e-01,
	   2.2070000e-01,
	   2.1960000e-01,
	   2.1850000e-01,
	   2.1900000e-01,
	   2.1760000e-01,
	   2.1720000e-01,
	   2.1860000e-01,
	   2.2080000e-01,
	   2.2130000e-01,
	   2.2140000e-01,
	   2.2170000e-01,
	   2.2150000e-01,
	   2.1970000e-01,
	   2.2190000e-01,
	   2.2120000e-01,
	   2.1940000e-01,
	   2.2000000e-01,
	   2.2190000e-01,
	   2.2050000e-01,
	   2.1890000e-01,
	   2.1820000e-01,
	   2.1870000e-01,
	   2.1730000e-01,
	   2.1620000e-01,
	   2.1410000e-01,
	   2.1250000e-01,
	   2.1220000e-01,
	   2.1690000e-01,
	   2.1670000e-01,
	   2.1610000e-01,
	   2.1540000e-01,
	   2.1430000e-01,
	   2.1360000e-01,
	   2.1340000e-01,
	   2.1280000e-01,
	   2.1140000e-01,
	   2.1130000e-01,
	   2.1200000e-01,
	   2.0900000e-01,
	   2.0910000e-01,
	   2.0810000e-01,
	   2.0750000e-01,
	   2.0750000e-01,
	   2.0740000e-01,
	   2.0780000e-01,
	   2.0780000e-01,
	   2.0710000e-01,
	   2.0940000e-01,
	   2.0960000e-01,
	   2.0890000e-01,
	   2.0980000e-01,
	   2.1110000e-01,
	   2.1110000e-01,
	   2.1110000e-01,
	   2.1180000e-01,
	   2.1300000e-01,
	   2.1480000e-01,
	   2.1620000e-01,
	   2.1820000e-01,
	   2.1790000e-01,
	   2.2110000e-01,
	   2.2440000e-01,
	   2.2600000e-01,
	   2.2490000e-01,
	   2.2730000e-01,
	   2.2940000e-01,
	   2.3260000e-01,
	   2.3440000e-01,
	   2.3740000e-01,
	   2.3970000e-01,
	   2.4450000e-01,
	   2.4760000e-01,
	   2.5280000e-01,
	   2.5440000e-01,
	   2.6030000e-01,
	   2.6540000e-01,
	   2.7170000e-01,
	   2.7300000e-01,
	   2.7710000e-01,
	   2.8080000e-01,
	   2.8610000e-01,
	   2.8970000e-01,
	   2.9610000e-01,
	   3.0130000e-01,
	   3.1020000e-01,
	   3.1280000e-01,
	   3.2100000e-01,
	   3.2620000e-01,
	   3.3110000e-01,
	   3.3690000e-01,
	   3.4340000e-01,
	   3.4420000e-01,
	   3.4880000e-01,
	   3.5370000e-01,
	   3.5940000e-01,
	   3.6150000e-01,
	   3.6440000e-01,
	   3.6740000e-01,
	   3.7160000e-01,
	   3.7280000e-01,
	   3.7620000e-01,
	   3.7950000e-01,
	   3.8360000e-01,
	   3.8360000e-01,
	   3.8560000e-01,
	   3.8710000e-01,
	   3.8790000e-01,
	   3.8970000e-01,
	   3.9130000e-01,
	   3.8840000e-01,
	   3.8950000e-01,
	   3.9300000e-01,
	   3.9190000e-01,
	   3.9000000e-01,
	   3.9300000e-01,
	   3.9290000e-01,
	   3.9360000e-01,
	   3.9700000e-01,
	   3.9990000e-01,
	   3.9880000e-01,
	   3.9900000e-01,
	   3.9760000e-01,
	   3.9670000e-01,
	   3.9700000e-01,
	   3.9970000e-01,
	   4.0530000e-01,
	   4.0750000e-01,
	   4.0810000e-01,
	   4.1010000e-01,
	   4.1180000e-01,
	   4.0900000e-01,
	   4.1010000e-01,
	   4.1030000e-01,
	   4.1370000e-01,
	   4.1770000e-01,
	   4.1870000e-01,
	   4.2150000e-01,
	   4.2100000e-01
	])

	# 7.5B5-8/4
	m75b5 = np.array([
	   1.0600000e-01,
	   1.1030000e-01,
	   1.1210000e-01,
	   1.1460000e-01,
	   1.1770000e-01,
	   1.2290000e-01,
	   1.2820000e-01,
	   1.3580000e-01,
	   1.4250000e-01,
	   1.4990000e-01,
	   1.5300000e-01,
	   1.5970000e-01,
	   1.6710000e-01,
	   1.7480000e-01,
	   1.7860000e-01,
	   1.8680000e-01,
	   1.9340000e-01,
	   1.9930000e-01,
	   2.0340000e-01,
	   2.1080000e-01,
	   2.1410000e-01,
	   2.1790000e-01,
	   2.2220000e-01,
	   2.2590000e-01,
	   2.2710000e-01,
	   2.2880000e-01,
	   2.3090000e-01,
	   2.3210000e-01,
	   2.3290000e-01,
	   2.3440000e-01,
	   2.3710000e-01,
	   2.3770000e-01,
	   2.3710000e-01,
	   2.3820000e-01,
	   2.3810000e-01,
	   2.3570000e-01,
	   2.3650000e-01,
	   2.3800000e-01,
	   2.3650000e-01,
	   2.3780000e-01,
	   2.3960000e-01,
	   2.3870000e-01,
	   2.3820000e-01,
	   2.3950000e-01,
	   2.3970000e-01,
	   2.4020000e-01,
	   2.3860000e-01,
	   2.3900000e-01,
	   2.4030000e-01,
	   2.3920000e-01,
	   2.3960000e-01,
	   2.4140000e-01,
	   2.4020000e-01,
	   2.4020000e-01,
	   2.4210000e-01,
	   2.4300000e-01,
	   2.4080000e-01,
	   2.4020000e-01,
	   2.4180000e-01,
	   2.4240000e-01,
	   2.4130000e-01,
	   2.4190000e-01,
	   2.4210000e-01,
	   2.4230000e-01,
	   2.4340000e-01,
	   2.4270000e-01,
	   2.4220000e-01,
	   2.4220000e-01,
	   2.4260000e-01,
	   2.4360000e-01,
	   2.4240000e-01,
	   2.4060000e-01,
	   2.4250000e-01,
	   2.4140000e-01,
	   2.4050000e-01,
	   2.4170000e-01,
	   2.4190000e-01,
	   2.4060000e-01,
	   2.4180000e-01,
	   2.4160000e-01,
	   2.4000000e-01,
	   2.4080000e-01,
	   2.4260000e-01,
	   2.4080000e-01,
	   2.4010000e-01,
	   2.3920000e-01,
	   2.4060000e-01,
	   2.4060000e-01,
	   2.3820000e-01,
	   2.3840000e-01,
	   2.4030000e-01,
	   2.3900000e-01,
	   2.3810000e-01,
	   2.3860000e-01,
	   2.3780000e-01,
	   2.3650000e-01,
	   2.3750000e-01,
	   2.3760000e-01,
	   2.3530000e-01,
	   2.3600000e-01,
	   2.3620000e-01,
	   2.3700000e-01,
	   2.3540000e-01,
	   2.3540000e-01,
	   2.3410000e-01,
	   2.3360000e-01,
	   2.3220000e-01,
	   2.3220000e-01,
	   2.3130000e-01,
	   2.3160000e-01,
	   2.3130000e-01,
	   2.3230000e-01,
	   2.2960000e-01,
	   2.2930000e-01,
	   2.3240000e-01,
	   2.3130000e-01,
	   2.2900000e-01,
	   2.3070000e-01,
	   2.3110000e-01,
	   2.2940000e-01,
	   2.2920000e-01,
	   2.2760000e-01,
	   2.2720000e-01,
	   2.2790000e-01,
	   2.2770000e-01,
	   2.2720000e-01,
	   2.2620000e-01,
	   2.2370000e-01,
	   2.2550000e-01,
	   2.2600000e-01,
	   2.2360000e-01,
	   2.2210000e-01,
	   2.2380000e-01,
	   2.2220000e-01,
	   2.2040000e-01,
	   2.2130000e-01,
	   2.2130000e-01,
	   2.1940000e-01,
	   2.1940000e-01,
	   2.1940000e-01,
	   2.1810000e-01,
	   2.1670000e-01,
	   2.1640000e-01,
	   2.1490000e-01,
	   2.1240000e-01,
	   2.1190000e-01,
	   2.1150000e-01,
	   2.1060000e-01,
	   2.0980000e-01,
	   2.0840000e-01,
	   2.0830000e-01,
	   2.0700000e-01,
	   2.0490000e-01,
	   2.0540000e-01,
	   2.0380000e-01,
	   2.0190000e-01,
	   2.0190000e-01,
	   2.0050000e-01,
	   1.9730000e-01,
	   1.9760000e-01,
	   1.9690000e-01,
	   1.9320000e-01,
	   1.9110000e-01,
	   1.9070000e-01,
	   1.9000000e-01,
	   1.8770000e-01,
	   1.8510000e-01,
	   1.8320000e-01,
	   1.8350000e-01,
	   1.8120000e-01,
	   1.8050000e-01,
	   1.8020000e-01,
	   1.7740000e-01,
	   1.7310000e-01,
	   1.7250000e-01,
	   1.7050000e-01,
	   1.6750000e-01,
	   1.6410000e-01,
	   1.6170000e-01,
	   1.5790000e-01,
	   1.5500000e-01,
	   1.5700000e-01,
	   1.5940000e-01,
	   1.5810000e-01,
	   1.5580000e-01,
	   1.5210000e-01,
	   1.5240000e-01,
	   1.5100000e-01,
	   1.4840000e-01,
	   1.4710000e-01,
	   1.4740000e-01,
	   1.4420000e-01,
	   1.4300000e-01,
	   1.4130000e-01,
	   1.3980000e-01,
	   1.3740000e-01,
	   1.3610000e-01,
	   1.3550000e-01,
	   1.3440000e-01,
	   1.3410000e-01,
	   1.3460000e-01,
	   1.3350000e-01,
	   1.3220000e-01,
	   1.2990000e-01,
	   1.3130000e-01,
	   1.3010000e-01,
	   1.2890000e-01,
	   1.2880000e-01,
	   1.2870000e-01,
	   1.2550000e-01,
	   1.2410000e-01,
	   1.2450000e-01,
	   1.2370000e-01,
	   1.2240000e-01,
	   1.2340000e-01,
	   1.2170000e-01,
	   1.2020000e-01,
	   1.1950000e-01,
	   1.2090000e-01,
	   1.2060000e-01,
	   1.1940000e-01,
	   1.1800000e-01,
	   1.1950000e-01,
	   1.1920000e-01,
	   1.1780000e-01,
	   1.1710000e-01,
	   1.1760000e-01,
	   1.1570000e-01,
	   1.1550000e-01,
	   1.1590000e-01,
	   1.1490000e-01,
	   1.1490000e-01,
	   1.1500000e-01,
	   1.1450000e-01,
	   1.1390000e-01,
	   1.1290000e-01,
	   1.1370000e-01,
	   1.1420000e-01,
	   1.1340000e-01,
	   1.1350000e-01,
	   1.1430000e-01,
	   1.1460000e-01,
	   1.1480000e-01,
	   1.1520000e-01,
	   1.1360000e-01,
	   1.1240000e-01,
	   1.1280000e-01,
	   1.1290000e-01,
	   1.1190000e-01,
	   1.1170000e-01,
	   1.1320000e-01,
	   1.1240000e-01,
	   1.1210000e-01,
	   1.1300000e-01,
	   1.1320000e-01,
	   1.1390000e-01,
	   1.1450000e-01,
	   1.1390000e-01,
	   1.1410000e-01,
	   1.1380000e-01,
	   1.1410000e-01,
	   1.1450000e-01,
	   1.1290000e-01,
	   1.1290000e-01,
	   1.1510000e-01,
	   1.1620000e-01,
	   1.1400000e-01,
	   1.1510000e-01,
	   1.1570000e-01,
	   1.1510000e-01,
	   1.1560000e-01,
	   1.1660000e-01,
	   1.1630000e-01,
	   1.1660000e-01,
	   1.1730000e-01,
	   1.1830000e-01,
	   1.1760000e-01,
	   1.1700000e-01,
	   1.1800000e-01,
	   1.1960000e-01,
	   1.1890000e-01,
	   1.1800000e-01,
	   1.1860000e-01,
	   1.1720000e-01,
	   1.1690000e-01,
	   1.1670000e-01,
	   1.1540000e-01,
	   1.1440000e-01,
	   1.1640000e-01,
	   1.1660000e-01,
	   1.1590000e-01,
	   1.1760000e-01,
	   1.1950000e-01,
	   1.1810000e-01,
	   1.1600000e-01,
	   1.1590000e-01,
	   1.1670000e-01,
	   1.1650000e-01,
	   1.1530000e-01,
	   1.1500000e-01,
	   1.1490000e-01,
	   1.1360000e-01,
	   1.1190000e-01,
	   1.1200000e-01,
	   1.1070000e-01,
	   1.0900000e-01,
	   1.0980000e-01,
	   1.0780000e-01,
	   1.0370000e-01,
	   1.0680000e-01,
	   1.1060000e-01,
	   1.0880000e-01,
	   1.0990000e-01,
	   1.1050000e-01,
	   1.0850000e-01,
	   1.0820000e-01,
	   1.0840000e-01,
	   1.0780000e-01,
	   1.0690000e-01,
	   1.0780000e-01,
	   1.0730000e-01,
	   1.0710000e-01,
	   1.0630000e-01,
	   1.0650000e-01,
	   1.0670000e-01,
	   1.0660000e-01,
	   1.0700000e-01,
	   1.0800000e-01,
	   1.0750000e-01,
	   1.0680000e-01,
	   1.0780000e-01,
	   1.0820000e-01,
	   1.0730000e-01,
	   1.0840000e-01,
	   1.0920000e-01,
	   1.0790000e-01,
	   1.1030000e-01,
	   1.1100000e-01,
	   1.1050000e-01,
	   1.1100000e-01,
	   1.1300000e-01,
	   1.1280000e-01,
	   1.1260000e-01,
	   1.1310000e-01,
	   1.1520000e-01,
	   1.1650000e-01,
	   1.1720000e-01,
	   1.1820000e-01,
	   1.2060000e-01,
	   1.2110000e-01,
	   1.2150000e-01,
	   1.2400000e-01,
	   1.2570000e-01,
	   1.2710000e-01,
	   1.2960000e-01,
	   1.3260000e-01,
	   1.3260000e-01,
	   1.3580000e-01,
	   1.3730000e-01,
	   1.3910000e-01,
	   1.4110000e-01,
	   1.4460000e-01,
	   1.4620000e-01,
	   1.4840000e-01,
	   1.5100000e-01,
	   1.5200000e-01,
	   1.5360000e-01,
	   1.5930000e-01,
	   1.6220000e-01,
	   1.6740000e-01,
	   1.6830000e-01,
	   1.7000000e-01,
	   1.7360000e-01,
	   1.7560000e-01,
	   1.7540000e-01,
	   1.7870000e-01,
	   1.8060000e-01,
	   1.8240000e-01,
	   1.8540000e-01,
	   1.8800000e-01,
	   1.8840000e-01,
	   1.9020000e-01,
	   1.9110000e-01,
	   1.9310000e-01,
	   1.9400000e-01,
	   1.9540000e-01,
	   1.9700000e-01,
	   1.9790000e-01,
	   1.9840000e-01,
	   1.9880000e-01,
	   1.9920000e-01,
	   1.9900000e-01,
	   1.9710000e-01,
	   1.9760000e-01,
	   1.9830000e-01,
	   1.9940000e-01,
	   1.9990000e-01,
	   2.0030000e-01,
	   2.0040000e-01,
	   1.9930000e-01,
	   2.0050000e-01,
	   2.0060000e-01,
	   2.0000000e-01,
	   2.0070000e-01,
	   2.0110000e-01,
	   2.0200000e-01,
	   2.0420000e-01,
	   2.0330000e-01,
	   2.0540000e-01,
	   2.0390000e-01,
	   2.0090000e-01,
	   2.0190000e-01,
	   2.0210000e-01,
	   2.0180000e-01,
	   2.0450000e-01,
	   2.0540000e-01,
	   2.0580000e-01,
	   2.0630000e-01,
	   2.0540000e-01,
	   2.0420000e-01,
	   2.0490000e-01
	])

	m75b6 = np.array([
	   1.1270000e-01,
	   1.1810000e-01,
	   1.2130000e-01,
	   1.2540000e-01,
	   1.3100000e-01,
	   1.3940000e-01,
	   1.4490000e-01,
	   1.5260000e-01,
	   1.6040000e-01,
	   1.7200000e-01,
	   1.7800000e-01,
	   1.8970000e-01,
	   1.9840000e-01,
	   2.1030000e-01,
	   2.1790000e-01,
	   2.2990000e-01,
	   2.3830000e-01,
	   2.5230000e-01,
	   2.6060000e-01,
	   2.7200000e-01,
	   2.7840000e-01,
	   2.8660000e-01,
	   2.9420000e-01,
	   3.0290000e-01,
	   3.0450000e-01,
	   3.0970000e-01,
	   3.1610000e-01,
	   3.1930000e-01,
	   3.1990000e-01,
	   3.2420000e-01,
	   3.2760000e-01,
	   3.2920000e-01,
	   3.2880000e-01,
	   3.2930000e-01,
	   3.2920000e-01,
	   3.2880000e-01,
	   3.2880000e-01,
	   3.3040000e-01,
	   3.3080000e-01,
	   3.3160000e-01,
	   3.3260000e-01,
	   3.3220000e-01,
	   3.3070000e-01,
	   3.3060000e-01,
	   3.3330000e-01,
	   3.3260000e-01,
	   3.3040000e-01,
	   3.3210000e-01,
	   3.3280000e-01,
	   3.3220000e-01,
	   3.3370000e-01,
	   3.3300000e-01,
	   3.3230000e-01,
	   3.3510000e-01,
	   3.3560000e-01,
	   3.3570000e-01,
	   3.3530000e-01,
	   3.3480000e-01,
	   3.3510000e-01,
	   3.3580000e-01,
	   3.3490000e-01,
	   3.3630000e-01,
	   3.3650000e-01,
	   3.3400000e-01,
	   3.3450000e-01,
	   3.3620000e-01,
	   3.3420000e-01,
	   3.3310000e-01,
	   3.3510000e-01,
	   3.3540000e-01,
	   3.3440000e-01,
	   3.3400000e-01,
	   3.3640000e-01,
	   3.3570000e-01,
	   3.3540000e-01,
	   3.3510000e-01,
	   3.3450000e-01,
	   3.3320000e-01,
	   3.3430000e-01,
	   3.3420000e-01,
	   3.3320000e-01,
	   3.3260000e-01,
	   3.3440000e-01,
	   3.3510000e-01,
	   3.3270000e-01,
	   3.3090000e-01,
	   3.3310000e-01,
	   3.3190000e-01,
	   3.2990000e-01,
	   3.3190000e-01,
	   3.3260000e-01,
	   3.3240000e-01,
	   3.3250000e-01,
	   3.3160000e-01,
	   3.3090000e-01,
	   3.2920000e-01,
	   3.2940000e-01,
	   3.2950000e-01,
	   3.2770000e-01,
	   3.2630000e-01,
	   3.2720000e-01,
	   3.2810000e-01,
	   3.2600000e-01,
	   3.2670000e-01,
	   3.2800000e-01,
	   3.2640000e-01,
	   3.2560000e-01,
	   3.2680000e-01,
	   3.2430000e-01,
	   3.2260000e-01,
	   3.2280000e-01,
	   3.2340000e-01,
	   3.2170000e-01,
	   3.2110000e-01,
	   3.2260000e-01,
	   3.2240000e-01,
	   3.2030000e-01,
	   3.1970000e-01,
	   3.2140000e-01,
	   3.2100000e-01,
	   3.1990000e-01,
	   3.1960000e-01,
	   3.1890000e-01,
	   3.1870000e-01,
	   3.1880000e-01,
	   3.1870000e-01,
	   3.1640000e-01,
	   3.1540000e-01,
	   3.1670000e-01,
	   3.1640000e-01,
	   3.1390000e-01,
	   3.1300000e-01,
	   3.1330000e-01,
	   3.1340000e-01,
	   3.1070000e-01,
	   3.0930000e-01,
	   3.0980000e-01,
	   3.0850000e-01,
	   3.0670000e-01,
	   3.0660000e-01,
	   3.0560000e-01,
	   3.0310000e-01,
	   3.0340000e-01,
	   3.0250000e-01,
	   2.9990000e-01,
	   2.9970000e-01,
	   2.9910000e-01,
	   2.9750000e-01,
	   2.9660000e-01,
	   2.9490000e-01,
	   2.9490000e-01,
	   2.9340000e-01,
	   2.9110000e-01,
	   2.8860000e-01,
	   2.8770000e-01,
	   2.8610000e-01,
	   2.8590000e-01,
	   2.8620000e-01,
	   2.8400000e-01,
	   2.8190000e-01,
	   2.8140000e-01,
	   2.7800000e-01,
	   2.7610000e-01,
	   2.7520000e-01,
	   2.7510000e-01,
	   2.7160000e-01,
	   2.6930000e-01,
	   2.6820000e-01,
	   2.6720000e-01,
	   2.6400000e-01,
	   2.6280000e-01,
	   2.6050000e-01,
	   2.5870000e-01,
	   2.5610000e-01,
	   2.5460000e-01,
	   2.5180000e-01,
	   2.4760000e-01,
	   2.4450000e-01,
	   2.4260000e-01,
	   2.3700000e-01,
	   2.3200000e-01,
	   2.3340000e-01,
	   2.3530000e-01,
	   2.3390000e-01,
	   2.3180000e-01,
	   2.2780000e-01,
	   2.2750000e-01,
	   2.2500000e-01,
	   2.2160000e-01,
	   2.1980000e-01,
	   2.2050000e-01,
	   2.1700000e-01,
	   2.1460000e-01,
	   2.1360000e-01,
	   2.1310000e-01,
	   2.1080000e-01,
	   2.0940000e-01,
	   2.0840000e-01,
	   2.0740000e-01,
	   2.0540000e-01,
	   2.0460000e-01,
	   2.0310000e-01,
	   2.0140000e-01,
	   1.9990000e-01,
	   1.9970000e-01,
	   1.9710000e-01,
	   1.9580000e-01,
	   1.9550000e-01,
	   1.9620000e-01,
	   1.9400000e-01,
	   1.9260000e-01,
	   1.9300000e-01,
	   1.9140000e-01,
	   1.8900000e-01,
	   1.9050000e-01,
	   1.8860000e-01,
	   1.8590000e-01,
	   1.8490000e-01,
	   1.8530000e-01,
	   1.8470000e-01,
	   1.8310000e-01,
	   1.8060000e-01,
	   1.8060000e-01,
	   1.8040000e-01,
	   1.7880000e-01,
	   1.7830000e-01,
	   1.7810000e-01,
	   1.7630000e-01,
	   1.7640000e-01,
	   1.7790000e-01,
	   1.7570000e-01,
	   1.7460000e-01,
	   1.7550000e-01,
	   1.7400000e-01,
	   1.7280000e-01,
	   1.7310000e-01,
	   1.7340000e-01,
	   1.7260000e-01,
	   1.7170000e-01,
	   1.7190000e-01,
	   1.7180000e-01,
	   1.7130000e-01,
	   1.7220000e-01,
	   1.7170000e-01,
	   1.7050000e-01,
	   1.6820000e-01,
	   1.7000000e-01,
	   1.6980000e-01,
	   1.6870000e-01,
	   1.6970000e-01,
	   1.7220000e-01,
	   1.7120000e-01,
	   1.6960000e-01,
	   1.7040000e-01,
	   1.7030000e-01,
	   1.7090000e-01,
	   1.7060000e-01,
	   1.7050000e-01,
	   1.7070000e-01,
	   1.7120000e-01,
	   1.7130000e-01,
	   1.7240000e-01,
	   1.7130000e-01,
	   1.7220000e-01,
	   1.7410000e-01,
	   1.7490000e-01,
	   1.7250000e-01,
	   1.7400000e-01,
	   1.7460000e-01,
	   1.7610000e-01,
	   1.7760000e-01,
	   1.7730000e-01,
	   1.7590000e-01,
	   1.7740000e-01,
	   1.7840000e-01,
	   1.7970000e-01,
	   1.7860000e-01,
	   1.7910000e-01,
	   1.8010000e-01,
	   1.8260000e-01,
	   1.8160000e-01,
	   1.7940000e-01,
	   1.8150000e-01,
	   1.8130000e-01,
	   1.8030000e-01,
	   1.7950000e-01,
	   1.7940000e-01,
	   1.7960000e-01,
	   1.8100000e-01,
	   1.7820000e-01,
	   1.7730000e-01,
	   1.7760000e-01,
	   1.7960000e-01,
	   1.7880000e-01,
	   1.7800000e-01,
	   1.7810000e-01,
	   1.7840000e-01,
	   1.7670000e-01,
	   1.7520000e-01,
	   1.7570000e-01,
	   1.7590000e-01,
	   1.7450000e-01,
	   1.7400000e-01,
	   1.7520000e-01,
	   1.7400000e-01,
	   1.7050000e-01,
	   1.6960000e-01,
	   1.6690000e-01,
	   1.6270000e-01,
	   1.6430000e-01,
	   1.6840000e-01,
	   1.6750000e-01,
	   1.6780000e-01,
	   1.6540000e-01,
	   1.6460000e-01,
	   1.6360000e-01,
	   1.6300000e-01,
	   1.6180000e-01,
	   1.6170000e-01,
	   1.6290000e-01,
	   1.6180000e-01,
	   1.6010000e-01,
	   1.5990000e-01,
	   1.6030000e-01,
	   1.5960000e-01,
	   1.5840000e-01,
	   1.5890000e-01,
	   1.5840000e-01,
	   1.5780000e-01,
	   1.5780000e-01,
	   1.6020000e-01,
	   1.6010000e-01,
	   1.6000000e-01,
	   1.6120000e-01,
	   1.6170000e-01,
	   1.6240000e-01,
	   1.6490000e-01,
	   1.6450000e-01,
	   1.6550000e-01,
	   1.6890000e-01,
	   1.7140000e-01,
	   1.6950000e-01,
	   1.6880000e-01,
	   1.7150000e-01,
	   1.7290000e-01,
	   1.7590000e-01,
	   1.7600000e-01,
	   1.7960000e-01,
	   1.8250000e-01,
	   1.8320000e-01,
	   1.8540000e-01,
	   1.8700000e-01,
	   1.8740000e-01,
	   1.9040000e-01,
	   1.9420000e-01,
	   1.9840000e-01,
	   1.9900000e-01,
	   2.0310000e-01,
	   2.0570000e-01,
	   2.1120000e-01,
	   2.1350000e-01,
	   2.1660000e-01,
	   2.1970000e-01,
	   2.2550000e-01,
	   2.2790000e-01,
	   2.3090000e-01,
	   2.3080000e-01,
	   2.3560000e-01,
	   2.4110000e-01,
	   2.4730000e-01,
	   2.4720000e-01,
	   2.5130000e-01,
	   2.5500000e-01,
	   2.5520000e-01,
	   2.5700000e-01,
	   2.6150000e-01,
	   2.6330000e-01,
	   2.6500000e-01,
	   2.6690000e-01,
	   2.7130000e-01,
	   2.7060000e-01,
	   2.7070000e-01,
	   2.7190000e-01,
	   2.7550000e-01,
	   2.7610000e-01,
	   2.7620000e-01,
	   2.7800000e-01,
	   2.7860000e-01,
	   2.7810000e-01,
	   2.7770000e-01,
	   2.7830000e-01,
	   2.8100000e-01,
	   2.8010000e-01,
	   2.8200000e-01,
	   2.8290000e-01,
	   2.8070000e-01,
	   2.7940000e-01,
	   2.8390000e-01,
	   2.8450000e-01,
	   2.8340000e-01,
	   2.8230000e-01,
	   2.8600000e-01,
	   2.8430000e-01,
	   2.8420000e-01,
	   2.8500000e-01,
	   2.8340000e-01,
	   2.8250000e-01,
	   2.8340000e-01,
	   2.8560000e-01,
	   2.8800000e-01,
	   2.8770000e-01,
	   2.8620000e-01,
	   2.8400000e-01,
	   2.7920000e-01,
	   2.7990000e-01,
	   2.8370000e-01,
	   2.8610000e-01,
	   2.8640000e-01,
	   2.8620000e-01,
	   2.8480000e-01,
	   2.8420000e-01
	])

	m75b7 = np.array([
	   1.2100000e-01,
	   1.2790000e-01,
	   1.3060000e-01,
	   1.3610000e-01,
	   1.4210000e-01,
	   1.5010000e-01,
	   1.5540000e-01,
	   1.6770000e-01,
	   1.7620000e-01,
	   1.8870000e-01,
	   1.9810000e-01,
	   2.1200000e-01,
	   2.2130000e-01,
	   2.3810000e-01,
	   2.5080000e-01,
	   2.6620000e-01,
	   2.7620000e-01,
	   2.9560000e-01,
	   3.0980000e-01,
	   3.2980000e-01,
	   3.3950000e-01,
	   3.5620000e-01,
	   3.6860000e-01,
	   3.8400000e-01,
	   3.9560000e-01,
	   4.0950000e-01,
	   4.1580000e-01,
	   4.2480000e-01,
	   4.3020000e-01,
	   4.3790000e-01,
	   4.4210000e-01,
	   4.4800000e-01,
	   4.4930000e-01,
	   4.5040000e-01,
	   4.5210000e-01,
	   4.5190000e-01,
	   4.5110000e-01,
	   4.5350000e-01,
	   4.5450000e-01,
	   4.5690000e-01,
	   4.5730000e-01,
	   4.5820000e-01,
	   4.6010000e-01,
	   4.6030000e-01,
	   4.5840000e-01,
	   4.5850000e-01,
	   4.5960000e-01,
	   4.5890000e-01,
	   4.5780000e-01,
	   4.5850000e-01,
	   4.6010000e-01,
	   4.6020000e-01,
	   4.6000000e-01,
	   4.6110000e-01,
	   4.6130000e-01,
	   4.6230000e-01,
	   4.6370000e-01,
	   4.6430000e-01,
	   4.6360000e-01,
	   4.6330000e-01,
	   4.6380000e-01,
	   4.6520000e-01,
	   4.6240000e-01,
	   4.6400000e-01,
	   4.6490000e-01,
	   4.6220000e-01,
	   4.6090000e-01,
	   4.6240000e-01,
	   4.6170000e-01,
	   4.6160000e-01,
	   4.6310000e-01,
	   4.6280000e-01,
	   4.6180000e-01,
	   4.6200000e-01,
	   4.6130000e-01,
	   4.6270000e-01,
	   4.6180000e-01,
	   4.5960000e-01,
	   4.6070000e-01,
	   4.6120000e-01,
	   4.5940000e-01,
	   4.6110000e-01,
	   4.6220000e-01,
	   4.6010000e-01,
	   4.6110000e-01,
	   4.6240000e-01,
	   4.6000000e-01,
	   4.6080000e-01,
	   4.6200000e-01,
	   4.6080000e-01,
	   4.6100000e-01,
	   4.6150000e-01,
	   4.6220000e-01,
	   4.6050000e-01,
	   4.5950000e-01,
	   4.5920000e-01,
	   4.6050000e-01,
	   4.6090000e-01,
	   4.6000000e-01,
	   4.5880000e-01,
	   4.5830000e-01,
	   4.5630000e-01,
	   4.5650000e-01,
	   4.5800000e-01,
	   4.5690000e-01,
	   4.5570000e-01,
	   4.5560000e-01,
	   4.5510000e-01,
	   4.5380000e-01,
	   4.5380000e-01,
	   4.5290000e-01,
	   4.5350000e-01,
	   4.5290000e-01,
	   4.5230000e-01,
	   4.5210000e-01,
	   4.5160000e-01,
	   4.5130000e-01,
	   4.5210000e-01,
	   4.4940000e-01,
	   4.5030000e-01,
	   4.5190000e-01,
	   4.5000000e-01,
	   4.4640000e-01,
	   4.4890000e-01,
	   4.4930000e-01,
	   4.4560000e-01,
	   4.4520000e-01,
	   4.4590000e-01,
	   4.4450000e-01,
	   4.4380000e-01,
	   4.4260000e-01,
	   4.4170000e-01,
	   4.4090000e-01,
	   4.3780000e-01,
	   4.3770000e-01,
	   4.3780000e-01,
	   4.3540000e-01,
	   4.3250000e-01,
	   4.3280000e-01,
	   4.3150000e-01,
	   4.3120000e-01,
	   4.2990000e-01,
	   4.2910000e-01,
	   4.2680000e-01,
	   4.2590000e-01,
	   4.2390000e-01,
	   4.2140000e-01,
	   4.1920000e-01,
	   4.1980000e-01,
	   4.1760000e-01,
	   4.1580000e-01,
	   4.1510000e-01,
	   4.1480000e-01,
	   4.1290000e-01,
	   4.1080000e-01,
	   4.0980000e-01,
	   4.0940000e-01,
	   4.0490000e-01,
	   4.0370000e-01,
	   4.0270000e-01,
	   4.0100000e-01,
	   3.9720000e-01,
	   3.9740000e-01,
	   3.9360000e-01,
	   3.9060000e-01,
	   3.8940000e-01,
	   3.8870000e-01,
	   3.8350000e-01,
	   3.8180000e-01,
	   3.7850000e-01,
	   3.7630000e-01,
	   3.7250000e-01,
	   3.6960000e-01,
	   3.6680000e-01,
	   3.6430000e-01,
	   3.5970000e-01,
	   3.5760000e-01,
	   3.5450000e-01,
	   3.5040000e-01,
	   3.4370000e-01,
	   3.4170000e-01,
	   3.4040000e-01,
	   3.4000000e-01,
	   3.3540000e-01,
	   3.3230000e-01,
	   3.2850000e-01,
	   3.2710000e-01,
	   3.2410000e-01,
	   3.2200000e-01,
	   3.2090000e-01,
	   3.1840000e-01,
	   3.1450000e-01,
	   3.1410000e-01,
	   3.1140000e-01,
	   3.0730000e-01,
	   3.0620000e-01,
	   3.0520000e-01,
	   3.0260000e-01,
	   3.0020000e-01,
	   2.9760000e-01,
	   2.9670000e-01,
	   2.9580000e-01,
	   2.9540000e-01,
	   2.9380000e-01,
	   2.9240000e-01,
	   2.8960000e-01,
	   2.8910000e-01,
	   2.8700000e-01,
	   2.8580000e-01,
	   2.8390000e-01,
	   2.8380000e-01,
	   2.8140000e-01,
	   2.7970000e-01,
	   2.7800000e-01,
	   2.7680000e-01,
	   2.7470000e-01,
	   2.7360000e-01,
	   2.7240000e-01,
	   2.7180000e-01,
	   2.6990000e-01,
	   2.6970000e-01,
	   2.6650000e-01,
	   2.6420000e-01,
	   2.6370000e-01,
	   2.6480000e-01,
	   2.6280000e-01,
	   2.6040000e-01,
	   2.5970000e-01,
	   2.6040000e-01,
	   2.5930000e-01,
	   2.5740000e-01,
	   2.5760000e-01,
	   2.5680000e-01,
	   2.5600000e-01,
	   2.5720000e-01,
	   2.5530000e-01,
	   2.5250000e-01,
	   2.5340000e-01,
	   2.5390000e-01,
	   2.5520000e-01,
	   2.5390000e-01,
	   2.5360000e-01,
	   2.5390000e-01,
	   2.5500000e-01,
	   2.5330000e-01,
	   2.5260000e-01,
	   2.5270000e-01,
	   2.5170000e-01,
	   2.5190000e-01,
	   2.5290000e-01,
	   2.5270000e-01,
	   2.5290000e-01,
	   2.5450000e-01,
	   2.5370000e-01,
	   2.5200000e-01,
	   2.5320000e-01,
	   2.5480000e-01,
	   2.5470000e-01,
	   2.5500000e-01,
	   2.5500000e-01,
	   2.5490000e-01,
	   2.5380000e-01,
	   2.5450000e-01,
	   2.5640000e-01,
	   2.5640000e-01,
	   2.5710000e-01,
	   2.5890000e-01,
	   2.6030000e-01,
	   2.5880000e-01,
	   2.5770000e-01,
	   2.6040000e-01,
	   2.6100000e-01,
	   2.6010000e-01,
	   2.6250000e-01,
	   2.6360000e-01,
	   2.6280000e-01,
	   2.6380000e-01,
	   2.6490000e-01,
	   2.6520000e-01,
	   2.6640000e-01,
	   2.6720000e-01,
	   2.6720000e-01,
	   2.6580000e-01,
	   2.6500000e-01,
	   2.6620000e-01,
	   2.6640000e-01,
	   2.6490000e-01,
	   2.6390000e-01,
	   2.6380000e-01,
	   2.6360000e-01,
	   2.6390000e-01,
	   2.6510000e-01,
	   2.6430000e-01,
	   2.6250000e-01,
	   2.6340000e-01,
	   2.6370000e-01,
	   2.6240000e-01,
	   2.6200000e-01,
	   2.6170000e-01,
	   2.5960000e-01,
	   2.5790000e-01,
	   2.5760000e-01,
	   2.5790000e-01,
	   2.5620000e-01,
	   2.5440000e-01,
	   2.5420000e-01,
	   2.5220000e-01,
	   2.4880000e-01,
	   2.4730000e-01,
	   2.4870000e-01,
	   2.4980000e-01,
	   2.4860000e-01,
	   2.4880000e-01,
	   2.4690000e-01,
	   2.4640000e-01,
	   2.4600000e-01,
	   2.4390000e-01,
	   2.4250000e-01,
	   2.4270000e-01,
	   2.4230000e-01,
	   2.4060000e-01,
	   2.3970000e-01,
	   2.3890000e-01,
	   2.3880000e-01,
	   2.3850000e-01,
	   2.3780000e-01,
	   2.3650000e-01,
	   2.3730000e-01,
	   2.3860000e-01,
	   2.3910000e-01,
	   2.3940000e-01,
	   2.3970000e-01,
	   2.3810000e-01,
	   2.3890000e-01,
	   2.4060000e-01,
	   2.4210000e-01,
	   2.4420000e-01,
	   2.4500000e-01,
	   2.4470000e-01,
	   2.4770000e-01,
	   2.4960000e-01,
	   2.5060000e-01,
	   2.5310000e-01,
	   2.5580000e-01,
	   2.5570000e-01,
	   2.5930000e-01,
	   2.6150000e-01,
	   2.6350000e-01,
	   2.6510000e-01,
	   2.6820000e-01,
	   2.7180000e-01,
	   2.7580000e-01,
	   2.7600000e-01,
	   2.7940000e-01,
	   2.8290000e-01,
	   2.8700000e-01,
	   2.9000000e-01,
	   2.9580000e-01,
	   2.9830000e-01,
	   3.0510000e-01,
	   3.1010000e-01,
	   3.1510000e-01,
	   3.1660000e-01,
	   3.2180000e-01,
	   3.2760000e-01,
	   3.3170000e-01,
	   3.3430000e-01,
	   3.4080000e-01,
	   3.4340000e-01,
	   3.4840000e-01,
	   3.5320000e-01,
	   3.6010000e-01,
	   3.6480000e-01,
	   3.6780000e-01,
	   3.7100000e-01,
	   3.7540000e-01,
	   3.7830000e-01,
	   3.7980000e-01,
	   3.8290000e-01,
	   3.8620000e-01,
	   3.8480000e-01,
	   3.8840000e-01,
	   3.9150000e-01,
	   3.9310000e-01,
	   3.9660000e-01,
	   3.9890000e-01,
	   3.9960000e-01,
	   4.0000000e-01,
	   4.0270000e-01,
	   4.0370000e-01,
	   4.0480000e-01,
	   4.0400000e-01,
	   4.0350000e-01,
	   4.0390000e-01,
	   4.0470000e-01,
	   4.0330000e-01,
	   4.0590000e-01,
	   4.0710000e-01,
	   4.0780000e-01,
	   4.0740000e-01,
	   4.0800000e-01,
	   4.0860000e-01,
	   4.0800000e-01,
	   4.1010000e-01,
	   4.1090000e-01,
	   4.0700000e-01,
	   4.0970000e-01,
	   4.0970000e-01,
	   4.0920000e-01,
	   4.1010000e-01,
	   4.0980000e-01,
	   4.0890000e-01,
	   4.0930000e-01,
	   4.0860000e-01,
	   4.0630000e-01,
	   4.0680000e-01,
	   4.0880000e-01,
	   4.1270000e-01,
	   4.1300000e-01,
	   4.1240000e-01,
	   4.1290000e-01
	])

	m75b8 = np.array([
	   1.3290000e-01,
	   1.3800000e-01,
	   1.4380000e-01,
	   1.5450000e-01,
	   1.5850000e-01,
	   1.6880000e-01,
	   1.7640000e-01,
	   1.8640000e-01,
	   1.9440000e-01,
	   2.0970000e-01,
	   2.1980000e-01,
	   2.3720000e-01,
	   2.5050000e-01,
	   2.7020000e-01,
	   2.8200000e-01,
	   3.0510000e-01,
	   3.2180000e-01,
	   3.4540000e-01,
	   3.6080000e-01,
	   3.8680000e-01,
	   4.0560000e-01,
	   4.3230000e-01,
	   4.4890000e-01,
	   4.7400000e-01,
	   4.9280000e-01,
	   5.1640000e-01,
	   5.2970000e-01,
	   5.5040000e-01,
	   5.6070000e-01,
	   5.7590000e-01,
	   5.8710000e-01,
	   5.9940000e-01,
	   6.0420000e-01,
	   6.1250000e-01,
	   6.1620000e-01,
	   6.1970000e-01,
	   6.2230000e-01,
	   6.2650000e-01,
	   6.2700000e-01,
	   6.3120000e-01,
	   6.3430000e-01,
	   6.3700000e-01,
	   6.3870000e-01,
	   6.3770000e-01,
	   6.4150000e-01,
	   6.4390000e-01,
	   6.4110000e-01,
	   6.4250000e-01,
	   6.4570000e-01,
	   6.4470000e-01,
	   6.4420000e-01,
	   6.4720000e-01,
	   6.4680000e-01,
	   6.4690000e-01,
	   6.4830000e-01,
	   6.5140000e-01,
	   6.5210000e-01,
	   6.5510000e-01,
	   6.5680000e-01,
	   6.5670000e-01,
	   6.5630000e-01,
	   6.5610000e-01,
	   6.5740000e-01,
	   6.5860000e-01,
	   6.5730000e-01,
	   6.5640000e-01,
	   6.5950000e-01,
	   6.5660000e-01,
	   6.5690000e-01,
	   6.6050000e-01,
	   6.6130000e-01,
	   6.5810000e-01,
	   6.6040000e-01,
	   6.5980000e-01,
	   6.5810000e-01,
	   6.5900000e-01,
	   6.6130000e-01,
	   6.6090000e-01,
	   6.6110000e-01,
	   6.6090000e-01,
	   6.6010000e-01,
	   6.6070000e-01,
	   6.5960000e-01,
	   6.5940000e-01,
	   6.6070000e-01,
	   6.6020000e-01,
	   6.6050000e-01,
	   6.6080000e-01,
	   6.5970000e-01,
	   6.5920000e-01,
	   6.6160000e-01,
	   6.6080000e-01,
	   6.5830000e-01,
	   6.5910000e-01,
	   6.6090000e-01,
	   6.5850000e-01,
	   6.5790000e-01,
	   6.5830000e-01,
	   6.5650000e-01,
	   6.5730000e-01,
	   6.5750000e-01,
	   6.5500000e-01,
	   6.5410000e-01,
	   6.5380000e-01,
	   6.5280000e-01,
	   6.5510000e-01,
	   6.5300000e-01,
	   6.5180000e-01,
	   6.5410000e-01,
	   6.5270000e-01,
	   6.4990000e-01,
	   6.5160000e-01,
	   6.5140000e-01,
	   6.4840000e-01,
	   6.4920000e-01,
	   6.4890000e-01,
	   6.4680000e-01,
	   6.4820000e-01,
	   6.4930000e-01,
	   6.4630000e-01,
	   6.4550000e-01,
	   6.4540000e-01,
	   6.4570000e-01,
	   6.4530000e-01,
	   6.4410000e-01,
	   6.4230000e-01,
	   6.4300000e-01,
	   6.3990000e-01,
	   6.3870000e-01,
	   6.3880000e-01,
	   6.3660000e-01,
	   6.3320000e-01,
	   6.3420000e-01,
	   6.3430000e-01,
	   6.3180000e-01,
	   6.2930000e-01,
	   6.3050000e-01,
	   6.2620000e-01,
	   6.2410000e-01,
	   6.2460000e-01,
	   6.2350000e-01,
	   6.1940000e-01,
	   6.1620000e-01,
	   6.1150000e-01,
	   6.1000000e-01,
	   6.0800000e-01,
	   6.0530000e-01,
	   6.0390000e-01,
	   6.0180000e-01,
	   5.9750000e-01,
	   5.9800000e-01,
	   5.9470000e-01,
	   5.8950000e-01,
	   5.8920000e-01,
	   5.8890000e-01,
	   5.8390000e-01,
	   5.8110000e-01,
	   5.7690000e-01,
	   5.7430000e-01,
	   5.7130000e-01,
	   5.6870000e-01,
	   5.6430000e-01,
	   5.6260000e-01,
	   5.5940000e-01,
	   5.5750000e-01,
	   5.5470000e-01,
	   5.5150000e-01,
	   5.4480000e-01,
	   5.4450000e-01,
	   5.4090000e-01,
	   5.3640000e-01,
	   5.3010000e-01,
	   5.2840000e-01,
	   5.2610000e-01,
	   5.2250000e-01,
	   5.1530000e-01,
	   5.1010000e-01,
	   5.0600000e-01,
	   5.0380000e-01,
	   4.9790000e-01,
	   4.9440000e-01,
	   4.9280000e-01,
	   4.9090000e-01,
	   4.8690000e-01,
	   4.8730000e-01,
	   4.8160000e-01,
	   4.7750000e-01,
	   4.7550000e-01,
	   4.7230000e-01,
	   4.6800000e-01,
	   4.6580000e-01,
	   4.6410000e-01,
	   4.6090000e-01,
	   4.5780000e-01,
	   4.5580000e-01,
	   4.5060000e-01,
	   4.4760000e-01,
	   4.4580000e-01,
	   4.4370000e-01,
	   4.4190000e-01,
	   4.3910000e-01,
	   4.3760000e-01,
	   4.3680000e-01,
	   4.3360000e-01,
	   4.3140000e-01,
	   4.3070000e-01,
	   4.2760000e-01,
	   4.2390000e-01,
	   4.2560000e-01,
	   4.2420000e-01,
	   4.1960000e-01,
	   4.1890000e-01,
	   4.1800000e-01,
	   4.1520000e-01,
	   4.1450000e-01,
	   4.1120000e-01,
	   4.0980000e-01,
	   4.0760000e-01,
	   4.0650000e-01,
	   4.0500000e-01,
	   4.0400000e-01,
	   4.0260000e-01,
	   4.0080000e-01,
	   4.0010000e-01,
	   3.9830000e-01,
	   3.9720000e-01,
	   3.9680000e-01,
	   3.9300000e-01,
	   3.9120000e-01,
	   3.9070000e-01,
	   3.9140000e-01,
	   3.8830000e-01,
	   3.8840000e-01,
	   3.8910000e-01,
	   3.8750000e-01,
	   3.8640000e-01,
	   3.8670000e-01,
	   3.8660000e-01,
	   3.8550000e-01,
	   3.8550000e-01,
	   3.8590000e-01,
	   3.8530000e-01,
	   3.8190000e-01,
	   3.8170000e-01,
	   3.8320000e-01,
	   3.8190000e-01,
	   3.8010000e-01,
	   3.8110000e-01,
	   3.8100000e-01,
	   3.8100000e-01,
	   3.8210000e-01,
	   3.8050000e-01,
	   3.7850000e-01,
	   3.8100000e-01,
	   3.8080000e-01,
	   3.8010000e-01,
	   3.7990000e-01,
	   3.8030000e-01,
	   3.8170000e-01,
	   3.8180000e-01,
	   3.8040000e-01,
	   3.8050000e-01,
	   3.8200000e-01,
	   3.8120000e-01,
	   3.8300000e-01,
	   3.8550000e-01,
	   3.8520000e-01,
	   3.8480000e-01,
	   3.8660000e-01,
	   3.8690000e-01,
	   3.8750000e-01,
	   3.8780000e-01,
	   3.8880000e-01,
	   3.8940000e-01,
	   3.9030000e-01,
	   3.9210000e-01,
	   3.9360000e-01,
	   3.9410000e-01,
	   3.9430000e-01,
	   3.9480000e-01,
	   3.9400000e-01,
	   3.9460000e-01,
	   3.9540000e-01,
	   3.9560000e-01,
	   3.9460000e-01,
	   3.9380000e-01,
	   3.9550000e-01,
	   3.9390000e-01,
	   3.9260000e-01,
	   3.9450000e-01,
	   3.9420000e-01,
	   3.9310000e-01,
	   3.9340000e-01,
	   3.9260000e-01,
	   3.9310000e-01,
	   3.9150000e-01,
	   3.9160000e-01,
	   3.9010000e-01,
	   3.8890000e-01,
	   3.8680000e-01,
	   3.8860000e-01,
	   3.8810000e-01,
	   3.8570000e-01,
	   3.8440000e-01,
	   3.8350000e-01,
	   3.8160000e-01,
	   3.8070000e-01,
	   3.7830000e-01,
	   3.7590000e-01,
	   3.7550000e-01,
	   3.7890000e-01,
	   3.7780000e-01,
	   3.7560000e-01,
	   3.7420000e-01,
	   3.7220000e-01,
	   3.6960000e-01,
	   3.6910000e-01,
	   3.6610000e-01,
	   3.6410000e-01,
	   3.6340000e-01,
	   3.6350000e-01,
	   3.6150000e-01,
	   3.6070000e-01,
	   3.5750000e-01,
	   3.5640000e-01,
	   3.5530000e-01,
	   3.5560000e-01,
	   3.5410000e-01,
	   3.5430000e-01,
	   3.5290000e-01,
	   3.5390000e-01,
	   3.5510000e-01,
	   3.5380000e-01,
	   3.5340000e-01,
	   3.5510000e-01,
	   3.5610000e-01,
	   3.5680000e-01,
	   3.5760000e-01,
	   3.5850000e-01,
	   3.5980000e-01,
	   3.6060000e-01,
	   3.6410000e-01,
	   3.6510000e-01,
	   3.6810000e-01,
	   3.6900000e-01,
	   3.7320000e-01,
	   3.7430000e-01,
	   3.7820000e-01,
	   3.8070000e-01,
	   3.8360000e-01,
	   3.8630000e-01,
	   3.8920000e-01,
	   3.9260000e-01,
	   3.9710000e-01,
	   3.9970000e-01,
	   4.0660000e-01,
	   4.1020000e-01,
	   4.1730000e-01,
	   4.2250000e-01,
	   4.3160000e-01,
	   4.3570000e-01,
	   4.4130000e-01,
	   4.4650000e-01,
	   4.5570000e-01,
	   4.6070000e-01,
	   4.6830000e-01,
	   4.7400000e-01,
	   4.8380000e-01,
	   4.8960000e-01,
	   5.0300000e-01,
	   5.0890000e-01,
	   5.1750000e-01,
	   5.2580000e-01,
	   5.3690000e-01,
	   5.4210000e-01,
	   5.5050000e-01,
	   5.5510000e-01,
	   5.6450000e-01,
	   5.6890000e-01,
	   5.7320000e-01,
	   5.7700000e-01,
	   5.8320000e-01,
	   5.8580000e-01,
	   5.8990000e-01,
	   5.9260000e-01,
	   5.9760000e-01,
	   6.0020000e-01,
	   6.0630000e-01,
	   6.0880000e-01,
	   6.1070000e-01,
	   6.1120000e-01,
	   6.1460000e-01,
	   6.1320000e-01,
	   6.1700000e-01,
	   6.2220000e-01,
	   6.1910000e-01,
	   6.1670000e-01,
	   6.2160000e-01,
	   6.2360000e-01,
	   6.1950000e-01,
	   6.2130000e-01,
	   6.2230000e-01,
	   6.2340000e-01,
	   6.2460000e-01,
	   6.2640000e-01,
	   6.2290000e-01,
	   6.2500000e-01,
	   6.2670000e-01,
	   6.2950000e-01,
	   6.3130000e-01,
	   6.2930000e-01,
	   6.3040000e-01,
	   6.3330000e-01,
	   6.3140000e-01,
	   6.2860000e-01,
	   6.2920000e-01,
	   6.3180000e-01,
	   6.3300000e-01,
	   6.3020000e-01,
	   6.2490000e-01,
	   6.2770000e-01
	])

	# glossy versions of 10YR and 5GY for comparison
	# 10YR5/10
	m10yr5 = np.array([
		0.012332, # 380
		0.012043,
		0.011717,
		0.011352,
		0.010949,
		0.016199,
		0.017594,
		0.018379,
		0.018991,
		0.019719,
		0.020958,
		0.023837,
		0.032334,
		0.060861,
		0.106745,
		0.140234,
		0.156951,
		0.174581,
		0.208961,
		0.259478,
		0.302108,
		0.325517,
		0.333406,
		0.334332,
		0.332448,
		0.329418,
		0.326735,
		0.323567,
		0.320636,
		0.317198,
		0.314651,
		0.312537,
		0.310873,
		0.309138,
		0.305939,
		0.302531, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 10YR6/10
	m10yr6 = np.array([
		0.034696, # 380
		0.034299,
		0.03385,
		0.033346,
		0.032786,
		0.036301,
		0.038371,
		0.040094,
		0.041566,
		0.042744,
		0.044244,
		0.047367,
		0.059028,
		0.09866,
		0.166275,
		0.220733,
		0.25004,
		0.276238,
		0.318942,
		0.378976,
		0.429468,
		0.458221,
		0.469551,
		0.47277,
		0.472918,
		0.471793,
		0.471481,
		0.469715,
		0.468048,
		0.465578,
		0.463179,
		0.461716,
		0.462856,
		0.461125,
		0.458641,
		0.455757, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 10YR7/10
	m10yr7 = np.array([
		0.066231, # 380
		0.065675,
		0.065047,
		0.064344,
		0.063561,
		0.06886,
		0.072356,
		0.075154,
		0.077795,
		0.079896,
		0.081973,
		0.08584,
		0.101576,
		0.155603,
		0.25041,
		0.333024,
		0.381987,
		0.421049,
		0.476274,
		0.549704,
		0.608034,
		0.640799,
		0.654189,
		0.659383,
		0.662338,
		0.664762,
		0.668311,
		0.670207,
		0.670854,
		0.669071,
		0.668089,
		0.668937,
		0.671756,
		0.673282,
		0.672417,
		0.670845, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 10YR8/10
	m10yr8 = np.array([
		0.12431, # 380
		0.123607,
		0.122814,
		0.121924,
		0.120932,
		0.12709,
		0.130249,
		0.133506,
		0.136786,
		0.139491,
		0.142047,
		0.146205,
		0.164531,
		0.233954,
		0.361093,
		0.477832,
		0.548543,
		0.597321,
		0.658102,
		0.739037,
		0.805007,
		0.843502,
		0.86041,
		0.867769,
		0.871954,
		0.87487,
		0.879254,
		0.881513,
		0.882222,
		0.879091,
		0.878238,
		0.879804,
		0.884059,
		0.885425,
		0.882944,
		0.880923, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5GY5/10
	m5gy5 = np.array([
		0.012664, # 380
		0.012341,
		0.011977,
		0.011568,
		0.011115,
		0.015092,
		0.016432,
		0.017577,
		0.018949,
		0.021024,
		0.023912,
		0.027906,
		0.039837,
		0.084208,
		0.178723,
		0.282086,
		0.339094,
		0.342394,
		0.314772,
		0.278631,
		0.23888,
		0.197525,
		0.156496,
		0.124397,
		0.105102,
		0.094838,
		0.088166,
		0.082435,
		0.079019,
		0.079228,
		0.082376,
		0.087889,
		0.09505,
		0.100989,
		0.100258,
		0.098844, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5GY6/10
	m5gy6 = np.array([
		0.032315, # 380
		0.031884,
		0.031398,
		0.030852,
		0.030242,
		0.032329,
		0.03415,
		0.035964,
		0.037998,
		0.040435,
		0.043275,
		0.04794,
		0.061653,
		0.116183,
		0.23943,
		0.388322,
		0.485203,
		0.498968,
		0.458571,
		0.404354,
		0.346137,
		0.286732,
		0.227724,
		0.180557,
		0.151948,
		0.13625,
		0.126095,
		0.117313,
		0.112108,
		0.112244,
		0.117827,
		0.126935,
		0.138017,
		0.145016,
		0.144087,
		0.140965, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5GY7/10
	m5gy7 = np.array([
		0.040501, # 380
		0.039827,
		0.039066,
		0.038213,
		0.037259,
		0.040034,
		0.044292,
		0.051027,
		0.062755,
		0.083806,
		0.120887,
		0.187442,
		0.289999,
		0.403185,
		0.487152,
		0.527593,
		0.542556,
		0.549095,
		0.551625,
		0.545624,
		0.517071,
		0.469334,
		0.408376,
		0.352003,
		0.31403,
		0.291419,
		0.2754,
		0.260754,
		0.251191,
		0.250301,
		0.257165,
		0.269653,
		0.286497,
		0.29664,
		0.295497,
		0.293521, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5GY8/10
	m5gy8 = np.array([
		0.065944, # 380
		0.065028,
		0.063995,
		0.062836,
		0.061541,
		0.067324,
		0.073985,
		0.084234,
		0.103077,
		0.138398,
		0.195627,
		0.279701,
		0.398815,
		0.543652,
		0.664439,
		0.725444,
		0.746586,
		0.745688,
		0.727935,
		0.704973,
		0.671825,
		0.628966,
		0.573402,
		0.519301,
		0.48158,
		0.459428,
		0.444344,
		0.429995,
		0.420806,
		0.421169,
		0.431991,
		0.451351,
		0.475862,
		0.491195,
		0.491365,
		0.487952, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# other blues
	m5b4_1 = np.array([
		0.178745, # 380
		0.178802,
		0.178866,
		0.178937,
		0.179031,
		0.192057,
		0.204833,
		0.218286,
		0.231725,
		0.243877,
		0.249609,
		0.24821,
		0.239283,
		0.224377,
		0.20376,
		0.177949,
		0.149619,
		0.120234,
		0.093083,
		0.07434,
		0.06398,
		0.05786,
		0.052017,
		0.047748,
		0.047064,
		0.049879,
		0.054122,
		0.057921,
		0.060903,
		0.06179,
		0.059133,
		0.056417,
		0.056283,
		0.058632,
		0.062006,
		0.066158, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5B5/6
	m5b5_1 = np.array([
		0.25803, # 380
		0.258079,
		0.258134,
		0.258196,
		0.258278,
		0.27231,
		0.289218,
		0.306161,
		0.323487,
		0.343154,
		0.361538,
		0.371382,
		0.368246,
		0.350666,
		0.320172,
		0.280711,
		0.238678,
		0.196393,
		0.15764,
		0.131575,
		0.118184,
		0.11143,
		0.105163,
		0.100138,
		0.101005,
		0.10889,
		0.121262,
		0.134619,
		0.144545,
		0.1436,
		0.131814,
		0.120245,
		0.115894,
		0.119029,
		0.127256,
		0.144525, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5B6/6
	m5b6_1 = np.array([
		0.374389, # 380
		0.374422,
		0.374459,
		0.374501,
		0.374574,
		0.400569,
		0.432946,
		0.461152,
		0.482049,
		0.497958,
		0.507464,
		0.511782,
		0.508655,
		0.494051,
		0.465085,
		0.422165,
		0.371097,
		0.315289,
		0.260843,
		0.22209,
		0.200565,
		0.188663,
		0.177296,
		0.168512,
		0.16899,
		0.179156,
		0.19418,
		0.207963,
		0.217457,
		0.217895,
		0.207884,
		0.197167,
		0.196282,
		0.203308,
		0.214796,
		0.231492, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 5B7/6
	m5b7_1 = np.array([
		0.56984, # 380
		0.570055,
		0.570298,
		0.570571,
		0.570887,
		0.588852,
		0.608936,
		0.624073,
		0.637839,
		0.651186,
		0.659546,
		0.660242,
		0.65223,
		0.634396,
		0.607741,
		0.57188,
		0.528807,
		0.476569,
		0.41871,
		0.369485,
		0.331277,
		0.304091,
		0.280917,
		0.26285,
		0.252911,
		0.247474,
		0.24495,
		0.246894,
		0.253137,
		0.255556,
		0.251243,
		0.24333,
		0.23233,
		0.223291,
		0.227917,
		0.250112, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 7.5B5/4
	m75b5_1 = np.array([
		0.261784, # 380
		0.261876,
		0.26198,
		0.262097,
		0.262235,
		0.272347,
		0.281291,
		0.289641,
		0.296922,
		0.301383,
		0.302441,
		0.300763,
		0.295468,
		0.287397,
		0.274845,
		0.257209,
		0.236216,
		0.212185,
		0.187201,
		0.169182,
		0.158874,
		0.152215,
		0.143971,
		0.136691,
		0.135623,
		0.140887,
		0.149415,
		0.158116,
		0.166126,
		0.167674,
		0.160939,
		0.152913,
		0.148741,
		0.149692,
		0.155841,
		0.172085, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 7.5B6/4
	m75b6_1 = np.array([
		0.400169, # 380
		0.400346,
		0.400546,
		0.400771,
		0.401027,
		0.410578,
		0.420516,
		0.426882,
		0.428536,
		0.425265,
		0.420981,
		0.416922,
		0.412783,
		0.407012,
		0.397587,
		0.381616,
		0.358683,
		0.328331,
		0.292359,
		0.26341,
		0.245639,
		0.236064,
		0.226997,
		0.220085,
		0.220996,
		0.23089,
		0.245082,
		0.256564,
		0.261856,
		0.256971,
		0.242915,
		0.229333,
		0.225293,
		0.229032,
		0.236621,
		0.246813, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 7.5B7/4
	m75b7_1 = np.array([
		0.518759, # 380
		0.518908,
		0.519076,
		0.519265,
		0.519485,
		0.534988,
		0.546915,
		0.558654,
		0.571024,
		0.57923,
		0.582938,
		0.582082,
		0.57567,
		0.56471,
		0.549078,
		0.526794,
		0.498858,
		0.463611,
		0.42245,
		0.389295,
		0.367166,
		0.352971,
		0.338885,
		0.327905,
		0.326381,
		0.333958,
		0.346241,
		0.357724,
		0.366898,
		0.368351,
		0.361228,
		0.352629,
		0.350633,
		0.353927,
		0.362951,
		0.379432, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	# 7.5B8/4
	m75b8_1 = np.array([
		0.704227, # 380
		0.704429,
		0.704657,
		0.704914,
		0.70521,
		0.723661,
		0.738402,
		0.756363,
		0.778921,
		0.79822,
		0.808638,
		0.806992,
		0.792298,
		0.770147,
		0.741298,
		0.705929,
		0.667284,
		0.622554,
		0.571451,
		0.530456,
		0.502657,
		0.483397,
		0.462854,
		0.445685,
		0.439752,
		0.445489,
		0.457057,
		0.466592,
		0.474052,
		0.476135,
		0.469816,
		0.46184,
		0.462779,
		0.469476,
		0.477307,
		0.489983, # 730
		np.nan, # 740
		np.nan, # 750
		np.nan, # 760
		np.nan, # 770
		np.nan, # 780
		np.nan, # 790
		np.nan # 800
	])

	xvalues_10nm = np.empty(43)
	for i in range(0, 43):
		xvalues_10nm[i] = i*10 + 380

	plt.plot(xvalues, yr6, 'r')
	plt.plot(xvalues, yr7, 'r')
	plt.plot(xvalues, yr8, 'r')
	plt.plot(xvalues, gy8, 'g')
	plt.plot(xvalues, b4, 'c')
	plt.plot(xvalues, b5, 'c')
	plt.plot(xvalues, b6, 'c')
	plt.plot(xvalues, b7, 'c')
	plt.plot(xvalues, m75b5, 'b')
	plt.plot(xvalues, m75b6, 'b')
	plt.plot(xvalues, m75b7, 'b')
	plt.plot(xvalues, m75b8, 'b')
	plt.show()

	plt.plot(xvalues, b4, 'c')
	plt.plot(xvalues, b5, 'c')
	plt.plot(xvalues, b6, 'c')
	plt.plot(xvalues, b7, 'c')
	plt.plot(xvalues, m75b5, 'b')
	plt.plot(xvalues, m75b6, 'b')
	plt.plot(xvalues, m75b7, 'b')
	plt.plot(xvalues, m75b8, 'b')
	plt.plot(xvalues_10nm, m5b4_1, 'y')
	plt.plot(xvalues_10nm, m5b5_1, 'y')
	plt.plot(xvalues_10nm, m5b6_1, 'y')
	plt.plot(xvalues_10nm, m5b7_1, 'y')
	plt.plot(xvalues_10nm, m75b5_1, 'g')
	plt.plot(xvalues_10nm, m75b6_1, 'g')
	plt.plot(xvalues_10nm, m75b7_1, 'g')
	plt.plot(xvalues_10nm, m75b8_1, 'g')
	plt.show()

	plt.plot(xvalues, yr6, 'r')
	plt.plot(xvalues, yr7, 'r')
	plt.plot(xvalues, yr8, 'r')
	plt.plot(xvalues, gy8, 'g')
	plt.plot(xvalues_10nm, m10yr5, 'm')
	plt.plot(xvalues_10nm, m10yr6, 'm')
	plt.plot(xvalues_10nm, m10yr7, 'm')
	plt.plot(xvalues_10nm, m10yr8, 'm')
	plt.plot(xvalues_10nm, m5gy5, 'y')
	plt.plot(xvalues_10nm, m5gy6, 'y')
	plt.plot(xvalues_10nm, m5gy7, 'y')
	plt.plot(xvalues_10nm, m5gy8, 'y')
	plt.show()

# criteria
if (args.pvalues):
	print("Success p-values: 35/40")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(35, 40, p=i/16, alternative='greater').pvalue))
	print("Failure p-values: 35/40")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(34, 40, p=i/16, alternative='less').pvalue))
	print("Success p-values: 68/80")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(68, 80, p=i/16, alternative='greater').pvalue))
	print("Failure p-values: 68/80")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(67, 80, p=i/16, alternative='less').pvalue))
	print("Success p-values: 41/64")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(41, 64, p=i/16, alternative='greater').pvalue))
	print("Failure p-values: 41/64")
	for i in range(17):
		print(str(i) + ": " + str(binomtest(40, 64, p=i/16, alternative='less').pvalue))

# ERG data revised with Plot Digitizer
# Since these are dot plots where the intended X values are integers at 10 nm intervals,
# greater precision is only meaningful for the Y values, so the generated X values are rounded off.
# Note also the previous data was incorrectly converted to linear sensitivity by using math.exp()
# rather than 10.
if (args.erg2):
	# figure 1
	fig1 = np.array([
		[460.123,-0.766813],
		[469.975,-0.657009],
		[480.248,-0.540837],
		[490.108,-0.403942],
		[500.164,-0.311671],
		[510.012,-0.217803],
		[520.270,-0.154221],
		[530.315,-0.103385],
		[540.355,-0.0716718],
		[550.187,-0.0367684],
		[560.438,-0.000278095],
		[570.257,-0.0115901],
		[580.277,-0.0515907],
		[590.297,-0.0931850],
		[600.318,-0.131592],
		[610.324,-0.222589],
		[620.322,-0.347052],
		[630.086,-0.557568],
		[640.066,-0.747370],
		[650.031,-0.989762],
	])
	
	for i in range(20): plt.plot(round(fig1[i][0]), fig1[i][1], 'o')
	plt.show()
	
	# figure 2
	fig2 = np.array([
		[370.193,-0.677121],
		[380.275,-0.687269],
		[390.078,-0.699926],
		[400.152,-0.779149],
		[410.232,-0.806880],
		[420.171,-0.853447],
		[430.112,-0.871130],
		[440.189,-0.930258],
		[450.134,-0.921566],
		[460.236,-0.779752],
		[470.186,-0.728361],
		[480.009,-0.579009],
		[490.118,-0.378168],
		[500.350,-0.315476],
		[510.446,-0.216362],
		[520.262,-0.124781],
		[530.209,-0.0997632],
		[540.296,-0.0709791],
		[550.104,-0.0421922],
		[560.333,-0.00587418],
		[570.135,-0.0135080],
		[580.351,-0.0826846],
		[590.145,-0.158136],
		[600.223,-0.209729],
		[610.156,-0.295229],
		[620.371,-0.371941],
		[630.153,-0.547864],
		[640.073,-0.736347],
		[650.120,-1.03284],
		[660.035,-1.26528],
		[670.081,-1.56805],
	])
	
	for i in range(31): plt.plot(round(fig2[i][0]), fig2[i][1], 'o')
	plt.show()
	
	# figure 3
	fig3 = np.array([
		[390.000,0.00892070],
		[400.123,-0.0216754],
		[410.253,-0.0354776],
		[420.018,-0.0217969],
		[430.139,-0.0615532],
		[439.913,-0.0219184],
		[450.096,0.107790],
		[460.243,0.138262],
		[469.954,0.00843243],
		[480.115,0.0785991],
		[490.269,0.128919],
		[500.038,0.153286],
		[510.138,0.0585685],
		[520.269,0.0478197],
		[530.036,0.0676073],
		[540.175,0.0782324],
		[549.909,0.00794416],
		[560.052,0.0292562],
		[569.797,-0.0120246],
		[580.311,-0.00140178],
		[590.063,-0.0228353],
		[600.217,0.0274842],
		[609.944,-0.0611245],
		[620.108,0.0166757],
		[630.245,0.0227207],
		[640.006,0.0257145],
		[650.170,0.105041],
		[659.886,-0.0141014],
		[670.022,-0.0126366],
	])
	
	for i in range(29): plt.plot(round(fig3[i][0]), fig3[i][1], 'o')
	plt.show()
	
	# conversion to linear sensitivity
	for i in range(20): plt.plot(round(fig1[i][0]), 10**fig1[i][1], 'ok')
	for i in range(31): plt.plot(round(fig2[i][0]), 10**fig2[i][1], 'or')
	for i in range(29): plt.plot(round(fig3[i][0]), 10**fig3[i][1], 'ob')
	plt.show()
	# fig. 3 combined with the others for context
	for i in range(29): plt.plot(round(fig3[i][0]), 10**(fig3[i][1] + fig2[i+2][1]), 'ok')
	for i in range(20): plt.plot(round(fig3[i+7][0]), 10**(fig3[i+7][1] + fig1[i][1]), 'or')
	plt.show()
	
	# A different approach this time: we'll show what properties the lens would need to
	# have if the "real" response has a certain shape. o = observed, p = predicted
	# The results of this don't fit the idea that the "ocular trough" would explain
	# something because introducing a 500-nm template would require an overall
	# steeper slope rather than a trough. If we don't add this, the curve should be
	# similar to the mouse but a bit steeper in the UV. Farther down I've revisited
	# specifying the lens/media properties, so I've commented these plots out for now.
	x = np.empty(401)
	for i in range(401): x[i] = i+300
	y_p2 = np.empty(401)
	for i in range(401): y_p2[i] = vpt(i+300, args.sw)*0.1 + vpt(i+300, args.lw)
	y_p3 = np.empty(401)
	for i in range(401): y_p3[i] = vpt(i+300, args.sw)*0.1 + vpt(i+300, args.mw)*0.1 + vpt(i+300, args.lw)
	
	# 1a: figure 1
	x1 = np.empty(20)
	for i in range(20): x1[i] = round(fig1[i][0])
	y1a_o = np.empty(20)
	for i in range(20): y1a_o[i] = 10**fig1[i][1]
	y1a_diff = np.empty(20)
	for i in range(20): y1a_diff[i] = y1a_o[i] / y_p2[i*10+160]
	#plt.plot(x1, y1a_o, 'o-k')
	#plt.plot(x, y_p2, '--k')
	#plt.plot(x1, y1a_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.show()
	for i in range(20): y1a_diff[i] = y1a_o[i] / y_p3[i*10+160]
	#plt.plot(x1, y1a_o, 'ok')
	#plt.plot(x, y_p3, '--k')
	#plt.plot(x1, y1a_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.show()
	
	# 1b: figure 1 + 3
	y1b_o = np.empty(20)
	for i in range(20): y1b_o[i] = 10**(fig1[i][1] + fig3[i+7][1])
	y1b_diff = np.empty(20)
	for i in range(20): y1b_diff[i] = y1b_o[i] / y_p2[i*10+160]
	#plt.plot(x1, y1b_o, 'ok')
	#plt.plot(x, y_p2, '--k')
	#plt.plot(x1, y1b_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.show()
	for i in range(20): y1b_diff[i] = y1b_o[i] / y_p3[i*10+160]
	#plt.plot(x1, y1b_o, 'ok')
	#plt.plot(x, y_p3, '--k')
	#plt.plot(x1, y1b_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.show()
	
	# 2a: figure 2
	x2a = np.empty(31)
	for i in range(31): x2a[i] = round(fig2[i][0])
	y2a_o = np.empty(31)
	for i in range(31): y2a_o[i] = 10**fig2[i][1]
	y2a_diff = np.empty(31)
	for i in range(31): y2a_diff[i] = y2a_o[i] / y_p2[i*10+70]
	#plt.plot(x2a, y2a_o, 'o-k')
	#plt.plot(x, y_p2, '--k')
	#plt.plot(x2a, y2a_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	# try fitting the Lamb 1995 function to the result
	"""x2a_lessnoise = np.empty(19) # 31 - 5 (450-480) - 7 (610-670)
	y2a_lessnoise = np.empty(19)
	for i in range(8):
		x2a_lessnoise[i] = x2a[i]
		y2a_lessnoise[i] = y2a_diff[i]
	for i in range(9, 19):
		x2a_lessnoise[i] = x2a[i+5]
		y2a_lessnoise[i] = y2a_diff[i+5]
	y2a_diff_fit0 = scipy.optimize.curve_fit(filter_fit, x2a_lessnoise, y2a_lessnoise, p0=[0.04, 350, 15, 0.11, 500, 80])
	print(y2a_diff_fit0[0])
	y2a_diff_fit = filter_fit(x, *y2a_diff_fit0[0])
	plt.plot(x, y2a_diff_fit, '-.k')"""
	#plt.show()
	for i in range(31): y2a_diff[i] = y2a_o[i] / y_p3[i*10+70]
	#plt.plot(x2a, y2a_o, 'ok')
	#plt.plot(x, y_p3, '--k')
	#plt.plot(x2a, y2a_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.plot(x, y2a_diff_fit, '-.k')
	#plt.show()
	
	# 2b: figure 2 + 3
	x2b = np.empty(29)
	for i in range(29): x2b[i] = round(fig2[i+2][0])
	y2b_o = np.empty(29)
	for i in range(29): y2b_o[i] = 10**(fig2[i+2][1] + fig3[i][1])
	y2b_diff = np.empty(29)
	for i in range(29): y2b_diff[i] = y2b_o[i] / y_p2[i*10+90]
	#plt.plot(x2b, y2b_o, 'ok')
	#plt.plot(x, y_p2, '--k')
	#plt.plot(x2b, y2b_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.plot(x, y2a_diff_fit, '-.k')
	#plt.show()
	for i in range(29): y2b_diff[i] = y2b_o[i] / y_p3[i*10+90]
	#plt.plot(x2b, y2b_o, 'ok')
	#plt.plot(x, y_p3, '--k')
	#plt.plot(x2b, y2b_diff, 's-k', mfc='w')
	#plt.plot(xvalues, mouse_filter_data/100, ':k')
	#plt.plot(x, y2a_diff_fit, '-.k')
	#plt.show()
	
	# Let's also revisit what we did previously using known ocular media transmission. This
	# time we'll use a re-digitized Thylamys and a new digitization of the brushtail possum
	# (Vlahos 2012). My prediction is that one or both of these species has the necessary
	# properties to "hide" a 500-nm pigment: Thylamys has a considerably steeper slope
	# than the mouse and many other vertebrates, and the brushtail has the "ocular trough"
	# near 500 nm. Thylamys also has a sort of dip or flat spot at about 450-500 nm but
	# bounces up at 484, so this region could just be noisy.
	# If we fit one L/M template and the value selected is more than 555 nm, this is more
	# likely to represent only one cone type, whereas if it's less than 555 it might
	# represent two.
	
	# Thylamys elegans lens (Palacios et al. 2010, fig. 7)
	# As with the ERG data this is a dot plot, apparently with intervals of 4 nm (but the
	# text says measurements were made every 20 nm). Relative to the value at 700 nm,
	# the 50% transmission wavelength is between 372 and 376.
	thylamys_lens = np.array([
		[300,1.99085],
		[303.883,2.84897],
		[308.091,3.02060],
		[311.974,3.36384],
		[316.181,4.56522],
		[320.065,5.28604],
		[324.272,6.00687],
		[328.155,6.76201],
		[332.362,7.58581],
		[336.246,8.64989],
		[340.129,8.68421],
		[344.337,9.61098],
		[348.220,10.0915],
		[352.104,10.7094],
		[356.311,11.1899],
		[360.194,12.1167],
		[364.078,12.2540],
		[367.961,12.4600],
		[372.006,12.9405],
		[376.133,13.3009],
		[380.016,13.6098],
		[383.900,14.1505],
		[388.026,14.4079],
		[392.152,14.8970],
		[396.036,14.9485],
		[399.919,15.2574],
		[404.045,15.8238],
		[407.929,15.8753],
		[412.055,15.9010],
		[416.181,16.6476],
		[420.065,17.2912],
		[423.948,17.7031],
		[428.074,17.4199],
		[432.201,17.8061],
		[436.084,17.8318],
		[439.968,18.4239],
		[444.094,18.7843],
		[447.977,18.8616],
		[452.104,18.8358],
		[455.987,18.6556],
		[460.113,19.0675],
		[463.997,18.7071],
		[467.880,18.8873],
		[472.006,18.9645],
		[476.133,19.1705],
		[480.016,19.2477],
		[484.142,20.6121],
		[487.783,20.5606],
		[491.909,20.2002],
		[496.036,20.2260],
		[500.162,19.9943],
		[504.045,20.1745],
		[507.929,20.5092],
		[512.055,20.6894],
		[516.181,20.9468],
		[520.065,21.1785],
		[523.948,21.0498],
		[528.074,22.2855],
		[531.958,22.1567],
		[536.084,21.8993],
		[540.210,22.5429],
		[544.094,22.5944],
		[547.977,22.0023],
		[552.104,21.9251],
		[555.987,22.0023],
		[559.871,21.9508],
		[564.240,22.5686],
		[568.123,22.4399],
		[572.006,22.9548],
		[575.890,22.9805],
		[580.016,22.5429],
		[583.900,22.5429],
		[588.026,22.9548],
		[591.909,23.0578],
		[596.278,23.7786],
		[599.919,23.3410],
		[604.045,24.1133],
		[607.929,24.0875],
		[612.055,23.8816],
		[616.181,23.4182],
		[620.065,23.5984],
		[624.191,23.9331],
		[628.074,24.1648],
		[632.201,24.1133],
		[636.084,24.3192],
		[639.968,24.2162],
		[644.094,24.1905],
		[647.977,24.3192],
		[651.618,24.6281],
		[655.744,24.9113],
		[659.871,25.4519],
		[663.754,24.7569],
		[667.880,24.8341],
		[672.006,24.9113],
		[675.890,24.9886],
		[679.773,25.2975],
		[683.900,24.8084],
		[688.026,25.0915],
		[691.909,25.1430],
		[696.036,25.7094],
		[700.162,26.4302],
	])
	
	# brushtail possum whole eye (Vlahos 2012, fig. II.7) (I misread this as 11.7.)
	# This is slightly different from the transmission curve for just the lens. I didn't
	# use that because they overlap in the graph and the whole eye curve (blue) is
	# on top. Since it's a continuous curve rather than a dot plot, I again made the
	# arbitrary choice to sample it at 5-nm intervals. The wavelength of 50% transmission
	# is at about 370, as reported.
	brushtail_eye = np.array([
		[300.000,0.330716],
		[305.186,0.800026],
		[310.084,2.35957],
		[314.881,6.87857],
		[319.678,11.0341],
		[325.246,13.7362],
		[330.431,15.8151],
		[334.847,17.7898],
		[340.223,20.3879],
		[345.405,24.3359],
		[349.243,27.3489],
		[354.615,33.1661],
		[360.178,39.3988],
		[365.358,45.4237],
		[369.960,51.8637],
		[375.330,59.1347],
		[380.317,65.1595],
		[385.304,70.8728],
		[389.717,75.3397],
		[394.708,78.5608],
		[399.892,81.5742],
		[405.460,83.8609],
		[410.453,85.4205],
		[415.062,86.7722],
		[420.440,88.2281],
		[425.241,89.3723],
		[429.659,90.5163],
		[435.037,91.3491],
		[439.839,91.7663],
		[445.410,92.1839],
		[450.022,91.9780],
		[455.211,90.8377],
		[459.631,89.6972],
		[464.628,88.4530],
		[470.394,86.7938],
		[475.390,86.0688],
		[480.001,85.5514],
		[484.805,85.1379],
		[490.186,84.3093],
		[495.181,83.9997],
		[499.984,84.5208],
		[504.978,85.0419],
		[510.357,85.5632],
		[515.160,85.8766],
		[519.770,86.2938],
		[524.572,87.0226],
		[529.950,87.8554],
		[535.136,88.9997],
		[540.322,90.0401],
		[544.548,90.8725],
		[549.925,92.2246],
		[554.727,92.9533],
		[559.914,93.6822],
		[565.292,94.5151],
		[570.286,95.2439],
		[574.704,95.9725],
		[579.699,96.3898],
		[585.078,96.9111],
		[590.457,96.7056],
		[594.876,96.9150],
		[599.678,97.3322],
		[604.865,97.6457],
		[610.244,97.8555],
		[615.240,97.9613],
		[620.234,98.1709],
		[625.229,98.2767],
		[630.225,98.1748],
		[635.220,98.3845],
		[640.407,98.3865],
		[644.633,98.6997],
		[650.013,98.7018],
		[655.007,99.1191],
		[660.002,99.4325],
		[665.382,99.1231],
		[669.801,99.1248],
		[675.180,99.3346],
		[680.175,99.3365],
		[685.170,99.5462],
		[690.165,99.7558],
		[695.353,99.5501],
		[700.156,99.6559],
	])
	
	# separate X and Y values
	thylamys_x = np.empty(thylamys_lens.shape[0])
	thylamys_y = np.empty(thylamys_lens.shape[0])
	for i in range(thylamys_lens.shape[0]):
		thylamys_x[i] = round(thylamys_lens[i][0])
		thylamys_y[i] = thylamys_lens[i][1]
	brushtail_x = np.empty(brushtail_eye.shape[0])
	brushtail_y = np.empty(brushtail_eye.shape[0])
	for i in range(brushtail_eye.shape[0]):
		brushtail_x[i] = round(brushtail_eye[i][0])
		brushtail_y[i] = brushtail_eye[i][1]
	
	# plot test
	plt.plot(thylamys_x, thylamys_y, 'o')
	plt.show()
	plt.plot(brushtail_x, brushtail_y)
	plt.show()
	
	# interpolate 10-nm intervals
	thylamys_10nm = np.interp(x2a, thylamys_x, thylamys_y)
	brushtail_10nm = np.interp(x2a, brushtail_x, brushtail_y)
	
	# scale to 0-1
	thylamys_10nm = thylamys_10nm / thylamys_10nm[30]
	brushtail_10nm = brushtail_10nm / 100
	
	# remove unnecessary parameters from fitting functions -- we "needed" these because of the
	# log->linear issue. You should (I think) never need to shift the whole thing up and
	# down the y-axis. That just doesn't make sense.
	def vpt_fit1(xdata, t1, scalet1):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], t1)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	def vpt_fit2(xdata, t1, t2, scalet1, scalet2):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], t1) + scalet2*vpt(xdata[i], t2)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	def vpt_fit3(xdata, t1, t2, t3, scalet1, scalet2, scalet3):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], t1) + scalet2*vpt(xdata[i], t2) + scalet3*vpt(xdata[i], t3)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	# also test the difference between unfixed and fixed templates
	def vpt_fit2_fixs(xdata, t1, scalet1, scalet2):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], t1) + scalet2*vpt(xdata[i], args.sw)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	# In these two, the first parameter is named t2 not t1 so the relationship with the
	# coefficients is intuitive.
	def vpt_fit2_fixl(xdata, t2, scalet1, scalet2):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], args.lw) + scalet2*vpt(xdata[i], t2)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	def vpt_fit3_fixls(xdata, t2, scalet1, scalet2, scalet3):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], args.lw) + scalet2*vpt(xdata[i], t2) + scalet3*vpt(xdata[i], args.sw)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	def vpt_fit3_fixall(xdata, scalet1, scalet2, scalet3):
		ydata = np.empty(xdata.shape[0])
		for i in range(xdata.shape[0]):
			value = scalet1*vpt(xdata[i], args.lw) + scalet2*vpt(xdata[i], args.mw) + scalet3*vpt(xdata[i], args.sw)
			if (value >= 0):
				ydata[i] = value
			else:
				ydata[i] = 0
		return(ydata)
	
	# 1: As before, we try fitting one template to the original data to make sure our
	# results aren't too far off. SciPy comes up with 563.6 nm (rounding off to one
	# decimal place) for fig. 1 and 560.5 nm for fig. 2. Jacobs & Williams' fits are
	# 562.4 and 561.6, so these may not be quite right but are pretty close.
	print("Original data from fig. 1")
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x1, y1a_o, p0=[560, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	x_1nm = np.empty(401)
	lws = np.empty(401)
	for i in range(401):
		x_1nm[i] = i + 300
		lws[i] = vpt(i + 300, popt[0]) * popt[1]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, y1a_o, 'ok')
	plt.plot(x_1nm, lws, 'k')
	plt.show()
	
	print("Original data from fig. 2")
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x2a, y2a_o, p0=[560, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	x_1nm = np.empty(401)
	lws = np.empty(401)
	for i in range(401):
		x_1nm[i] = i + 300
		lws[i] = vpt(i + 300, popt[0]) * popt[1]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, y2a_o, 'ok')
	plt.plot(x_1nm, lws, 'k')
	plt.show()
	
	# 2: mouse version
	# a: fig. 2
	# When fitting two templates, the result is 559.2 and 358.9 with a ratio of 95%:5%.
	print("House mouse lens (a)")
	mouse_a = np.empty(31)
	for i in range(31):
		mouse_a[i] = y2a_o[i] / (mouse_filter_data[i+6]/100)
	popt, pcov, infodict, mesg, ier = scipy.optimize.curve_fit(vpt_fit2, x2a, mouse_a, p0=[args.lw, 360, 1, 0.1], full_output=True)
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	#print(infodict)
	#print(mesg)
	#print(ier)
	total = popt[2] + popt[3]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("SWS: " + str(popt[1]) + " nm (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[2]
		sws[i] = vpt(i + 300, popt[1]) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, mouse_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# We're "expecting" to find we can fit a UV pigment in, but let's also compare just
	# one template.
	# result: about the same value (559.2 nm). The curve deviates in the UV, but this isn't
	# really visible in the residual plot where the errors in this region are smaller than
	# at longer wavelengths.
	# Further reading: https://statisticsbyjim.com/regression/check-residual-plots-regression-analysis/
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x2a, mouse_a, p0=[args.lw, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	curve = vpt_fit1(x_1nm, *popt)
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, mouse_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# two types of residual plots: vs. independent variable and vs. fitted values
	# The second plot shows what may be some heteroskedasticity (cone shape),
	# but probably not enough to worry about. That word is hard to spell.
	# https://www.statology.org/heteroscedasticity-regression/
	fitted = vpt_fit1(x2a, *popt)
	residual = fitted - mouse_a
	plt.plot(x2a, residual, 'o')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Residuals")
	plt.show()
	plt.plot(fitted, residual, 'o')
	plt.xlabel("Fitted values")
	plt.ylabel("Residuals")
	plt.show()
	
	# When fitting 3 unrestricted templates, the chosen values for "L" and "M" are well above
	# the plausible range (>580 and >540) for all sets of conditions, so I tried adding the
	# bounds 550-565 for L, 490-510 for M and 350-370 for S. SciPy clearly can't identify
	# a coherent 500-nm signal because it always chooses the largest or smallest possible
	# value, but we may learn something from the other parameters. Here it chooses 490 nm
	# and a negative scaling factor, so an MWS pigment would not be present in this
	# model.
	# I've commented out most of the mouse and brushtail tests because they don't fit
	# with a clear signal from S/UV cones, as explained.
	"""curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2a, mouse_a, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, mouse_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# b: fig. 2+3
	# result: 553.9 (49%), 333.6 (51%)
	print("House mouse lens (b)")
	mouse_b = np.empty(29)
	for i in range(29):
		mouse_b[i] = y2b_o[i] / (mouse_filter_data[i+8]/100)
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x2b, mouse_b, p0=[args.lw, 360, 1, 0.1])
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		sws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, mouse_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# result for 3 templates: L=557.1 (91%), M=510 (8%), S=350 (1%)
	curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2b, mouse_b, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, mouse_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# c: fig. 1
	# result: 562.3
	print("House mouse lens (c)")
	mouse_c = np.empty(20)
	for i in range(20):
		mouse_c[i] = y1a_o[i] / (mouse_filter_data[i+15]/100)
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, mouse_c, p0=[args.lw, 1])
	print("LWS: " + str(curve_fit[0][0]) + " nm")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, mouse_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# 2 templates. This and Thylamys (c) are the only models where plausible values are
	# chosen for L and M without bounds. Here we have 563.2 (97%) and 504.5 (3%).
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x1, mouse_c, p0=[args.lw, args.mw, 1, 0.1])
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, mouse_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# d: fig. 1+3
	# result: 557.1
	print("House mouse lens (d)")
	mouse_d = np.empty(20)
	for i in range(20):
		mouse_d[i] = y1b_o[i] / (mouse_filter_data[i+15]/100)
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, mouse_d, p0=[args.lw, 1])
	print("LWS: " + str(curve_fit[0][0]) + " nm")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, mouse_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# For (d) I also added bounds because otherwise it has the same problem as (b), and we
	# see the same behavior where it chooses the largest value (510). Unlike in (b), the
	# 509.999...-nm template is always given a positive scaling factor. Here we have
	# L=563.2 (85%) and M=510 (15%).
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x1, mouse_d, p0=[args.lw, args.mw, 1, 0.1], bounds=([550, 490, -float('inf'), -float('inf')], [565, 510, float('inf'), float('inf')]))
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, mouse_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# e: linearized sensitivity differences (fig. 2)
	# result: 512.3 nm, scale 0.12. I tried two templates, but it didn't work (the M scaling factor
	# and the S peak value were both negative).
	print("House mouse lens (e)")
	mouse_e = np.empty(29)
	for i in range(29):
		mouse_e[i] = mouse_b[i] - mouse_a[i+2]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x2b, mouse_e, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x2b, mouse_e, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# f: linearized sensitivity differences (fig. 1)
	# result: 508.4 nm (scale 0.13)
	print("House mouse lens (f)")
	mouse_f = np.empty(20)
	for i in range(20):
		mouse_f[i] = mouse_d[i] - mouse_c[i]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, mouse_f, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x1, mouse_f, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()"""
	
	# 3: Thylamys version
	# a
	# result: 557.8 (90%), 369.0 (10%)
	print("Thylamys elegans lens (a)")
	thylamys_a = np.empty(31)
	for i in range(31):
		thylamys_a[i] = y2a_o[i] / thylamys_10nm[i]
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2, x2a, thylamys_a, p0=[args.lw, 360, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[2] + popt[3]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("SWS: " + str(popt[1]) + " nm (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[2]
		sws[i] = vpt(i + 300, popt[1]) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, thylamys_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	fitted = vpt_fit2(x2a, *popt)
	residual = fitted - thylamys_a
	plt.plot(x2a, residual, 'o')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Residuals")
	plt.show()
	
	# 1 template
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x2a, thylamys_a, p0=[args.lw, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	curve = vpt_fit1(x_1nm, *popt)
	lws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[1]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, thylamys_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# The first plot here shows a more obviously non-random deviation below 400 nm.
	fitted = vpt_fit1(x2a, *popt)
	residual = fitted - thylamys_a
	plt.plot(x2a, residual, 'o')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Residuals")
	plt.show()
	plt.plot(fitted, residual, 'o')
	plt.xlabel("Fitted values")
	plt.ylabel("Residuals")
	plt.show()
	
	# result for fixed S (362): L=557.8 (88%), S=12%
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2_fixs, x2a, thylamys_a, p0=[args.lw, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[1] + popt[2]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[1]/total * 100) + "%)")
	print("SWS: " + str(args.sw) + " nm (fixed) (" + str(popt[2]/total * 100) + "%)")
	curve = vpt_fit2_fixs(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[1]
		sws[i] = vpt(i + 300, args.sw) * popt[2]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, thylamys_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# result for 3: L=558.8 (87%), M=510 (3%), S=368.1 (10%)
	"""curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2a, thylamys_a, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, thylamys_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()"""
	
	# b
	# result: 551.6 (76%), 356.4 (24%) This is the only one that picks a plausible value
	# for the UV cone for both a and b.
	print("Thylamys elegans lens (b)")
	thylamys_b = np.empty(29)
	for i in range(29):
		thylamys_b[i] = y2b_o[i] / thylamys_10nm[i]
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2, x2b, thylamys_b, p0=[args.lw, 360, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[2] + popt[3]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("SWS: " + str(popt[1]) + " nm (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[2]
		sws[i] = vpt(i + 300, popt[1]) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, thylamys_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	fitted = vpt_fit2(x2b, *popt)
	residual = fitted - thylamys_b
	plt.plot(x2b, residual, 'o')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Residuals")
	plt.show()
	
	# result for fixed S: L=551.6 (84%), S=16%. Less dramatic but still clearly an increase.
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2_fixs, x2b, thylamys_b, p0=[args.lw, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[1] + popt[2]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[1]/total * 100) + "%)")
	print("SWS: " + str(args.sw) + " nm (fixed) (" + str(popt[2]/total * 100) + "%)")
	curve = vpt_fit2_fixs(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[1]
		sws[i] = vpt(i + 300, args.sw) * popt[2]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, thylamys_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# fixed L and S, third variable
	popt, pcov = scipy.optimize.curve_fit(vpt_fit3_fixls, x2b, thylamys_b, p0=[args.mw, 1, 0.1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[1] + popt[2] + popt[3]
	print("LWS: " + str(args.lw) + " nm (fixed) (" + str(popt[1]/total * 100) + "%)")
	print("MWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("SWS: " + str(args.sw) + " nm (fixed) (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit3_fixls(x_1nm, *popt)
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, args.lw) * popt[1]
		mws[i] = vpt(i + 300, popt[0]) * popt[2]
		sws[i] = vpt(i + 300, args.sw) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, thylamys_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# fix all 3
	popt, pcov = scipy.optimize.curve_fit(vpt_fit3_fixall, x2b, thylamys_b, p0=[1, 0.1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[0] + popt[1] + popt[2]
	print("LWS: " + str(args.lw) + " nm (fixed) (" + str(popt[0]/total * 100) + "%)")
	print("MWS: " + str(args.mw) + " nm (fixed) (" + str(popt[1]/total * 100) + "%)")
	print("SWS: " + str(args.sw) + " nm (fixed) (" + str(popt[2]/total * 100) + "%)")
	curve = vpt_fit3_fixall(x_1nm, *popt)
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, args.lw) * popt[0]
		mws[i] = vpt(i + 300, args.mw) * popt[1]
		sws[i] = vpt(i + 300, args.sw) * popt[2]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, thylamys_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# result for 3: L=557.6 (63%), M=510 (9%), S=350 (37%)
	"""curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2b, thylamys_b, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, thylamys_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()"""
	
	# c: fig. 1
	# result: 560.8
	print("Thylamys lens (c)")
	thylamys_c = np.empty(20)
	for i in range(20):
		thylamys_c[i] = y1a_o[i] / thylamys_10nm[i+9]
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x1, thylamys_c, p0=[args.lw, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	curve = vpt_fit1(x_1nm, *popt)
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, thylamys_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# result for 2: L=562.6 (95%), M=494.7 (5%)
	"""popt, pcov = scipy.optimize.curve_fit(vpt_fit2, x1, thylamys_c, p0=[args.lw, args.mw, 1, 0.1], bounds=([550, 490, -float('inf'), -float('inf')], [565, 510, float('inf'), float('inf')]))
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[2] + popt[3]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("MWS: " + str(popt[1]) + " nm (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *popt)
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[2]
		mws[i] = vpt(i + 300, popt[1]) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, thylamys_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()"""
	
	# d: fig. 1+3
	# result: 555.5
	print("Thylamys lens (d)")
	thylamys_d = np.empty(20)
	for i in range(20):
		thylamys_d[i] = y1b_o[i] / thylamys_10nm[i+9]
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x1, thylamys_d, p0=[args.lw, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	curve = vpt_fit1(x_1nm, *popt)
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, thylamys_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# 2 templates, 1 fixed
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2_fixl, x1, thylamys_d, p0=[args.mw, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[1] + popt[2]
	print("LWS: " + str(args.lw) + " nm (fixed) (" + str(popt[1]/total * 100) + "%)")
	print("MWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	curve = vpt_fit2_fixl(x_1nm, *popt)
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, args.lw) * popt[1]
		mws[i] = vpt(i + 300, popt[0]) * popt[2]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, thylamys_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# result for 2: 563.1 (82%), 510 (18%)
	# Out of the 2+3 and 1+3 models, this one is the closest to being plausible when
	# unbounded: 566.5 (72%), 522.3 (28%).
	"""curve_fit = scipy.optimize.curve_fit(vpt_fit2, x1, thylamys_d, p0=[args.lw, args.mw, 1, 0.1], bounds=([550, 490, -float('inf'), -float('inf')], [565, 510, float('inf'), float('inf')]))
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, thylamys_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# e
	# result: 513.3 nm, scale 0.17
	print("Thylamys lens (e)")
	thylamys_e = np.empty(29)
	for i in range(29):
		thylamys_e[i] = thylamys_b[i] - thylamys_a[i+2]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x2b, thylamys_e, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x2b, thylamys_e, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# f
	# result: 507.3 nm, scale 0.14
	print("Thylamys lens (f)")
	thylamys_f = np.empty(20)
	for i in range(20):
		thylamys_f[i] = thylamys_d[i] - thylamys_c[i]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, thylamys_f, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x1, thylamys_f, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()"""
	
	# 4: brushtail version
	# a
	# result: 557.5 (79%), 343.9 (21%). The shape of the curve on the short-wavelength
	# side of the trough doesn't seem to fit here.
	print("Brushtail possum eye (a)")
	brushtail_a = np.empty(31)
	for i in range(31):
		brushtail_a[i] = y2a_o[i] / brushtail_10nm[i]
	popt, pcov = scipy.optimize.curve_fit(vpt_fit2, x2a, brushtail_a, p0=[args.lw, 360, 1, 0.1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	total = popt[2] + popt[3]
	print("LWS: " + str(popt[0]) + " nm (" + str(popt[2]/total * 100) + "%)")
	print("SWS: " + str(popt[1]) + " nm (" + str(popt[3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *popt)
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, popt[0]) * popt[2]
		sws[i] = vpt(i + 300, popt[1]) * popt[3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, brushtail_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# 1 template
	popt, pcov = scipy.optimize.curve_fit(vpt_fit1, x2a, brushtail_a, p0=[args.lw, 1])
	print("curve_fit output:")
	print("popt: " + str(popt))
	print("pcov: " + str(pcov))
	print("condition number: " + str(np.linalg.cond(pcov)))
	print("diagonal elements: " + str(np.diag(pcov)))
	print("standard deviations: " + str(np.sqrt(np.diag(pcov))))
	print("LWS: " + str(popt[0]) + " nm")
	curve = vpt_fit1(x_1nm, *popt)
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, brushtail_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	fitted = vpt_fit1(x2a, *popt)
	residual = fitted - brushtail_a
	plt.plot(x2a, residual, 'o')
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Residuals")
	plt.show()
	plt.plot(fitted, residual, 'o')
	plt.xlabel("Fitted values")
	plt.ylabel("Residuals")
	plt.show()
	
	# As with the mouse model, MWS gets a negative scaling factor here.
	"""curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2a, brushtail_a, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2a, brushtail_a, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# b
	# result: 552.5 (9%), 333.9 (91%)
	print("Brushtail possum eye (b)")
	brushtail_b = np.empty(29)
	for i in range(29):
		brushtail_b[i] = y2b_o[i] / brushtail_10nm[i]
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x2b, brushtail_b, p0=[args.lw, 360, 1, 0.1])
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		sws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, brushtail_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# result for 3: 553.2 (60%), 510 (1%), 350 (39%)
	curve_fit = scipy.optimize.curve_fit(vpt_fit3, x2b, brushtail_b, p0=[args.lw, args.mw, 360, 1, 0.1, 0.1], bounds=([550, 490, 350, -float('inf'), -float('inf'), -float('inf')], [565, 510, 370, float('inf'), float('inf'), float('inf')]))
	total = curve_fit[0][3] + curve_fit[0][4] + curve_fit[0][5]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][4]/total * 100) + "%)")
	print("SWS: " + str(curve_fit[0][2]) + " nm (" + str(curve_fit[0][5]/total * 100) + "%)")
	curve = vpt_fit3(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	sws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][3]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][4]
		sws[i] = vpt(i + 300, curve_fit[0][2]) * curve_fit[0][5]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x2b, brushtail_b, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.plot(x_1nm, sws, ':k')
	plt.show()
	
	# c: fig. 1
	# result: 560.9
	print("Brushtail possum eye (c)")
	brushtail_c = np.empty(20)
	for i in range(20):
		brushtail_c[i] = y1a_o[i] / brushtail_10nm[i+9]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, thylamys_c, p0=[args.lw, 1])
	print("LWS: " + str(curve_fit[0][0]) + " nm")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, brushtail_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# result: 563 (94%), 510 (6%) (unbounded: 564.0 (90%), 525.4 (10%))
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x1, brushtail_c, p0=[args.lw, args.mw, 1, 0.1], bounds=([550, 490, -float('inf'), -float('inf')], [565, 510, float('inf'), float('inf')]))
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, brushtail_c, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# d: fig. 1+3
	# result: 555.2
	print("Brushtail possum eye (d)")
	brushtail_d = np.empty(20)
	for i in range(20):
		brushtail_d[i] = y1b_o[i] / brushtail_10nm[i+9]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, brushtail_d, p0=[args.lw, 1])
	print("LWS: " + str(curve_fit[0][0]) + " nm")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, brushtail_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# result for 2: 562.4 (82%), 510 (17%)
	curve_fit = scipy.optimize.curve_fit(vpt_fit2, x1, brushtail_d, p0=[args.lw, args.mw, 1, 0.1], bounds=([550, 490, -float('inf'), -float('inf')], [565, 510, float('inf'), float('inf')]))
	total = curve_fit[0][2] + curve_fit[0][3]
	print("LWS: " + str(curve_fit[0][0]) + " nm (" + str(curve_fit[0][2]/total * 100) + "%)")
	print("MWS: " + str(curve_fit[0][1]) + " nm (" + str(curve_fit[0][3]/total * 100) + "%)")
	curve = vpt_fit2(x_1nm, *curve_fit[0])
	lws = np.empty(401)
	mws = np.empty(401)
	for i in range(401):
		lws[i] = vpt(i + 300, curve_fit[0][0]) * curve_fit[0][2]
		mws[i] = vpt(i + 300, curve_fit[0][1]) * curve_fit[0][3]
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	plt.yscale("log")
	plt.ylim(0.01)
	plt.plot(x1, brushtail_d, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.plot(x_1nm, lws, '--k')
	plt.plot(x_1nm, mws, '-.k')
	plt.show()
	
	# e
	# result: 521.1, scale 0.15
	print("Brushtail possum eye (e)")
	brushtail_e = np.empty(29)
	for i in range(29):
		brushtail_e[i] = brushtail_b[i] - brushtail_a[i+2]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x2b, brushtail_e, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x2b, brushtail_e, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()
	
	# f
	# result: 508.3, scale 0.14
	print("Brushtail possum eye (f)")
	brushtail_f = np.empty(20)
	for i in range(20):
		brushtail_f[i] = brushtail_d[i] - brushtail_c[i]
	curve_fit = scipy.optimize.curve_fit(vpt_fit1, x1, brushtail_f, p0=[args.mw, 1])
	print("?: " + str(curve_fit[0][0]) + " nm (scale: " + str(curve_fit[0][1]) + ")")
	curve = vpt_fit1(x_1nm, *curve_fit[0])
	plt.xlabel("Wavelength (nm)")
	plt.ylabel("Relative sensitivity")
	#plt.yscale("log")
	#plt.ylim(0.01)
	plt.plot(x1, brushtail_f, 'ok')
	plt.plot(x_1nm, curve, 'k')
	plt.show()"""
